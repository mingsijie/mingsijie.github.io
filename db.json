{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1559218502000},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1559218502000},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1559218502000},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1559218502000},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1559218502000},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1559218502000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1559218502000},{"_id":"themes/yilia/_config.yml","hash":"53cbf6f1deb060be8b9754c4502b996a2a405e67","modified":1565344856000},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1559218502000},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1559218502000},{"_id":"source/privacy-policy/index.md","hash":"c5f083e05f65c35e89b5ab7f0ef642c517e5c642","modified":1564649102000},{"_id":"source/_posts/e7-8c-9c-e6-95-b0.md","hash":"76a4ab6445908401175dde441ccfe9c53b01daa5","modified":1564649102000},{"_id":"source/_posts/e8-ae-be-e8-ae-a1-e9-a2-98.md","hash":"e75dc3578cb56925fe3e72456f099e777f55c426","modified":1564649102000},{"_id":"source/_posts/e9-9a-8f-e6-9c-ba-e5-af-86-e7-a0-81-e7-94-9f-e6-88-90-e9-87-8d-e5-a4-8d-e5-85-83-e7-b4-a0-e5-88-a4-e5-ae-9a.md","hash":"5bbc5820baf1ae32e07f994640559050b6f35dc8","modified":1565343522000},{"_id":"source/_discarded/hello-world.md","hash":"0f6793fac137fe15ea7cd480d4271fe3d80bf7bf","modified":1565343506000},{"_id":"source/_posts/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e4-b8-89-e7-ab-a0-ef-bc-89.md","hash":"4f603b7f518ef41d9a52be840f3d6620171aff7c","modified":1565343568000},{"_id":"source/_posts/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e5-9b-9b-e7-ab-a0-ef-bc-89.md","hash":"9fd4f93564d4ee00620c81a5745d20dd54c5c83a","modified":1565343556000},{"_id":"source/_posts/python-e8-af-ad-e8-a8-80-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e5-9f-ba-e7-a1-80-e7-ac-ac-e4-ba-8c-e7-ab-a0-e4-b9-a0-e9-a2-98-e5-8f-82-e8-80-83-e7-ad-94-e6-a1-88.md","hash":"3c93063a46e39f7d4fb60431288af68306f50d01","modified":1565343658000},{"_id":"source/_posts/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98.md","hash":"bf5ed660ccf86fa93b1733f8f4cc1cd547f85b62","modified":1565343580000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1efc9d034adf6456e816fcbb20023807ca64bbd0","modified":1559218944000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1559218502000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1559218944000},{"_id":"themes/yilia/.git/config","hash":"3b7c67bc3c0ca702032226f38ca7676efdf0f891","modified":1559218502000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1559218220000},{"_id":"themes/yilia/.git/index","hash":"0291e4c5cc9ed8927bcf427eb443290871568a29","modified":1559218502000},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1559218502000},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1559218502000},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1559218502000},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1559218502000},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1559218502000},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1559218502000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1559218502000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1559218502000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1559218502000},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1559218502000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1559218502000},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1559218502000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1559218502000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1559218502000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1559218502000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1559218502000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1559218502000},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1559218502000},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1559218502000},{"_id":"source/_posts/turtle-海龟绘图-开发文档.md","hash":"cc4e1bab4bd971ba772bf8380b933be017f23ad4","modified":1565343446000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559218502000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1559218502000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1559218502000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1559218220000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1559218220000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1559218220000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"8a0243a2da4433a7a52ec39a7c028ed7cc475514","modified":1559218502000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1559218220000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1559218502000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1559218502000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1559218502000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1559218502000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1559218502000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1559218502000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1559218502000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1559218502000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1559218502000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1559218502000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1559218502000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1559218502000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1559218502000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1559218502000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1559218502000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1559218502000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1559218502000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1559218502000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1559218502000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1559218502000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1559218502000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1559218502000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1559218502000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1559218502000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1559218502000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1559218502000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1559218502000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1559218502000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1559218502000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1559218502000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1559218502000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1559218502000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1559218502000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1559218502000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1559218502000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1559218502000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1559218502000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1559218502000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1559218502000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1559218502000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1559218502000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1559218502000},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1559218502000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1559218502000},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1559218502000},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1559218502000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1559218502000},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1559218502000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1559218502000},{"_id":"themes/yilia/.git/objects/pack/pack-bfb55a5c2d7453470718427ef7b16a4921c538c6.idx","hash":"65749b93b596b1661fd221f040cd5a85334f3975","modified":1559218502000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1559218502000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1559218502000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1559218502000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1559218502000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1559218502000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1559218502000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1559218502000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1559218502000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1559218502000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1559218502000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1559218502000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1559218502000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1559218502000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1559218502000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"8a0243a2da4433a7a52ec39a7c028ed7cc475514","modified":1559218502000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1559218502000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"8a0243a2da4433a7a52ec39a7c028ed7cc475514","modified":1559218502000},{"_id":"themes/yilia/.git/objects/pack/pack-bfb55a5c2d7453470718427ef7b16a4921c538c6.pack","hash":"dd69a5145da4c1fcdc00c11b0f9472420a6e095e","modified":1559218502000},{"_id":"public/privacy-policy/index.html","hash":"08f5918a360440e6fab6b0262824ee8596dc6213","modified":1565344965080},{"_id":"public/2019/08/09/turtle-海龟绘图-开发文档/index.html","hash":"5f3d860f8db14888cc0df40a70e31c0ea8232203","modified":1565344965080},{"_id":"public/2019/07/04/e8-ae-be-e8-ae-a1-e9-a2-98/index.html","hash":"3977f4027f8d003ab727895b40bf04419b0c6cd1","modified":1565344965081},{"_id":"public/2019/06/29/e9-9a-8f-e6-9c-ba-e5-af-86-e7-a0-81-e7-94-9f-e6-88-90-e9-87-8d-e5-a4-8d-e5-85-83-e7-b4-a0-e5-88-a4-e5-ae-9a/index.html","hash":"0f77ea377acf6fb1d9bc421388a941df900290b7","modified":1565344965081},{"_id":"public/2019/06/17/e7-8c-9c-e6-95-b0/index.html","hash":"c39365e3a87fc4ef14e1a09bd5fdebf91fb91958","modified":1565344965082},{"_id":"public/2019/05/31/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e5-9b-9b-e7-ab-a0-ef-bc-89/index.html","hash":"e1f35dcc2adeef0c55d51c293bdf1869b27bb723","modified":1565344965082},{"_id":"public/2019/05/31/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e4-b8-89-e7-ab-a0-ef-bc-89/index.html","hash":"218d5b1e17e95ea89839987ca27e45c24482c3d0","modified":1565344965082},{"_id":"public/2019/05/31/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98/index.html","hash":"9127ac4cdbf99b092b7bac623123cde50d068882","modified":1565344965083},{"_id":"public/2019/05/26/python-e8-af-ad-e8-a8-80-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e5-9f-ba-e7-a1-80-e7-ac-ac-e4-ba-8c-e7-ab-a0-e4-b9-a0-e9-a2-98-e5-8f-82-e8-80-83-e7-ad-94-e6-a1-88/index.html","hash":"e87ca892bb27ddff756b7ea89eb874bd80b13cd0","modified":1565344965083},{"_id":"public/categories/Python初学/index.html","hash":"0cd6094590c297d28ba227101f72bd0f82cdb47d","modified":1565344965083},{"_id":"public/categories/未分类/index.html","hash":"13634301f298842f304846089057e8cc54274647","modified":1565344965083},{"_id":"public/archives/index.html","hash":"e7ad4b94b506626f02586126daaf6a12a9da5a21","modified":1565344965083},{"_id":"public/index.html","hash":"27774e24bbaa0f6980b42ea9fe98fd8893df82bb","modified":1565344965084},{"_id":"public/archives/2019/index.html","hash":"26dc48eab5a57acff977a4c85758d17b0cefff91","modified":1565344965084},{"_id":"public/archives/2019/05/index.html","hash":"fdf15755e23902e5c6089eefc2d1dd9c4e3e56e2","modified":1565344965084},{"_id":"public/archives/2019/06/index.html","hash":"d4e9ef13fbe72e6de80f689668351e3a78704092","modified":1565344965084},{"_id":"public/archives/2019/07/index.html","hash":"35123168d2e0f1146609d16c2e96d58b991b53d7","modified":1565344965084},{"_id":"public/archives/2019/08/index.html","hash":"ec36c9b5e5ad2186937e797d65536c220458fcd4","modified":1565344965084},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1565344965088},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1565344965088},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1565344965088},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1565344965088},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1565344965089},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1565344965089},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1565344965089},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1565344965089},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1565344965089},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1565344965116},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1565344965116},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1565344965134},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1565344965160}],"Category":[{"name":"Python初学","_id":"cjz3xz48r0002vovquej9yih9"},{"name":"未分类","_id":"cjz3xz4950006vovq2e30ncfw"}],"Data":[],"Page":[{"title":"隐私政策","url":"3.html","id":3,"comments":0,"date":"2019-05-24T12:39:32.000Z","_content":"\n我们是谁\n----\n\n我们的站点地址是：http://www.yeguang.me。\n\n我们收集何种及为何收集个人数据\n---------------\n\n### 评论\n\n当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。\n\n由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。\n\n### 媒体\n\n如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。\n\n### 联系表单\n\n### Cookies\n\n如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。\n\nIf you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.\n\n当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您登出您的账户，用于登录的cookies将会被移除。\n\n如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。\n\n### 其他站点的嵌入内容\n\n此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。\n\n这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。\n\n### 统计\n\n我们与谁共享您的信息\n----------\n\n我们保留多久您的信息\n----------\n\n如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。\n\n对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。\n\n您对您的信息有什么权利\n-----------\n\n如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。\n\n我们将您的信息发送到哪\n-----------\n\n访客评论可能会被自动垃圾评论监测服务检查。\n\n您的联系信息\n------\n\n其他信息\n----\n\n### 我们如何保护您的数据\n\n### 我们有何种数据泄露处理流程\n\n### 我们从哪些第三方接收数据\n\n### 我们通过用户数据进行何种自动决策及/或归纳\n\n### 行业监管披露要求","source":"privacy-policy/index.md","raw":"---\ntitle: 隐私政策\nurl: 3.html\nid: 3\ncomments: false\ndate: 2019-05-24 20:39:32\n---\n\n我们是谁\n----\n\n我们的站点地址是：http://www.yeguang.me。\n\n我们收集何种及为何收集个人数据\n---------------\n\n### 评论\n\n当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。\n\n由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。\n\n### 媒体\n\n如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。\n\n### 联系表单\n\n### Cookies\n\n如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。\n\nIf you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.\n\n当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您登出您的账户，用于登录的cookies将会被移除。\n\n如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。\n\n### 其他站点的嵌入内容\n\n此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。\n\n这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。\n\n### 统计\n\n我们与谁共享您的信息\n----------\n\n我们保留多久您的信息\n----------\n\n如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。\n\n对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。\n\n您对您的信息有什么权利\n-----------\n\n如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。\n\n我们将您的信息发送到哪\n-----------\n\n访客评论可能会被自动垃圾评论监测服务检查。\n\n您的联系信息\n------\n\n其他信息\n----\n\n### 我们如何保护您的数据\n\n### 我们有何种数据泄露处理流程\n\n### 我们从哪些第三方接收数据\n\n### 我们通过用户数据进行何种自动决策及/或归纳\n\n### 行业监管披露要求","updated":"2019-08-01T08:45:02.000Z","path":"privacy-policy/index.html","layout":"page","_id":"cjz3xz48k0000vovqxkxwr88h","content":"<h2 id=\"我们是谁\"><a href=\"#我们是谁\" class=\"headerlink\" title=\"我们是谁\"></a>我们是谁</h2><p>我们的站点地址是：<a href=\"http://www.yeguang.me。\" target=\"_blank\" rel=\"noopener\">http://www.yeguang.me。</a></p>\n<h2 id=\"我们收集何种及为何收集个人数据\"><a href=\"#我们收集何种及为何收集个人数据\" class=\"headerlink\" title=\"我们收集何种及为何收集个人数据\"></a>我们收集何种及为何收集个人数据</h2><h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p>\n<p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：<a href=\"https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。\" target=\"_blank\" rel=\"noopener\">https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</a></p>\n<h3 id=\"媒体\"><a href=\"#媒体\" class=\"headerlink\" title=\"媒体\"></a>媒体</h3><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p>\n<h3 id=\"联系表单\"><a href=\"#联系表单\" class=\"headerlink\" title=\"联系表单\"></a>联系表单</h3><h3 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h3><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p>\n<p>If you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p>\n<p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您登出您的账户，用于登录的cookies将会被移除。</p>\n<p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。</p>\n<h3 id=\"其他站点的嵌入内容\"><a href=\"#其他站点的嵌入内容\" class=\"headerlink\" title=\"其他站点的嵌入内容\"></a>其他站点的嵌入内容</h3><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p>\n<p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p>\n<h3 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h3><h2 id=\"我们与谁共享您的信息\"><a href=\"#我们与谁共享您的信息\" class=\"headerlink\" title=\"我们与谁共享您的信息\"></a>我们与谁共享您的信息</h2><h2 id=\"我们保留多久您的信息\"><a href=\"#我们保留多久您的信息\" class=\"headerlink\" title=\"我们保留多久您的信息\"></a>我们保留多久您的信息</h2><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p>\n<p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p>\n<h2 id=\"您对您的信息有什么权利\"><a href=\"#您对您的信息有什么权利\" class=\"headerlink\" title=\"您对您的信息有什么权利\"></a>您对您的信息有什么权利</h2><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p>\n<h2 id=\"我们将您的信息发送到哪\"><a href=\"#我们将您的信息发送到哪\" class=\"headerlink\" title=\"我们将您的信息发送到哪\"></a>我们将您的信息发送到哪</h2><p>访客评论可能会被自动垃圾评论监测服务检查。</p>\n<h2 id=\"您的联系信息\"><a href=\"#您的联系信息\" class=\"headerlink\" title=\"您的联系信息\"></a>您的联系信息</h2><h2 id=\"其他信息\"><a href=\"#其他信息\" class=\"headerlink\" title=\"其他信息\"></a>其他信息</h2><h3 id=\"我们如何保护您的数据\"><a href=\"#我们如何保护您的数据\" class=\"headerlink\" title=\"我们如何保护您的数据\"></a>我们如何保护您的数据</h3><h3 id=\"我们有何种数据泄露处理流程\"><a href=\"#我们有何种数据泄露处理流程\" class=\"headerlink\" title=\"我们有何种数据泄露处理流程\"></a>我们有何种数据泄露处理流程</h3><h3 id=\"我们从哪些第三方接收数据\"><a href=\"#我们从哪些第三方接收数据\" class=\"headerlink\" title=\"我们从哪些第三方接收数据\"></a>我们从哪些第三方接收数据</h3><h3 id=\"我们通过用户数据进行何种自动决策及-或归纳\"><a href=\"#我们通过用户数据进行何种自动决策及-或归纳\" class=\"headerlink\" title=\"我们通过用户数据进行何种自动决策及/或归纳\"></a>我们通过用户数据进行何种自动决策及/或归纳</h3><h3 id=\"行业监管披露要求\"><a href=\"#行业监管披露要求\" class=\"headerlink\" title=\"行业监管披露要求\"></a>行业监管披露要求</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"我们是谁\"><a href=\"#我们是谁\" class=\"headerlink\" title=\"我们是谁\"></a>我们是谁</h2><p>我们的站点地址是：<a href=\"http://www.yeguang.me。\" target=\"_blank\" rel=\"noopener\">http://www.yeguang.me。</a></p>\n<h2 id=\"我们收集何种及为何收集个人数据\"><a href=\"#我们收集何种及为何收集个人数据\" class=\"headerlink\" title=\"我们收集何种及为何收集个人数据\"></a>我们收集何种及为何收集个人数据</h2><h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p>\n<p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：<a href=\"https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。\" target=\"_blank\" rel=\"noopener\">https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</a></p>\n<h3 id=\"媒体\"><a href=\"#媒体\" class=\"headerlink\" title=\"媒体\"></a>媒体</h3><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p>\n<h3 id=\"联系表单\"><a href=\"#联系表单\" class=\"headerlink\" title=\"联系表单\"></a>联系表单</h3><h3 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h3><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p>\n<p>If you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p>\n<p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您登出您的账户，用于登录的cookies将会被移除。</p>\n<p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。</p>\n<h3 id=\"其他站点的嵌入内容\"><a href=\"#其他站点的嵌入内容\" class=\"headerlink\" title=\"其他站点的嵌入内容\"></a>其他站点的嵌入内容</h3><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p>\n<p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p>\n<h3 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h3><h2 id=\"我们与谁共享您的信息\"><a href=\"#我们与谁共享您的信息\" class=\"headerlink\" title=\"我们与谁共享您的信息\"></a>我们与谁共享您的信息</h2><h2 id=\"我们保留多久您的信息\"><a href=\"#我们保留多久您的信息\" class=\"headerlink\" title=\"我们保留多久您的信息\"></a>我们保留多久您的信息</h2><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p>\n<p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p>\n<h2 id=\"您对您的信息有什么权利\"><a href=\"#您对您的信息有什么权利\" class=\"headerlink\" title=\"您对您的信息有什么权利\"></a>您对您的信息有什么权利</h2><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p>\n<h2 id=\"我们将您的信息发送到哪\"><a href=\"#我们将您的信息发送到哪\" class=\"headerlink\" title=\"我们将您的信息发送到哪\"></a>我们将您的信息发送到哪</h2><p>访客评论可能会被自动垃圾评论监测服务检查。</p>\n<h2 id=\"您的联系信息\"><a href=\"#您的联系信息\" class=\"headerlink\" title=\"您的联系信息\"></a>您的联系信息</h2><h2 id=\"其他信息\"><a href=\"#其他信息\" class=\"headerlink\" title=\"其他信息\"></a>其他信息</h2><h3 id=\"我们如何保护您的数据\"><a href=\"#我们如何保护您的数据\" class=\"headerlink\" title=\"我们如何保护您的数据\"></a>我们如何保护您的数据</h3><h3 id=\"我们有何种数据泄露处理流程\"><a href=\"#我们有何种数据泄露处理流程\" class=\"headerlink\" title=\"我们有何种数据泄露处理流程\"></a>我们有何种数据泄露处理流程</h3><h3 id=\"我们从哪些第三方接收数据\"><a href=\"#我们从哪些第三方接收数据\" class=\"headerlink\" title=\"我们从哪些第三方接收数据\"></a>我们从哪些第三方接收数据</h3><h3 id=\"我们通过用户数据进行何种自动决策及-或归纳\"><a href=\"#我们通过用户数据进行何种自动决策及-或归纳\" class=\"headerlink\" title=\"我们通过用户数据进行何种自动决策及/或归纳\"></a>我们通过用户数据进行何种自动决策及/或归纳</h3><h3 id=\"行业监管披露要求\"><a href=\"#行业监管披露要求\" class=\"headerlink\" title=\"行业监管披露要求\"></a>行业监管披露要求</h3>"}],"Post":[{"title":"猜数","url":"34.html","id":"34","date":"2019-06-17T15:05:58.000Z","_content":"\n    #P121  4.1猜数游戏\n    import random\n    待猜数 = random.randrange(0,9)\n    次数 = 0\n    while True:\n        猜数 = int(input(\"请猜数： \"))\n        次数 += 1\n        if 猜数 == 待猜数:\n            print(\"预测{}次，你猜中了！\".format(次数))\n            break\n        elif 猜数<= 待猜数 :\n            print(\"遗憾，太小了\")\n        else :\n            print(\"遗憾，太大了\")","source":"_posts/e7-8c-9c-e6-95-b0.md","raw":"---\ntitle: 猜数\nurl: 34.html\nid: 34\ncategories:\n  - Python初学\ndate: 2019-06-17 23:05:58\ntags:\n---\n\n    #P121  4.1猜数游戏\n    import random\n    待猜数 = random.randrange(0,9)\n    次数 = 0\n    while True:\n        猜数 = int(input(\"请猜数： \"))\n        次数 += 1\n        if 猜数 == 待猜数:\n            print(\"预测{}次，你猜中了！\".format(次数))\n            break\n        elif 猜数<= 待猜数 :\n            print(\"遗憾，太小了\")\n        else :\n            print(\"遗憾，太大了\")","slug":"e7-8c-9c-e6-95-b0","published":1,"updated":"2019-08-01T08:45:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz48m0001vovqb0wgwoe1","content":"<pre><code>#P121  4.1猜数游戏\nimport random\n待猜数 = random.randrange(0,9)\n次数 = 0\nwhile True:\n    猜数 = int(input(&quot;请猜数： &quot;))\n    次数 += 1\n    if 猜数 == 待猜数:\n        print(&quot;预测{}次，你猜中了！&quot;.format(次数))\n        break\n    elif 猜数&lt;= 待猜数 :\n        print(&quot;遗憾，太小了&quot;)\n    else :\n        print(&quot;遗憾，太大了&quot;)</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#P121  4.1猜数游戏\nimport random\n待猜数 = random.randrange(0,9)\n次数 = 0\nwhile True:\n    猜数 = int(input(&quot;请猜数： &quot;))\n    次数 += 1\n    if 猜数 == 待猜数:\n        print(&quot;预测{}次，你猜中了！&quot;.format(次数))\n        break\n    elif 猜数&lt;= 待猜数 :\n        print(&quot;遗憾，太小了&quot;)\n    else :\n        print(&quot;遗憾，太大了&quot;)</code></pre>"},{"title":"设计题","url":"43.html","id":"43","date":"2019-07-04T02:16:21.000Z","_content":"\n[《电工电子技术实验》课程设计内容](https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx)[下载](https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx)","source":"_posts/e8-ae-be-e8-ae-a1-e9-a2-98.md","raw":"---\ntitle: 设计题\nurl: 43.html\nid: 43\ncategories:\n  - 未分类\ndate: 2019-07-04 10:16:21\ntags:\n---\n\n[《电工电子技术实验》课程设计内容](https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx)[下载](https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx)","slug":"e8-ae-be-e8-ae-a1-e9-a2-98","published":1,"updated":"2019-08-01T08:45:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz4920004vovq3dy16v0s","content":"<p><a href=\"https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx\" target=\"_blank\" rel=\"noopener\">《电工电子技术实验》课程设计内容</a><a href=\"https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx\" target=\"_blank\" rel=\"noopener\">《电工电子技术实验》课程设计内容</a><a href=\"https://www.yeguang.me/wp-content/uploads/2019/07/《电工电子技术实验》课程设计内容.docx\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n"},{"title":"随机密码生成/重复元素判定","url":"38.html","id":"38","date":"2019-06-29T01:58:26.000Z","_content":"6.1随机密码生成\n\n    import random\n    #生成题目列表\n    ls = []\n    for i in range(48,58) : \n        ls.append(chr(i))\n    for i in range (97,123):\n        ls.append(chr(i))\n    for i in range (65,91) :\n        ls.append(chr(i))\n    print(ls)\n    \n    #生成10个密码\n    for i in range(1,11):\n        print(\"密码\",i,'为：',end='')\n        #从列表中随机取值\n        for a in range(8):\n            print(ls[random.randrange(0,len(ls),1)],end='')\n        print(\"\")\n<!--more-->\n6.2重复元素判定\n\n    \n    \n    def check(ls):\n        try :\n            #将列表转换成集合，若列表中存在重复项，转换成列表时重复项会自动去掉。\n            a = set(ls)\n            #将集合重新转换成列表于原列表进行对比，若果相同的话即可证明原列表中无重复元素。\n            if list(a) == ls:\n                return True\n        except :\n            return False\n    \n    #输入列表\n    def getls():\n        ls1 = []\n        print(\"请输入列表元素，每输入一个元素敲一次回车。最后以回车结束输入：\")\n        while True:\n            thing = input(\"请输入元素：\")\n            if thing != \"\":\n                ls1.append(eval(thing))\n            else:\n                break\n        return ls1\n    \n    \n    def main():\n        print(\"本程序用于判断输入列表是否存在重复元素。\")\n        if check(getls()) is True :\n            print('列表中无重复元素！')\n        else :\n            print('列表中存在重复元素！')\n    \n    main()","source":"_posts/e9-9a-8f-e6-9c-ba-e5-af-86-e7-a0-81-e7-94-9f-e6-88-90-e9-87-8d-e5-a4-8d-e5-85-83-e7-b4-a0-e5-88-a4-e5-ae-9a.md","raw":"title: 随机密码生成/重复元素判定\nurl: 38.html\nid: 38\ncategories:\n  - Python初学\ndate: 2019-06-29 09:58:26\ntags:\n---\n6.1随机密码生成\n\n    import random\n    #生成题目列表\n    ls = []\n    for i in range(48,58) : \n        ls.append(chr(i))\n    for i in range (97,123):\n        ls.append(chr(i))\n    for i in range (65,91) :\n        ls.append(chr(i))\n    print(ls)\n    \n    #生成10个密码\n    for i in range(1,11):\n        print(\"密码\",i,'为：',end='')\n        #从列表中随机取值\n        for a in range(8):\n            print(ls[random.randrange(0,len(ls),1)],end='')\n        print(\"\")\n<!--more-->\n6.2重复元素判定\n\n    \n    \n    def check(ls):\n        try :\n            #将列表转换成集合，若列表中存在重复项，转换成列表时重复项会自动去掉。\n            a = set(ls)\n            #将集合重新转换成列表于原列表进行对比，若果相同的话即可证明原列表中无重复元素。\n            if list(a) == ls:\n                return True\n        except :\n            return False\n    \n    #输入列表\n    def getls():\n        ls1 = []\n        print(\"请输入列表元素，每输入一个元素敲一次回车。最后以回车结束输入：\")\n        while True:\n            thing = input(\"请输入元素：\")\n            if thing != \"\":\n                ls1.append(eval(thing))\n            else:\n                break\n        return ls1\n    \n    \n    def main():\n        print(\"本程序用于判断输入列表是否存在重复元素。\")\n        if check(getls()) is True :\n            print('列表中无重复元素！')\n        else :\n            print('列表中存在重复元素！')\n    \n    main()","slug":"e9-9a-8f-e6-9c-ba-e5-af-86-e7-a0-81-e7-94-9f-e6-88-90-e9-87-8d-e5-a4-8d-e5-85-83-e7-b4-a0-e5-88-a4-e5-ae-9a","published":1,"updated":"2019-08-09T09:38:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz4940005vovqs5fz8c9d","content":"<p>6.1随机密码生成</p>\n<pre><code>import random\n#生成题目列表\nls = []\nfor i in range(48,58) : \n    ls.append(chr(i))\nfor i in range (97,123):\n    ls.append(chr(i))\nfor i in range (65,91) :\n    ls.append(chr(i))\nprint(ls)\n\n#生成10个密码\nfor i in range(1,11):\n    print(&quot;密码&quot;,i,&apos;为：&apos;,end=&apos;&apos;)\n    #从列表中随机取值\n    for a in range(8):\n        print(ls[random.randrange(0,len(ls),1)],end=&apos;&apos;)\n    print(&quot;&quot;)</code></pre><a id=\"more\"></a>\n<p>6.2重复元素判定</p>\n<pre><code>def check(ls):\n    try :\n        #将列表转换成集合，若列表中存在重复项，转换成列表时重复项会自动去掉。\n        a = set(ls)\n        #将集合重新转换成列表于原列表进行对比，若果相同的话即可证明原列表中无重复元素。\n        if list(a) == ls:\n            return True\n    except :\n        return False\n\n#输入列表\ndef getls():\n    ls1 = []\n    print(&quot;请输入列表元素，每输入一个元素敲一次回车。最后以回车结束输入：&quot;)\n    while True:\n        thing = input(&quot;请输入元素：&quot;)\n        if thing != &quot;&quot;:\n            ls1.append(eval(thing))\n        else:\n            break\n    return ls1\n\n\ndef main():\n    print(&quot;本程序用于判断输入列表是否存在重复元素。&quot;)\n    if check(getls()) is True :\n        print(&apos;列表中无重复元素！&apos;)\n    else :\n        print(&apos;列表中存在重复元素！&apos;)\n\nmain()</code></pre>","site":{"data":{}},"excerpt":"<p>6.1随机密码生成</p>\n<pre><code>import random\n#生成题目列表\nls = []\nfor i in range(48,58) : \n    ls.append(chr(i))\nfor i in range (97,123):\n    ls.append(chr(i))\nfor i in range (65,91) :\n    ls.append(chr(i))\nprint(ls)\n\n#生成10个密码\nfor i in range(1,11):\n    print(&quot;密码&quot;,i,&apos;为：&apos;,end=&apos;&apos;)\n    #从列表中随机取值\n    for a in range(8):\n        print(ls[random.randrange(0,len(ls),1)],end=&apos;&apos;)\n    print(&quot;&quot;)</code></pre>","more":"<p>6.2重复元素判定</p>\n<pre><code>def check(ls):\n    try :\n        #将列表转换成集合，若列表中存在重复项，转换成列表时重复项会自动去掉。\n        a = set(ls)\n        #将集合重新转换成列表于原列表进行对比，若果相同的话即可证明原列表中无重复元素。\n        if list(a) == ls:\n            return True\n    except :\n        return False\n\n#输入列表\ndef getls():\n    ls1 = []\n    print(&quot;请输入列表元素，每输入一个元素敲一次回车。最后以回车结束输入：&quot;)\n    while True:\n        thing = input(&quot;请输入元素：&quot;)\n        if thing != &quot;&quot;:\n            ls1.append(eval(thing))\n        else:\n            break\n    return ls1\n\n\ndef main():\n    print(&quot;本程序用于判断输入列表是否存在重复元素。&quot;)\n    if check(getls()) is True :\n        print(&apos;列表中无重复元素！&apos;)\n    else :\n        print(&apos;列表中存在重复元素！&apos;)\n\nmain()</code></pre>"},{"title":"Python程序设计例题（第一、二章）","url":"24.html","id":"24","date":"2019-05-31T04:41:22.000Z","_content":"第一章例题\n\n    #计算圆周率\n    from random import random,seed\n    试验点数 = 10000000\n    hits = 0.0\n    seed(125)\n    for i in range(1, 试验点数+1):\n        x, y = random(), random()\n        dist = pow(x ** 2 + y ** 2, 0.5)\n        if dist <= 1.0:\n            hits = hits + 1\n    pi = 4 * (hits/试验点数)\n    print(\"圆周率值是: {}\".format(pi))\n    print('与3.1415926相差：{}'.format(3.1415926-pi))\n    \n<!--more-->\n第二章例题\n\n    #货币汇率转换\n    # def convert_currency(im, er):\n    #     \"\"\"\n    #         汇率兑换函数\n    #     \"\"\"\n    #     out = im * er\n    #     return out\n    \n    \n    def main():\n        \"\"\"\n            主函数\n        \"\"\"\n        # 汇率\n        USD_VS_RMB = 6.77\n    \n        # 带单位的货币输入\n        currency_str_value = input('请输入带单位的货币金额：')\n    \n        unit = currency_str_value[-3:]\n    \n        if unit == 'CNY':\n            exchange_rate = 1 / USD_VS_RMB\n    \n        elif unit == 'USD':\n            exchange_rate = USD_VS_RMB\n    \n        else:\n            exchange_rate = -1\n    \n        if exchange_rate != -1:\n            in_money = eval(currency_str_value[:-3])\n            # 使用lambda定义函数\n            convert_currency2 = lambda x: x * exchange_rate\n    \n            # # 调用函数\n            # out_money = convert_currency(in_money, exchange_rate)\n    \n            # 调用lambda函数\n            out_money = convert_currency2(in_money)\n            print('转换后的金额：', out_money)\n        else:\n            print('不支持该种货币！')\n    \n    if __name__ == '__main__':\n        main()\n    \n\n    #蟒蛇绘制\n    import turtle\n    \n    snakeWidth = 25\t\t\t# 蛇身体宽度\n    snakeColor = 'purple'\t# 蛇身体颜色\n    snakeStepAngle = 40\t\t# 蛇蜿蜒的角度\n    snakeStepRadius = 40\t# 蛇蜿蜒的半径\n    snakeStepCount = 4\t\t# 蛇蜿蜒的次数\n    \n    # 设置窗口和笔刷属性\n    turtle.setup(650,350)\n    turtle.pensize(snakeWidth)\n    turtle.pencolor(snakeColor)\n    \n    # 把笔刷移动到左侧\n    turtle.penup()\n    turtle.fd(-300)\n    turtle.pendown()\n    \n    # 绘制蜿蜒的部分\n    turtle.setheading(-snakeStepAngle)\n    for i in range(snakeStepCount):\n    \tturtle.circle(snakeStepRadius,snakeStepAngle*2)\n    \tturtle.circle(-snakeStepRadius,snakeStepAngle*2)\n    \n    # 让蜿蜒过后的身体朝向右侧水平位置\n    turtle.circle(snakeStepRadius,snakeStepAngle)\n    # 绘制一段水平的sentiment\n    turtle.forward(snakeStepRadius)\n    # 绘制扭头的部分\n    turtle.circle(snakeStepRadius/2, 180)\n    turtle.forward(snakeStepRadius)\n    \n    turtle.done()\n\n    #绘制同切圆（1）\n    import turtle\n    turtle.pensize(5)\n    turtle.pencolor(\"red\")\n    \n    for r in (10,40,80,100):\n        turtle.circle(r)\n        turtle.goto(0,0)\n        turtle.right(90)\n        turtle.fd(r)\n        turtle.left(90)\n        \n\n    #绘制同切圆（2）\n    import turtle\n    turtle.pensize(5)\n    \n    for (r,c) in ((10,\"black\"),(40,\"red\"),(80,\"green\"),(100,\"blue\")):\n        turtle.pencolor(c)\n        turtle.circle(r)\n    \n\n    #绘制同切圆（3）\n    import turtle\n    \n    \n    for (r,c,w) in ((10,\"black\",5),(40,\"red\",3),(80,\"green\",2),(100,\"blue\",4)):\n        turtle.pencolor(c)\n        turtle.pensize(w)\n        turtle.circle(r)\n        \n    \n\n    #同切圆变量赋值\n    import turtle\n    \n    r=100\n    c=\"black\"\n    w=5\n    \n    #(r,c,w) = (10,\"black\",5)\n    #r,c,w = (10,\"black\",5)\n    #r,c,w = 10,\"black\",5\n    \n    turtle.pencolor(c)\n    turtle.pensize(w)\n    turtle.circle(r)\n        \n    \n\n    #同切圆\n    import turtle\n    turtle.pensize(5)\n    \n    turtle.circle(10)\n    turtle.circle(40)\n    turtle.circle(80)\n    turtle.circle(160)\n    \n    \n\n    #绘制同心圆\n    import turtle\n    ##turtle.setup(800,800,0,0)\n    turtle.setup(1.,1.)\n    turtle.screensize(800,800,\"black\")\n    turtle.shape('turtle')\n    turtle.pensize(5)\n    turtle.pencolor('blue')\n    turtle.circle(200)\n    turtle.penup()\n    turtle.goto(0,50)\n    turtle.pendown()\n    turtle.pencolor('red')\n    turtle.circle(150)\n    turtle.penup()\n    turtle.goto(0,100)\n    turtle.pendown()\n    turtle.color('green')\n    turtle.circle(100)\n    \n    \n    turtle.exitonclick()\n    \n    \n\n    #绘制太极阴阳\n    import turtle\n    import time\n    r=50\n    turtle.begin_fill()\n    turtle.circle(r,180)\n    turtle.circle(2*r,180)\n    turtle.circle(r,-180)\n    turtle.end_fill()\n    \n    turtle.seth(0)\n    turtle.color(\"black\",\"green\")\n    turtle.begin_fill()\n    turtle.circle(r,180)\n    turtle.circle(2*r,-180)\n    turtle.circle(r,-180)\n    turtle.end_fill()\n    \n    rEye = 15\n    turtle.color(\"yellow\",\"white\")\n    turtle.begin_fill()\n    turtle.penup()\n    turtle.goto(0,r+rEye)\n    turtle.pendown()\n    turtle.circle(rEye)\n    \n    turtle.penup()\n    turtle.goto(0,-r+rEye)\n    turtle.pendown()\n    turtle.circle(rEye)\n    turtle.end_fill()\n    \n    turtle.hideturtle()\n    time.sleep(3)\n    \n    \n    while  turtle.undobufferentries():\n        turtle.undo()\n    \n\n    #绘制圆内接多边形\n    import turtle\n    r=100\n    turtle.pensize(3)\n    turtle.circle(r,steps=3)\n    turtle.pencolor(\"red\")\n    turtle.circle(r,steps=4)\n    turtle.pencolor(\"green\")\n    turtle.circle(r,steps=5)\n    ##turtle.pencolor(\"blue\")\n    ##turtle.circle(r,steps=6)","source":"_posts/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98.md","raw":"title: Python程序设计例题（第一、二章）\nurl: 24.html\nid: 24\ncategories:\n  - Python初学\ndate: 2019-05-31 12:41:22\ntags:\n---\n第一章例题\n\n    #计算圆周率\n    from random import random,seed\n    试验点数 = 10000000\n    hits = 0.0\n    seed(125)\n    for i in range(1, 试验点数+1):\n        x, y = random(), random()\n        dist = pow(x ** 2 + y ** 2, 0.5)\n        if dist <= 1.0:\n            hits = hits + 1\n    pi = 4 * (hits/试验点数)\n    print(\"圆周率值是: {}\".format(pi))\n    print('与3.1415926相差：{}'.format(3.1415926-pi))\n    \n<!--more-->\n第二章例题\n\n    #货币汇率转换\n    # def convert_currency(im, er):\n    #     \"\"\"\n    #         汇率兑换函数\n    #     \"\"\"\n    #     out = im * er\n    #     return out\n    \n    \n    def main():\n        \"\"\"\n            主函数\n        \"\"\"\n        # 汇率\n        USD_VS_RMB = 6.77\n    \n        # 带单位的货币输入\n        currency_str_value = input('请输入带单位的货币金额：')\n    \n        unit = currency_str_value[-3:]\n    \n        if unit == 'CNY':\n            exchange_rate = 1 / USD_VS_RMB\n    \n        elif unit == 'USD':\n            exchange_rate = USD_VS_RMB\n    \n        else:\n            exchange_rate = -1\n    \n        if exchange_rate != -1:\n            in_money = eval(currency_str_value[:-3])\n            # 使用lambda定义函数\n            convert_currency2 = lambda x: x * exchange_rate\n    \n            # # 调用函数\n            # out_money = convert_currency(in_money, exchange_rate)\n    \n            # 调用lambda函数\n            out_money = convert_currency2(in_money)\n            print('转换后的金额：', out_money)\n        else:\n            print('不支持该种货币！')\n    \n    if __name__ == '__main__':\n        main()\n    \n\n    #蟒蛇绘制\n    import turtle\n    \n    snakeWidth = 25\t\t\t# 蛇身体宽度\n    snakeColor = 'purple'\t# 蛇身体颜色\n    snakeStepAngle = 40\t\t# 蛇蜿蜒的角度\n    snakeStepRadius = 40\t# 蛇蜿蜒的半径\n    snakeStepCount = 4\t\t# 蛇蜿蜒的次数\n    \n    # 设置窗口和笔刷属性\n    turtle.setup(650,350)\n    turtle.pensize(snakeWidth)\n    turtle.pencolor(snakeColor)\n    \n    # 把笔刷移动到左侧\n    turtle.penup()\n    turtle.fd(-300)\n    turtle.pendown()\n    \n    # 绘制蜿蜒的部分\n    turtle.setheading(-snakeStepAngle)\n    for i in range(snakeStepCount):\n    \tturtle.circle(snakeStepRadius,snakeStepAngle*2)\n    \tturtle.circle(-snakeStepRadius,snakeStepAngle*2)\n    \n    # 让蜿蜒过后的身体朝向右侧水平位置\n    turtle.circle(snakeStepRadius,snakeStepAngle)\n    # 绘制一段水平的sentiment\n    turtle.forward(snakeStepRadius)\n    # 绘制扭头的部分\n    turtle.circle(snakeStepRadius/2, 180)\n    turtle.forward(snakeStepRadius)\n    \n    turtle.done()\n\n    #绘制同切圆（1）\n    import turtle\n    turtle.pensize(5)\n    turtle.pencolor(\"red\")\n    \n    for r in (10,40,80,100):\n        turtle.circle(r)\n        turtle.goto(0,0)\n        turtle.right(90)\n        turtle.fd(r)\n        turtle.left(90)\n        \n\n    #绘制同切圆（2）\n    import turtle\n    turtle.pensize(5)\n    \n    for (r,c) in ((10,\"black\"),(40,\"red\"),(80,\"green\"),(100,\"blue\")):\n        turtle.pencolor(c)\n        turtle.circle(r)\n    \n\n    #绘制同切圆（3）\n    import turtle\n    \n    \n    for (r,c,w) in ((10,\"black\",5),(40,\"red\",3),(80,\"green\",2),(100,\"blue\",4)):\n        turtle.pencolor(c)\n        turtle.pensize(w)\n        turtle.circle(r)\n        \n    \n\n    #同切圆变量赋值\n    import turtle\n    \n    r=100\n    c=\"black\"\n    w=5\n    \n    #(r,c,w) = (10,\"black\",5)\n    #r,c,w = (10,\"black\",5)\n    #r,c,w = 10,\"black\",5\n    \n    turtle.pencolor(c)\n    turtle.pensize(w)\n    turtle.circle(r)\n        \n    \n\n    #同切圆\n    import turtle\n    turtle.pensize(5)\n    \n    turtle.circle(10)\n    turtle.circle(40)\n    turtle.circle(80)\n    turtle.circle(160)\n    \n    \n\n    #绘制同心圆\n    import turtle\n    ##turtle.setup(800,800,0,0)\n    turtle.setup(1.,1.)\n    turtle.screensize(800,800,\"black\")\n    turtle.shape('turtle')\n    turtle.pensize(5)\n    turtle.pencolor('blue')\n    turtle.circle(200)\n    turtle.penup()\n    turtle.goto(0,50)\n    turtle.pendown()\n    turtle.pencolor('red')\n    turtle.circle(150)\n    turtle.penup()\n    turtle.goto(0,100)\n    turtle.pendown()\n    turtle.color('green')\n    turtle.circle(100)\n    \n    \n    turtle.exitonclick()\n    \n    \n\n    #绘制太极阴阳\n    import turtle\n    import time\n    r=50\n    turtle.begin_fill()\n    turtle.circle(r,180)\n    turtle.circle(2*r,180)\n    turtle.circle(r,-180)\n    turtle.end_fill()\n    \n    turtle.seth(0)\n    turtle.color(\"black\",\"green\")\n    turtle.begin_fill()\n    turtle.circle(r,180)\n    turtle.circle(2*r,-180)\n    turtle.circle(r,-180)\n    turtle.end_fill()\n    \n    rEye = 15\n    turtle.color(\"yellow\",\"white\")\n    turtle.begin_fill()\n    turtle.penup()\n    turtle.goto(0,r+rEye)\n    turtle.pendown()\n    turtle.circle(rEye)\n    \n    turtle.penup()\n    turtle.goto(0,-r+rEye)\n    turtle.pendown()\n    turtle.circle(rEye)\n    turtle.end_fill()\n    \n    turtle.hideturtle()\n    time.sleep(3)\n    \n    \n    while  turtle.undobufferentries():\n        turtle.undo()\n    \n\n    #绘制圆内接多边形\n    import turtle\n    r=100\n    turtle.pensize(3)\n    turtle.circle(r,steps=3)\n    turtle.pencolor(\"red\")\n    turtle.circle(r,steps=4)\n    turtle.pencolor(\"green\")\n    turtle.circle(r,steps=5)\n    ##turtle.pencolor(\"blue\")\n    ##turtle.circle(r,steps=6)","slug":"python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98","published":1,"updated":"2019-08-09T09:39:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz4960007vovqr955x0xp","content":"<p>第一章例题</p>\n<pre><code>#计算圆周率\nfrom random import random,seed\n试验点数 = 10000000\nhits = 0.0\nseed(125)\nfor i in range(1, 试验点数+1):\n    x, y = random(), random()\n    dist = pow(x ** 2 + y ** 2, 0.5)\n    if dist &lt;= 1.0:\n        hits = hits + 1\npi = 4 * (hits/试验点数)\nprint(&quot;圆周率值是: {}&quot;.format(pi))\nprint(&apos;与3.1415926相差：{}&apos;.format(3.1415926-pi))</code></pre><a id=\"more\"></a>\n<p>第二章例题</p>\n<pre><code>#货币汇率转换\n# def convert_currency(im, er):\n#     &quot;&quot;&quot;\n#         汇率兑换函数\n#     &quot;&quot;&quot;\n#     out = im * er\n#     return out\n\n\ndef main():\n    &quot;&quot;&quot;\n        主函数\n    &quot;&quot;&quot;\n    # 汇率\n    USD_VS_RMB = 6.77\n\n    # 带单位的货币输入\n    currency_str_value = input(&apos;请输入带单位的货币金额：&apos;)\n\n    unit = currency_str_value[-3:]\n\n    if unit == &apos;CNY&apos;:\n        exchange_rate = 1 / USD_VS_RMB\n\n    elif unit == &apos;USD&apos;:\n        exchange_rate = USD_VS_RMB\n\n    else:\n        exchange_rate = -1\n\n    if exchange_rate != -1:\n        in_money = eval(currency_str_value[:-3])\n        # 使用lambda定义函数\n        convert_currency2 = lambda x: x * exchange_rate\n\n        # # 调用函数\n        # out_money = convert_currency(in_money, exchange_rate)\n\n        # 调用lambda函数\n        out_money = convert_currency2(in_money)\n        print(&apos;转换后的金额：&apos;, out_money)\n    else:\n        print(&apos;不支持该种货币！&apos;)\n\nif __name__ == &apos;__main__&apos;:\n    main()\n\n\n#蟒蛇绘制\nimport turtle\n\nsnakeWidth = 25            # 蛇身体宽度\nsnakeColor = &apos;purple&apos;    # 蛇身体颜色\nsnakeStepAngle = 40        # 蛇蜿蜒的角度\nsnakeStepRadius = 40    # 蛇蜿蜒的半径\nsnakeStepCount = 4        # 蛇蜿蜒的次数\n\n# 设置窗口和笔刷属性\nturtle.setup(650,350)\nturtle.pensize(snakeWidth)\nturtle.pencolor(snakeColor)\n\n# 把笔刷移动到左侧\nturtle.penup()\nturtle.fd(-300)\nturtle.pendown()\n\n# 绘制蜿蜒的部分\nturtle.setheading(-snakeStepAngle)\nfor i in range(snakeStepCount):\n    turtle.circle(snakeStepRadius,snakeStepAngle*2)\n    turtle.circle(-snakeStepRadius,snakeStepAngle*2)\n\n# 让蜿蜒过后的身体朝向右侧水平位置\nturtle.circle(snakeStepRadius,snakeStepAngle)\n# 绘制一段水平的sentiment\nturtle.forward(snakeStepRadius)\n# 绘制扭头的部分\nturtle.circle(snakeStepRadius/2, 180)\nturtle.forward(snakeStepRadius)\n\nturtle.done()\n\n#绘制同切圆（1）\nimport turtle\nturtle.pensize(5)\nturtle.pencolor(&quot;red&quot;)\n\nfor r in (10,40,80,100):\n    turtle.circle(r)\n    turtle.goto(0,0)\n    turtle.right(90)\n    turtle.fd(r)\n    turtle.left(90)\n\n\n#绘制同切圆（2）\nimport turtle\nturtle.pensize(5)\n\nfor (r,c) in ((10,&quot;black&quot;),(40,&quot;red&quot;),(80,&quot;green&quot;),(100,&quot;blue&quot;)):\n    turtle.pencolor(c)\n    turtle.circle(r)\n\n\n#绘制同切圆（3）\nimport turtle\n\n\nfor (r,c,w) in ((10,&quot;black&quot;,5),(40,&quot;red&quot;,3),(80,&quot;green&quot;,2),(100,&quot;blue&quot;,4)):\n    turtle.pencolor(c)\n    turtle.pensize(w)\n    turtle.circle(r)\n\n\n\n#同切圆变量赋值\nimport turtle\n\nr=100\nc=&quot;black&quot;\nw=5\n\n#(r,c,w) = (10,&quot;black&quot;,5)\n#r,c,w = (10,&quot;black&quot;,5)\n#r,c,w = 10,&quot;black&quot;,5\n\nturtle.pencolor(c)\nturtle.pensize(w)\nturtle.circle(r)\n\n\n\n#同切圆\nimport turtle\nturtle.pensize(5)\n\nturtle.circle(10)\nturtle.circle(40)\nturtle.circle(80)\nturtle.circle(160)\n\n\n\n#绘制同心圆\nimport turtle\n##turtle.setup(800,800,0,0)\nturtle.setup(1.,1.)\nturtle.screensize(800,800,&quot;black&quot;)\nturtle.shape(&apos;turtle&apos;)\nturtle.pensize(5)\nturtle.pencolor(&apos;blue&apos;)\nturtle.circle(200)\nturtle.penup()\nturtle.goto(0,50)\nturtle.pendown()\nturtle.pencolor(&apos;red&apos;)\nturtle.circle(150)\nturtle.penup()\nturtle.goto(0,100)\nturtle.pendown()\nturtle.color(&apos;green&apos;)\nturtle.circle(100)\n\n\nturtle.exitonclick()\n\n\n\n#绘制太极阴阳\nimport turtle\nimport time\nr=50\nturtle.begin_fill()\nturtle.circle(r,180)\nturtle.circle(2*r,180)\nturtle.circle(r,-180)\nturtle.end_fill()\n\nturtle.seth(0)\nturtle.color(&quot;black&quot;,&quot;green&quot;)\nturtle.begin_fill()\nturtle.circle(r,180)\nturtle.circle(2*r,-180)\nturtle.circle(r,-180)\nturtle.end_fill()\n\nrEye = 15\nturtle.color(&quot;yellow&quot;,&quot;white&quot;)\nturtle.begin_fill()\nturtle.penup()\nturtle.goto(0,r+rEye)\nturtle.pendown()\nturtle.circle(rEye)\n\nturtle.penup()\nturtle.goto(0,-r+rEye)\nturtle.pendown()\nturtle.circle(rEye)\nturtle.end_fill()\n\nturtle.hideturtle()\ntime.sleep(3)\n\n\nwhile  turtle.undobufferentries():\n    turtle.undo()\n\n\n#绘制圆内接多边形\nimport turtle\nr=100\nturtle.pensize(3)\nturtle.circle(r,steps=3)\nturtle.pencolor(&quot;red&quot;)\nturtle.circle(r,steps=4)\nturtle.pencolor(&quot;green&quot;)\nturtle.circle(r,steps=5)\n##turtle.pencolor(&quot;blue&quot;)\n##turtle.circle(r,steps=6)</code></pre>","site":{"data":{}},"excerpt":"<p>第一章例题</p>\n<pre><code>#计算圆周率\nfrom random import random,seed\n试验点数 = 10000000\nhits = 0.0\nseed(125)\nfor i in range(1, 试验点数+1):\n    x, y = random(), random()\n    dist = pow(x ** 2 + y ** 2, 0.5)\n    if dist &lt;= 1.0:\n        hits = hits + 1\npi = 4 * (hits/试验点数)\nprint(&quot;圆周率值是: {}&quot;.format(pi))\nprint(&apos;与3.1415926相差：{}&apos;.format(3.1415926-pi))</code></pre>","more":"<p>第二章例题</p>\n<pre><code>#货币汇率转换\n# def convert_currency(im, er):\n#     &quot;&quot;&quot;\n#         汇率兑换函数\n#     &quot;&quot;&quot;\n#     out = im * er\n#     return out\n\n\ndef main():\n    &quot;&quot;&quot;\n        主函数\n    &quot;&quot;&quot;\n    # 汇率\n    USD_VS_RMB = 6.77\n\n    # 带单位的货币输入\n    currency_str_value = input(&apos;请输入带单位的货币金额：&apos;)\n\n    unit = currency_str_value[-3:]\n\n    if unit == &apos;CNY&apos;:\n        exchange_rate = 1 / USD_VS_RMB\n\n    elif unit == &apos;USD&apos;:\n        exchange_rate = USD_VS_RMB\n\n    else:\n        exchange_rate = -1\n\n    if exchange_rate != -1:\n        in_money = eval(currency_str_value[:-3])\n        # 使用lambda定义函数\n        convert_currency2 = lambda x: x * exchange_rate\n\n        # # 调用函数\n        # out_money = convert_currency(in_money, exchange_rate)\n\n        # 调用lambda函数\n        out_money = convert_currency2(in_money)\n        print(&apos;转换后的金额：&apos;, out_money)\n    else:\n        print(&apos;不支持该种货币！&apos;)\n\nif __name__ == &apos;__main__&apos;:\n    main()\n\n\n#蟒蛇绘制\nimport turtle\n\nsnakeWidth = 25            # 蛇身体宽度\nsnakeColor = &apos;purple&apos;    # 蛇身体颜色\nsnakeStepAngle = 40        # 蛇蜿蜒的角度\nsnakeStepRadius = 40    # 蛇蜿蜒的半径\nsnakeStepCount = 4        # 蛇蜿蜒的次数\n\n# 设置窗口和笔刷属性\nturtle.setup(650,350)\nturtle.pensize(snakeWidth)\nturtle.pencolor(snakeColor)\n\n# 把笔刷移动到左侧\nturtle.penup()\nturtle.fd(-300)\nturtle.pendown()\n\n# 绘制蜿蜒的部分\nturtle.setheading(-snakeStepAngle)\nfor i in range(snakeStepCount):\n    turtle.circle(snakeStepRadius,snakeStepAngle*2)\n    turtle.circle(-snakeStepRadius,snakeStepAngle*2)\n\n# 让蜿蜒过后的身体朝向右侧水平位置\nturtle.circle(snakeStepRadius,snakeStepAngle)\n# 绘制一段水平的sentiment\nturtle.forward(snakeStepRadius)\n# 绘制扭头的部分\nturtle.circle(snakeStepRadius/2, 180)\nturtle.forward(snakeStepRadius)\n\nturtle.done()\n\n#绘制同切圆（1）\nimport turtle\nturtle.pensize(5)\nturtle.pencolor(&quot;red&quot;)\n\nfor r in (10,40,80,100):\n    turtle.circle(r)\n    turtle.goto(0,0)\n    turtle.right(90)\n    turtle.fd(r)\n    turtle.left(90)\n\n\n#绘制同切圆（2）\nimport turtle\nturtle.pensize(5)\n\nfor (r,c) in ((10,&quot;black&quot;),(40,&quot;red&quot;),(80,&quot;green&quot;),(100,&quot;blue&quot;)):\n    turtle.pencolor(c)\n    turtle.circle(r)\n\n\n#绘制同切圆（3）\nimport turtle\n\n\nfor (r,c,w) in ((10,&quot;black&quot;,5),(40,&quot;red&quot;,3),(80,&quot;green&quot;,2),(100,&quot;blue&quot;,4)):\n    turtle.pencolor(c)\n    turtle.pensize(w)\n    turtle.circle(r)\n\n\n\n#同切圆变量赋值\nimport turtle\n\nr=100\nc=&quot;black&quot;\nw=5\n\n#(r,c,w) = (10,&quot;black&quot;,5)\n#r,c,w = (10,&quot;black&quot;,5)\n#r,c,w = 10,&quot;black&quot;,5\n\nturtle.pencolor(c)\nturtle.pensize(w)\nturtle.circle(r)\n\n\n\n#同切圆\nimport turtle\nturtle.pensize(5)\n\nturtle.circle(10)\nturtle.circle(40)\nturtle.circle(80)\nturtle.circle(160)\n\n\n\n#绘制同心圆\nimport turtle\n##turtle.setup(800,800,0,0)\nturtle.setup(1.,1.)\nturtle.screensize(800,800,&quot;black&quot;)\nturtle.shape(&apos;turtle&apos;)\nturtle.pensize(5)\nturtle.pencolor(&apos;blue&apos;)\nturtle.circle(200)\nturtle.penup()\nturtle.goto(0,50)\nturtle.pendown()\nturtle.pencolor(&apos;red&apos;)\nturtle.circle(150)\nturtle.penup()\nturtle.goto(0,100)\nturtle.pendown()\nturtle.color(&apos;green&apos;)\nturtle.circle(100)\n\n\nturtle.exitonclick()\n\n\n\n#绘制太极阴阳\nimport turtle\nimport time\nr=50\nturtle.begin_fill()\nturtle.circle(r,180)\nturtle.circle(2*r,180)\nturtle.circle(r,-180)\nturtle.end_fill()\n\nturtle.seth(0)\nturtle.color(&quot;black&quot;,&quot;green&quot;)\nturtle.begin_fill()\nturtle.circle(r,180)\nturtle.circle(2*r,-180)\nturtle.circle(r,-180)\nturtle.end_fill()\n\nrEye = 15\nturtle.color(&quot;yellow&quot;,&quot;white&quot;)\nturtle.begin_fill()\nturtle.penup()\nturtle.goto(0,r+rEye)\nturtle.pendown()\nturtle.circle(rEye)\n\nturtle.penup()\nturtle.goto(0,-r+rEye)\nturtle.pendown()\nturtle.circle(rEye)\nturtle.end_fill()\n\nturtle.hideturtle()\ntime.sleep(3)\n\n\nwhile  turtle.undobufferentries():\n    turtle.undo()\n\n\n#绘制圆内接多边形\nimport turtle\nr=100\nturtle.pensize(3)\nturtle.circle(r,steps=3)\nturtle.pencolor(&quot;red&quot;)\nturtle.circle(r,steps=4)\nturtle.pencolor(&quot;green&quot;)\nturtle.circle(r,steps=5)\n##turtle.pencolor(&quot;blue&quot;)\n##turtle.circle(r,steps=6)</code></pre>"},{"title":"Python程序设计例题（第四章）","url":"32.html","id":"32","date":"2019-05-31T04:53:45.000Z","_content":"一、猜数字\n\n    right = 75#待猜数字\n    not_found = True\n    \n    while not_found:\n        guess=int(input(\"请猜数：\"))\n        if guess==75:\n            print(\"恭喜你猜对了！\")\n            not_found = False\n        elif guess>75:\n            print(\"猜大了\")\n        else:\n            print(\"猜小了\")\n<!--more-->\n二、求水仙花数（第二版）\n\n    for i in range(100,1000):\n        si=str(i)\n        n100 = int(si[0])\n        n10 = int(si[1])\n        n1 = int(si[2])\n        if n100**3+n10**3+n1**3 == i :\n            print(i)\n\n三、判断回文\n\n    n=input(\"input a number:\")\n    \n    ##if n==n[::-1]:\n    ##    print(\"yes\")\n    ##else:\n    ##    print(\"no\")\n    \n    print(\"yes\" if n==n[::-1] else \"no\" )\n\n四、生成回文\n\n    s=input(\"input :\")\n    print(s+s[-2::-1])\n\n五、凯撒密码\n\n    #加密\n    plaincode = input(\"请输入明文: \")\n    for p in plaincode:\n        if ord(\"a\") <= ord(p) <= ord(\"z\"):\n            print(chr(ord(\"a\") + (ord(p) - ord(\"a\") + 3)%26),end='')\n        else:\n            print(p, end='')\n    \n    \n    #解密\n    plaincode = input(\"请输入明文: \")\n    for p in plaincode:\n        if ord(\"a\") <= ord(p) <= ord(\"z\"):\n            print(chr(ord(\"a\") + (ord(p) - ord(\"a\") - 3)%26),end='')\n        else:\n            print(p, end='')","source":"_posts/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e5-9b-9b-e7-ab-a0-ef-bc-89.md","raw":"title: Python程序设计例题（第四章）\nurl: 32.html\nid: 32\ncategories:\n  - Python初学\ndate: 2019-05-31 12:53:45\ntags:\n---\n一、猜数字\n\n    right = 75#待猜数字\n    not_found = True\n    \n    while not_found:\n        guess=int(input(\"请猜数：\"))\n        if guess==75:\n            print(\"恭喜你猜对了！\")\n            not_found = False\n        elif guess>75:\n            print(\"猜大了\")\n        else:\n            print(\"猜小了\")\n<!--more-->\n二、求水仙花数（第二版）\n\n    for i in range(100,1000):\n        si=str(i)\n        n100 = int(si[0])\n        n10 = int(si[1])\n        n1 = int(si[2])\n        if n100**3+n10**3+n1**3 == i :\n            print(i)\n\n三、判断回文\n\n    n=input(\"input a number:\")\n    \n    ##if n==n[::-1]:\n    ##    print(\"yes\")\n    ##else:\n    ##    print(\"no\")\n    \n    print(\"yes\" if n==n[::-1] else \"no\" )\n\n四、生成回文\n\n    s=input(\"input :\")\n    print(s+s[-2::-1])\n\n五、凯撒密码\n\n    #加密\n    plaincode = input(\"请输入明文: \")\n    for p in plaincode:\n        if ord(\"a\") <= ord(p) <= ord(\"z\"):\n            print(chr(ord(\"a\") + (ord(p) - ord(\"a\") + 3)%26),end='')\n        else:\n            print(p, end='')\n    \n    \n    #解密\n    plaincode = input(\"请输入明文: \")\n    for p in plaincode:\n        if ord(\"a\") <= ord(p) <= ord(\"z\"):\n            print(chr(ord(\"a\") + (ord(p) - ord(\"a\") - 3)%26),end='')\n        else:\n            print(p, end='')","slug":"python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e5-9b-9b-e7-ab-a0-ef-bc-89","published":1,"updated":"2019-08-09T09:39:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz4970008vovqztxw3vto","content":"<p>一、猜数字</p>\n<pre><code>right = 75#待猜数字\nnot_found = True\n\nwhile not_found:\n    guess=int(input(&quot;请猜数：&quot;))\n    if guess==75:\n        print(&quot;恭喜你猜对了！&quot;)\n        not_found = False\n    elif guess&gt;75:\n        print(&quot;猜大了&quot;)\n    else:\n        print(&quot;猜小了&quot;)</code></pre><a id=\"more\"></a>\n<p>二、求水仙花数（第二版）</p>\n<pre><code>for i in range(100,1000):\n    si=str(i)\n    n100 = int(si[0])\n    n10 = int(si[1])\n    n1 = int(si[2])\n    if n100**3+n10**3+n1**3 == i :\n        print(i)</code></pre><p>三、判断回文</p>\n<pre><code>n=input(&quot;input a number:&quot;)\n\n##if n==n[::-1]:\n##    print(&quot;yes&quot;)\n##else:\n##    print(&quot;no&quot;)\n\nprint(&quot;yes&quot; if n==n[::-1] else &quot;no&quot; )</code></pre><p>四、生成回文</p>\n<pre><code>s=input(&quot;input :&quot;)\nprint(s+s[-2::-1])</code></pre><p>五、凯撒密码</p>\n<pre><code>#加密\nplaincode = input(&quot;请输入明文: &quot;)\nfor p in plaincode:\n    if ord(&quot;a&quot;) &lt;= ord(p) &lt;= ord(&quot;z&quot;):\n        print(chr(ord(&quot;a&quot;) + (ord(p) - ord(&quot;a&quot;) + 3)%26),end=&apos;&apos;)\n    else:\n        print(p, end=&apos;&apos;)\n\n\n#解密\nplaincode = input(&quot;请输入明文: &quot;)\nfor p in plaincode:\n    if ord(&quot;a&quot;) &lt;= ord(p) &lt;= ord(&quot;z&quot;):\n        print(chr(ord(&quot;a&quot;) + (ord(p) - ord(&quot;a&quot;) - 3)%26),end=&apos;&apos;)\n    else:\n        print(p, end=&apos;&apos;)</code></pre>","site":{"data":{}},"excerpt":"<p>一、猜数字</p>\n<pre><code>right = 75#待猜数字\nnot_found = True\n\nwhile not_found:\n    guess=int(input(&quot;请猜数：&quot;))\n    if guess==75:\n        print(&quot;恭喜你猜对了！&quot;)\n        not_found = False\n    elif guess&gt;75:\n        print(&quot;猜大了&quot;)\n    else:\n        print(&quot;猜小了&quot;)</code></pre>","more":"<p>二、求水仙花数（第二版）</p>\n<pre><code>for i in range(100,1000):\n    si=str(i)\n    n100 = int(si[0])\n    n10 = int(si[1])\n    n1 = int(si[2])\n    if n100**3+n10**3+n1**3 == i :\n        print(i)</code></pre><p>三、判断回文</p>\n<pre><code>n=input(&quot;input a number:&quot;)\n\n##if n==n[::-1]:\n##    print(&quot;yes&quot;)\n##else:\n##    print(&quot;no&quot;)\n\nprint(&quot;yes&quot; if n==n[::-1] else &quot;no&quot; )</code></pre><p>四、生成回文</p>\n<pre><code>s=input(&quot;input :&quot;)\nprint(s+s[-2::-1])</code></pre><p>五、凯撒密码</p>\n<pre><code>#加密\nplaincode = input(&quot;请输入明文: &quot;)\nfor p in plaincode:\n    if ord(&quot;a&quot;) &lt;= ord(p) &lt;= ord(&quot;z&quot;):\n        print(chr(ord(&quot;a&quot;) + (ord(p) - ord(&quot;a&quot;) + 3)%26),end=&apos;&apos;)\n    else:\n        print(p, end=&apos;&apos;)\n\n\n#解密\nplaincode = input(&quot;请输入明文: &quot;)\nfor p in plaincode:\n    if ord(&quot;a&quot;) &lt;= ord(p) &lt;= ord(&quot;z&quot;):\n        print(chr(ord(&quot;a&quot;) + (ord(p) - ord(&quot;a&quot;) - 3)%26),end=&apos;&apos;)\n    else:\n        print(p, end=&apos;&apos;)</code></pre>"},{"title":"Python程序设计例题（第三章）","url":"29.html","id":"29","date":"2019-05-31T04:49:33.000Z","_content":"1、给一个数，求其绝对值\n\n    \n    x=-123\n    #xAbs=x if x>=0 else -x\n    \n    ##if x>=0:\n    ##    xAbs=-x\n    ##else:\n    ##    xAbs=x\n    \n    xAbs=x\n    if x<0:\n        xAbs=-x\n    \n    print(xAbs)\n    \n<!--more-->\n2、判断一个数的奇偶\n\n    # 判别奇偶数\n    x=1001\n    \n    if x % 2:\n        print(x,\"是奇数\")\n    else:\n        print(x,\"是偶数\")\n    \n    #print(x,\"是奇数\") if x % 2 else print(x,\"是偶数\")\n\n3、判别某年是否闰年\n\n    \"\"\"\n    判断year是否为闰年\n    \"\"\"\n    year =2001\n    \n    ##leap=False\n    ##if year % 400 ==0 or year % 4==0 and year % 100!=0 :\n    ##    leap=True\n    leap=year % 400 ==0 or year % 4==0 and year % 100!=0\n    \n    if leap: print(year,\"年是闰年\")\n    else:    print(year,\"年不是闰年\")\n\n4、将分数成绩转为等级成绩\n\n    \n    score=44\n    \n    if score <60:\n        grade = \"不及格\"\n    elif score <70:\n        grade = \"及格\"\n    elif score <80:\n        grade = \"中\"\n    elif score <90:\n        grade = \"良\"\n    else:\n        grade = \"优\"\n    \n    print(grade)\n    \n\n5、求“水仙花”数\n\n    '''\n    求水仙花数\n    \n    '''\n    for i in range(100,1000):\n        n100 = i//100\n        n1 = i%10\n        n10 = i%100//10\n        if n100**3+n10**3+n1**3 == i :\n            print(i)\n    \n\n6、猜数字\n\n    right = 75#待猜数字\n    not_found = True\n    \n    while not_found:\n        guess=int(input(\"请猜数：\"))\n        if guess==75:\n            print(\"恭喜你猜对了！\")\n            not_found = False\n        elif guess>75:\n            print(\"猜大了\")\n        else:\n            print(\"猜小了\")","source":"_posts/python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e4-b8-89-e7-ab-a0-ef-bc-89.md","raw":"title: Python程序设计例题（第三章）\nurl: 29.html\nid: 29\ncategories:\n  - Python初学\ndate: 2019-05-31 12:49:33\ntags:\n---\n1、给一个数，求其绝对值\n\n    \n    x=-123\n    #xAbs=x if x>=0 else -x\n    \n    ##if x>=0:\n    ##    xAbs=-x\n    ##else:\n    ##    xAbs=x\n    \n    xAbs=x\n    if x<0:\n        xAbs=-x\n    \n    print(xAbs)\n    \n<!--more-->\n2、判断一个数的奇偶\n\n    # 判别奇偶数\n    x=1001\n    \n    if x % 2:\n        print(x,\"是奇数\")\n    else:\n        print(x,\"是偶数\")\n    \n    #print(x,\"是奇数\") if x % 2 else print(x,\"是偶数\")\n\n3、判别某年是否闰年\n\n    \"\"\"\n    判断year是否为闰年\n    \"\"\"\n    year =2001\n    \n    ##leap=False\n    ##if year % 400 ==0 or year % 4==0 and year % 100!=0 :\n    ##    leap=True\n    leap=year % 400 ==0 or year % 4==0 and year % 100!=0\n    \n    if leap: print(year,\"年是闰年\")\n    else:    print(year,\"年不是闰年\")\n\n4、将分数成绩转为等级成绩\n\n    \n    score=44\n    \n    if score <60:\n        grade = \"不及格\"\n    elif score <70:\n        grade = \"及格\"\n    elif score <80:\n        grade = \"中\"\n    elif score <90:\n        grade = \"良\"\n    else:\n        grade = \"优\"\n    \n    print(grade)\n    \n\n5、求“水仙花”数\n\n    '''\n    求水仙花数\n    \n    '''\n    for i in range(100,1000):\n        n100 = i//100\n        n1 = i%10\n        n10 = i%100//10\n        if n100**3+n10**3+n1**3 == i :\n            print(i)\n    \n\n6、猜数字\n\n    right = 75#待猜数字\n    not_found = True\n    \n    while not_found:\n        guess=int(input(\"请猜数：\"))\n        if guess==75:\n            print(\"恭喜你猜对了！\")\n            not_found = False\n        elif guess>75:\n            print(\"猜大了\")\n        else:\n            print(\"猜小了\")","slug":"python-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e4-be-8b-e9-a2-98-ef-bc-88-e7-ac-ac-e4-b8-89-e7-ab-a0-ef-bc-89","published":1,"updated":"2019-08-09T09:39:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz4980009vovq5mu22zu2","content":"<p>1、给一个数，求其绝对值</p>\n<pre><code>x=-123\n#xAbs=x if x&gt;=0 else -x\n\n##if x&gt;=0:\n##    xAbs=-x\n##else:\n##    xAbs=x\n\nxAbs=x\nif x&lt;0:\n    xAbs=-x\n\nprint(xAbs)</code></pre><a id=\"more\"></a>\n<p>2、判断一个数的奇偶</p>\n<pre><code># 判别奇偶数\nx=1001\n\nif x % 2:\n    print(x,&quot;是奇数&quot;)\nelse:\n    print(x,&quot;是偶数&quot;)\n\n#print(x,&quot;是奇数&quot;) if x % 2 else print(x,&quot;是偶数&quot;)</code></pre><p>3、判别某年是否闰年</p>\n<pre><code>&quot;&quot;&quot;\n判断year是否为闰年\n&quot;&quot;&quot;\nyear =2001\n\n##leap=False\n##if year % 400 ==0 or year % 4==0 and year % 100!=0 :\n##    leap=True\nleap=year % 400 ==0 or year % 4==0 and year % 100!=0\n\nif leap: print(year,&quot;年是闰年&quot;)\nelse:    print(year,&quot;年不是闰年&quot;)</code></pre><p>4、将分数成绩转为等级成绩</p>\n<pre><code>score=44\n\nif score &lt;60:\n    grade = &quot;不及格&quot;\nelif score &lt;70:\n    grade = &quot;及格&quot;\nelif score &lt;80:\n    grade = &quot;中&quot;\nelif score &lt;90:\n    grade = &quot;良&quot;\nelse:\n    grade = &quot;优&quot;\n\nprint(grade)</code></pre><p>5、求“水仙花”数</p>\n<pre><code>&apos;&apos;&apos;\n求水仙花数\n\n&apos;&apos;&apos;\nfor i in range(100,1000):\n    n100 = i//100\n    n1 = i%10\n    n10 = i%100//10\n    if n100**3+n10**3+n1**3 == i :\n        print(i)</code></pre><p>6、猜数字</p>\n<pre><code>right = 75#待猜数字\nnot_found = True\n\nwhile not_found:\n    guess=int(input(&quot;请猜数：&quot;))\n    if guess==75:\n        print(&quot;恭喜你猜对了！&quot;)\n        not_found = False\n    elif guess&gt;75:\n        print(&quot;猜大了&quot;)\n    else:\n        print(&quot;猜小了&quot;)</code></pre>","site":{"data":{}},"excerpt":"<p>1、给一个数，求其绝对值</p>\n<pre><code>x=-123\n#xAbs=x if x&gt;=0 else -x\n\n##if x&gt;=0:\n##    xAbs=-x\n##else:\n##    xAbs=x\n\nxAbs=x\nif x&lt;0:\n    xAbs=-x\n\nprint(xAbs)</code></pre>","more":"<p>2、判断一个数的奇偶</p>\n<pre><code># 判别奇偶数\nx=1001\n\nif x % 2:\n    print(x,&quot;是奇数&quot;)\nelse:\n    print(x,&quot;是偶数&quot;)\n\n#print(x,&quot;是奇数&quot;) if x % 2 else print(x,&quot;是偶数&quot;)</code></pre><p>3、判别某年是否闰年</p>\n<pre><code>&quot;&quot;&quot;\n判断year是否为闰年\n&quot;&quot;&quot;\nyear =2001\n\n##leap=False\n##if year % 400 ==0 or year % 4==0 and year % 100!=0 :\n##    leap=True\nleap=year % 400 ==0 or year % 4==0 and year % 100!=0\n\nif leap: print(year,&quot;年是闰年&quot;)\nelse:    print(year,&quot;年不是闰年&quot;)</code></pre><p>4、将分数成绩转为等级成绩</p>\n<pre><code>score=44\n\nif score &lt;60:\n    grade = &quot;不及格&quot;\nelif score &lt;70:\n    grade = &quot;及格&quot;\nelif score &lt;80:\n    grade = &quot;中&quot;\nelif score &lt;90:\n    grade = &quot;良&quot;\nelse:\n    grade = &quot;优&quot;\n\nprint(grade)</code></pre><p>5、求“水仙花”数</p>\n<pre><code>&apos;&apos;&apos;\n求水仙花数\n\n&apos;&apos;&apos;\nfor i in range(100,1000):\n    n100 = i//100\n    n1 = i%10\n    n10 = i%100//10\n    if n100**3+n10**3+n1**3 == i :\n        print(i)</code></pre><p>6、猜数字</p>\n<pre><code>right = 75#待猜数字\nnot_found = True\n\nwhile not_found:\n    guess=int(input(&quot;请猜数：&quot;))\n    if guess==75:\n        print(&quot;恭喜你猜对了！&quot;)\n        not_found = False\n    elif guess&gt;75:\n        print(&quot;猜大了&quot;)\n    else:\n        print(&quot;猜小了&quot;)</code></pre>"},{"title":"Python 语言程序设计基础第二章习题参考答案","url":"17.html","id":"17","date":"2019-05-26T03:12:42.000Z","_content":"#书本P55页习题\n<!--more-->\n    import turtle\n    import time\n    #绘制直线\n    turtle.fd(100)\n    time.sleep(5)\n    #清除屏幕并回到初始点\n    turtle.clear()\n    turtle.penup()\n    turtle.setx(0)\n    turtle.sety(0)\n    turtle.pd()\n    #让海龟飞起来！\n    turtle.speed(30)\n    #移动半径大小位置，并作圆\n    inital_position = -20\n    radium = 20\n    for i in range(9):\n        turtle.penup()\n        turtle.sety(inital_position)\n        inital_position = inital_position - 20\n        turtle.pd()\n        turtle.circle(radium)\n        radium =radium + 20\n    turtle.penup()\n    turtle.setx(0)\n    turtle.sety(0)\n    turtle.pd()\n\n    #书本P56页习题2.3\n    import turtle as t\n    t.setup(650,350,200,200)\n    t.penup()\n    t.setx(-250)\n    t.pendown()\n    t.pensize(25)\n    t.seth(-40)\n    color=[\"blue\",\"red\",\"yellow\",\"green\"]\n    r=0\n    for i in range(4):\n        t.circle(40,80)\n        t.circle(-40,80)\n        t.pencolor(color[r])\n        r = r + 1\n    \n    t.circle(40,80/2)\n    t.fd(40)\n    t.circle(16,180)\n    t.fd(40*2/3)\n\n    #书本P56页习题2.4+2.5\n    from turtle import *\n    import math\n    penup()\n    sety(100/3**(1/3))\n    a=180+60\n    pd()\n    for i in range(3):\n        seth(a)\n        a=a+120\n        fd(100)\n    seth(a)\n    fd(50)\n    a = 0\n    for i in range(3):\n        seth(a)\n        a=a-120\n        fd(50)\n\n    #书本P56页习题2.6\n    from turtle import *\n    import math\n    penup()\n    sety(100)\n    setx(-100)\n    a = -90\n    for i in range(4):\n        seth(a)\n        fd(30)\n        pd()\n        fd(140)\n        pu()\n        fd(30)\n        a = a +90\n\n    #书本P56页习题2.7\n    from turtle import *\n    speed(1)\n    for i in (270,210,150,90,30,-30):\n        seth(i)\n        fd(60)\n        seth(i-120)\n        fd(60)\n        seth(i-240)\n        fd(120)\n\n    #书本P56页习题2.8\n    from turtle import *\n    speed(20)\n    a = 1\n    b = 0\n    for i in range(1000):\n        seth(b)\n        fd(a)\n        a = a+1\n        b = b +90\n    \n    \n\n[第二章作业](http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip)[下载](http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip)","source":"_posts/python-e8-af-ad-e8-a8-80-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e5-9f-ba-e7-a1-80-e7-ac-ac-e4-ba-8c-e7-ab-a0-e4-b9-a0-e9-a2-98-e5-8f-82-e8-80-83-e7-ad-94-e6-a1-88.md","raw":"title: Python 语言程序设计基础第二章习题参考答案\nurl: 17.html\nid: 17\ncategories:\n  - Python初学\ndate: 2019-05-26 11:12:42\ntags:\n---\n#书本P55页习题\n<!--more-->\n    import turtle\n    import time\n    #绘制直线\n    turtle.fd(100)\n    time.sleep(5)\n    #清除屏幕并回到初始点\n    turtle.clear()\n    turtle.penup()\n    turtle.setx(0)\n    turtle.sety(0)\n    turtle.pd()\n    #让海龟飞起来！\n    turtle.speed(30)\n    #移动半径大小位置，并作圆\n    inital_position = -20\n    radium = 20\n    for i in range(9):\n        turtle.penup()\n        turtle.sety(inital_position)\n        inital_position = inital_position - 20\n        turtle.pd()\n        turtle.circle(radium)\n        radium =radium + 20\n    turtle.penup()\n    turtle.setx(0)\n    turtle.sety(0)\n    turtle.pd()\n\n    #书本P56页习题2.3\n    import turtle as t\n    t.setup(650,350,200,200)\n    t.penup()\n    t.setx(-250)\n    t.pendown()\n    t.pensize(25)\n    t.seth(-40)\n    color=[\"blue\",\"red\",\"yellow\",\"green\"]\n    r=0\n    for i in range(4):\n        t.circle(40,80)\n        t.circle(-40,80)\n        t.pencolor(color[r])\n        r = r + 1\n    \n    t.circle(40,80/2)\n    t.fd(40)\n    t.circle(16,180)\n    t.fd(40*2/3)\n\n    #书本P56页习题2.4+2.5\n    from turtle import *\n    import math\n    penup()\n    sety(100/3**(1/3))\n    a=180+60\n    pd()\n    for i in range(3):\n        seth(a)\n        a=a+120\n        fd(100)\n    seth(a)\n    fd(50)\n    a = 0\n    for i in range(3):\n        seth(a)\n        a=a-120\n        fd(50)\n\n    #书本P56页习题2.6\n    from turtle import *\n    import math\n    penup()\n    sety(100)\n    setx(-100)\n    a = -90\n    for i in range(4):\n        seth(a)\n        fd(30)\n        pd()\n        fd(140)\n        pu()\n        fd(30)\n        a = a +90\n\n    #书本P56页习题2.7\n    from turtle import *\n    speed(1)\n    for i in (270,210,150,90,30,-30):\n        seth(i)\n        fd(60)\n        seth(i-120)\n        fd(60)\n        seth(i-240)\n        fd(120)\n\n    #书本P56页习题2.8\n    from turtle import *\n    speed(20)\n    a = 1\n    b = 0\n    for i in range(1000):\n        seth(b)\n        fd(a)\n        a = a+1\n        b = b +90\n    \n    \n\n[第二章作业](http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip)[下载](http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip)","slug":"python-e8-af-ad-e8-a8-80-e7-a8-8b-e5-ba-8f-e8-ae-be-e8-ae-a1-e5-9f-ba-e7-a1-80-e7-ac-ac-e4-ba-8c-e7-ab-a0-e4-b9-a0-e9-a2-98-e5-8f-82-e8-80-83-e7-ad-94-e6-a1-88","published":1,"updated":"2019-08-09T09:40:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz499000bvovqt2bjbs9o","content":"<p>#书本P55页习题</p>\n<a id=\"more\"></a>\n<pre><code>import turtle\nimport time\n#绘制直线\nturtle.fd(100)\ntime.sleep(5)\n#清除屏幕并回到初始点\nturtle.clear()\nturtle.penup()\nturtle.setx(0)\nturtle.sety(0)\nturtle.pd()\n#让海龟飞起来！\nturtle.speed(30)\n#移动半径大小位置，并作圆\ninital_position = -20\nradium = 20\nfor i in range(9):\n    turtle.penup()\n    turtle.sety(inital_position)\n    inital_position = inital_position - 20\n    turtle.pd()\n    turtle.circle(radium)\n    radium =radium + 20\nturtle.penup()\nturtle.setx(0)\nturtle.sety(0)\nturtle.pd()\n\n#书本P56页习题2.3\nimport turtle as t\nt.setup(650,350,200,200)\nt.penup()\nt.setx(-250)\nt.pendown()\nt.pensize(25)\nt.seth(-40)\ncolor=[&quot;blue&quot;,&quot;red&quot;,&quot;yellow&quot;,&quot;green&quot;]\nr=0\nfor i in range(4):\n    t.circle(40,80)\n    t.circle(-40,80)\n    t.pencolor(color[r])\n    r = r + 1\n\nt.circle(40,80/2)\nt.fd(40)\nt.circle(16,180)\nt.fd(40*2/3)\n\n#书本P56页习题2.4+2.5\nfrom turtle import *\nimport math\npenup()\nsety(100/3**(1/3))\na=180+60\npd()\nfor i in range(3):\n    seth(a)\n    a=a+120\n    fd(100)\nseth(a)\nfd(50)\na = 0\nfor i in range(3):\n    seth(a)\n    a=a-120\n    fd(50)\n\n#书本P56页习题2.6\nfrom turtle import *\nimport math\npenup()\nsety(100)\nsetx(-100)\na = -90\nfor i in range(4):\n    seth(a)\n    fd(30)\n    pd()\n    fd(140)\n    pu()\n    fd(30)\n    a = a +90\n\n#书本P56页习题2.7\nfrom turtle import *\nspeed(1)\nfor i in (270,210,150,90,30,-30):\n    seth(i)\n    fd(60)\n    seth(i-120)\n    fd(60)\n    seth(i-240)\n    fd(120)\n\n#书本P56页习题2.8\nfrom turtle import *\nspeed(20)\na = 1\nb = 0\nfor i in range(1000):\n    seth(b)\n    fd(a)\n    a = a+1\n    b = b +90</code></pre><p><a href=\"http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip\" target=\"_blank\" rel=\"noopener\">第二章作业</a><a href=\"http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n","site":{"data":{}},"excerpt":"<p>#书本P55页习题</p>","more":"<pre><code>import turtle\nimport time\n#绘制直线\nturtle.fd(100)\ntime.sleep(5)\n#清除屏幕并回到初始点\nturtle.clear()\nturtle.penup()\nturtle.setx(0)\nturtle.sety(0)\nturtle.pd()\n#让海龟飞起来！\nturtle.speed(30)\n#移动半径大小位置，并作圆\ninital_position = -20\nradium = 20\nfor i in range(9):\n    turtle.penup()\n    turtle.sety(inital_position)\n    inital_position = inital_position - 20\n    turtle.pd()\n    turtle.circle(radium)\n    radium =radium + 20\nturtle.penup()\nturtle.setx(0)\nturtle.sety(0)\nturtle.pd()\n\n#书本P56页习题2.3\nimport turtle as t\nt.setup(650,350,200,200)\nt.penup()\nt.setx(-250)\nt.pendown()\nt.pensize(25)\nt.seth(-40)\ncolor=[&quot;blue&quot;,&quot;red&quot;,&quot;yellow&quot;,&quot;green&quot;]\nr=0\nfor i in range(4):\n    t.circle(40,80)\n    t.circle(-40,80)\n    t.pencolor(color[r])\n    r = r + 1\n\nt.circle(40,80/2)\nt.fd(40)\nt.circle(16,180)\nt.fd(40*2/3)\n\n#书本P56页习题2.4+2.5\nfrom turtle import *\nimport math\npenup()\nsety(100/3**(1/3))\na=180+60\npd()\nfor i in range(3):\n    seth(a)\n    a=a+120\n    fd(100)\nseth(a)\nfd(50)\na = 0\nfor i in range(3):\n    seth(a)\n    a=a-120\n    fd(50)\n\n#书本P56页习题2.6\nfrom turtle import *\nimport math\npenup()\nsety(100)\nsetx(-100)\na = -90\nfor i in range(4):\n    seth(a)\n    fd(30)\n    pd()\n    fd(140)\n    pu()\n    fd(30)\n    a = a +90\n\n#书本P56页习题2.7\nfrom turtle import *\nspeed(1)\nfor i in (270,210,150,90,30,-30):\n    seth(i)\n    fd(60)\n    seth(i-120)\n    fd(60)\n    seth(i-240)\n    fd(120)\n\n#书本P56页习题2.8\nfrom turtle import *\nspeed(20)\na = 1\nb = 0\nfor i in range(1000):\n    seth(b)\n    fd(a)\n    a = a+1\n    b = b +90</code></pre><p><a href=\"http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip\" target=\"_blank\" rel=\"noopener\">第二章作业</a><a href=\"http://www.yeguang.me/wp-content/uploads/2019/05/第二章作业.zip\" target=\"_blank\" rel=\"noopener\">下载</a></p>"},{"title":"turtle --- 海龟绘图 开发文档","url":"16.html","id":"16","date":"2019-08-09T09:33:22.000Z","_content":"海龟绘图 开发文档\nurl: 16.html\nid: 16\ncategories:\n  - Python初学\ndate: 2019-08-09 17:33:22\ntags:\n---\n海龟绘图 开发文档\nurl: 16.html\nid: 16\ncategories:\n  - Python初学\ntags:Python\n---\n\n**源码：** [Lib/turtle.py](https://github.com/python/cpython/tree/3.7/Lib/turtle.py)\n\n* * *\n\n概述\n--\n\n海龟绘图很适合用来引导孩子学习编程。最初来自于 Wally Feurzig 和 Seymour Papert 于 1966 年所创造的 Logo 编程语言。\n<!--more-->\n\n请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 `import turtle`，再执行 `turtle.forward(15)`，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 `turtle.right(25)`，它将原地右转 25 度。\n\nTurtle star\n\n使用海龟绘图可以编写重复执行简单动作的程序画出精细复杂的形状。\n\n![../_images/turtle-star.png](https://docs.python.org/zh-cn/3.7/_images/turtle-star.png)\n\n**from** **turtle** **import** *\ncolor('red', 'yellow')\nbegin_fill()\n**while** **True**:\n    forward(200)\n    left(170)\n    **if** abs(pos()) < 1:\n        **break**\nend_fill()\ndone()\n\n通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。\n\n[`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 模块是基于 Python 标准发行版 2.5 以来的同名模块重新编写并进行了功能扩展。\n\n新模块尽量保持了原模块的特点，并且(几乎)100%与其兼容。这就意味着初学编程者能够以交互方式使用模块的所有命令、类和方法——运行 IDLE 时注意加 `-n` 参数。\n\nturtle 模块提供面向对象和面向过程两种形式的海龟绘图基本组件。由于它使用 [`tkinter`](https://docs.python.org/zh-cn/3.7/library/tkinter.html#module-tkinter) 实现基本图形界面，因此需要安装了 Tk 支持的 Python 版本。\n\n面向对象的接口主要使用“2+2”个类：\n\n1.  [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 类定义图形窗口作为绘图海龟的运动场。它的构造器需要一个 `tkinter.Canvas` 或 [`ScrolledCanvas`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas) 作为参数。应在 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 作为某个程序的一部分的时候使用。[`Screen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 函数返回一个 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 子类的单例对象。此函数应在 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 作为独立绘图工具时使用。作为一个单例对象，其所属的类是不可被继承的。TurtleScreen/Screen 的所有方法还存在对应的函数，即作为面向过程的接口组成部分。\n2.  [`RawTurtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawTurtle) (别名: [`RawPen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawPen)) 类定义海龟对象在 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen)上绘图。它的构造器需要一个 Canvas, ScrolledCanvas 或 TurtleScreen 作为参数，以指定 RawTurtle 对象在哪里绘图。从 RawTurtle 派生出子类 [`Turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle) (别名: `Pen`)，该类对象在 [`Screen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 实例上绘图，如果实例不存在则会自动创建。RawTurtle/Turtle 的所有方法也存在对应的函数，即作为面向过程的接口组成部分。\n\n过程式接口提供与 [`Screen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 和 [`Turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle) 类的方法相对应的函数。函数名与对应的方法名相同。当 Screen 类的方法对应函数被调用时会自动创建一个 Screen 对象。当 Turtle 类的方法对应函数被调用时会自动创建一个 (匿名的) Turtle 对象。\n\n如果屏幕上需要有多个海龟，就必须使用面向对象的接口。\n\n注解\n\n以下文档给出了函数的参数列表。对于方法来说当然还有额外的第一个参数 _self_，这里省略了。\n\n可用的 Turtle 和 Screen 方法概览\n------------------------\n\n### Turtle 方法\n\n海龟动作移动和绘制[`forward()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.forward) | [`fd()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fd) 前进[`backward()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.backward) | [`bk()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bk) | [`back()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.back) 后退[`right()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.right) | [`rt()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.rt) 右转[`left()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.left) | [`lt()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.lt) 左转[`goto()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.goto) | [`setpos()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setpos) | [`setposition()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setposition) 前往/定位[`setx()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setx) 设置x坐标[`sety()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.sety) 设置y坐标[`setheading()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setheading) | [`seth()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.seth) 设置朝向[`home()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.home) 返回原点[`circle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.circle) 画圆[`dot()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.dot) 画点[`stamp()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp) 印章[`clearstamp()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamp) 清除印章[`clearstamps()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamps) 清除多个印章[`undo()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo) 撤消[`speed()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed) 速度获取海龟的状态[`position()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.position) | [`pos()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos) 位置[`towards()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.towards) 目标方向[`xcor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.xcor) x坐标[`ycor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ycor) y坐标[`heading()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.heading) 朝向[`distance()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.distance) 距离设置与度量单位[`degrees()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees) 角度[`radians()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians) 弧度画笔控制绘图状态[`pendown()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pendown) | [`pd()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pd) | [`down()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.down) 画笔落下[`penup()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.penup) | [`pu()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pu) | [`up()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.up) 画笔抬起[`pensize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pensize) | [`width()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.width) 画笔粗细[`pen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen) 画笔[`isdown()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isdown) 画笔是否落下颜色控制[`color()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.color) 颜色[`pencolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor) 画笔颜色[`fillcolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor) 填充颜色填充[`filling()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.filling) 是否填充[`begin_fill()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill) 开始填充[`end_fill()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_fill) 结束填充更多绘图控制[`reset()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset) 重置[`clear()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear) 清空[`write()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.write) 书写海龟状态可见性[`showturtle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.showturtle) | [`st()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.st) 显示海龟[`hideturtle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.hideturtle) | [`ht()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ht) 隐藏海龟[`isvisible()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isvisible) 是否可见外观[`shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shape) 形状[`resizemode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resizemode) 大小调整模式[`shapesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize) | [`turtlesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtlesize) 形状大小[`shearfactor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shearfactor) 剪切因子[`settiltangle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.settiltangle) 设置倾角[`tiltangle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tiltangle) 倾角[`tilt()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tilt) 倾斜[`shapetransform()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapetransform) 变形[`get_shapepoly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_shapepoly) 获取形状多边形使用事件[`onclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick) 当鼠标点击[`onrelease()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onrelease) 当鼠标释放[`ondrag()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ondrag) 当鼠标拖动特殊海龟方法[`begin_poly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_poly) 开始记录多边形[`end_poly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_poly) 结束记录多边形[`get_poly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_poly) 获取多边形[`clone()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clone) 克隆[`getturtle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getturtle) | [`getpen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getpen) 获取海龟画笔[`getscreen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getscreen) 获取屏幕[`setundobuffer()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setundobuffer) 设置撤消缓冲区[`undobufferentries()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undobufferentries) 撤消缓冲区条目数\n\n### TurtleScreen/Screen 方法\n\n窗口控制[`bgcolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgcolor) 背景颜色[`bgpic()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgpic) 背景图片[`clear()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear) | [`clearscreen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearscreen) 清屏[`reset()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset) | [`resetscreen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resetscreen) 重置[`screensize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.screensize) 屏幕大小[`setworldcoordinates()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setworldcoordinates) 设置世界坐标系动画控制[`delay()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay) 延迟[`tracer()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tracer) 追踪[`update()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.update) 更新使用屏幕事件[`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 监听[`onkey()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkey) | [`onkeyrelease()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeyrelease) 当键盘按下并释放[`onkeypress()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeypress) 当键盘按下[`onclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick) | [`onscreenclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onscreenclick) 当点击屏幕[`ontimer()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ontimer) 当达到定时[`mainloop()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mainloop) | [`done()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.done) 主循环设置与特殊方法[`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode) 模式[`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode) 颜色模式[`getcanvas()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getcanvas) 获取画布[`getshapes()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getshapes) 获取形状[`register_shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape) | [`addshape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.addshape) 添加形状[`turtles()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtles) 所有海龟[`window_height()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_height) 窗口高度[`window_width()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_width) 窗口宽度输入方法[`textinput()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.textinput) 文本输入[`numinput()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.numinput) 数字输入Screen 专有方法[`bye()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bye) 退出[`exitonclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick) 当点击时退出[`setup()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setup) 设置[`title()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.title) 标题\n\nRawTurtle/Turtle 方法和对应函数\n------------------------\n\n本节中的大部分示例都使用 Turtle 类的一个实例，命名为 `turtle`。\n\n### 海龟动作\n\n`turtle.``forward`(_distance_)`turtle.``fd`(_distance_)\n\n参数:\n\n**distance** \\-\\- 一个数值 (整型或浮点型)\n\n海龟前进 _distance_ 指定的距离，方向为海龟的朝向。\n\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.forward(25)\n**>>\\>** turtle.position()\n(25.00,0.00)\n**>>\\>** turtle.forward(-75)\n**>>\\>** turtle.position()\n(-50.00,0.00)\n\n`turtle.``back`(_distance_)`turtle.``bk`(_distance_)`turtle.``backward`(_distance_)\n\n参数:\n\n**distance** \\-\\- 一个数值\n\n海龟后退 _distance_ 指定的距离，方向与海龟的朝向相反。不改变海龟的朝向。\n\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.backward(30)\n**>>\\>** turtle.position()\n(-30.00,0.00)\n\n`turtle.``right`(_angle_)`turtle.``rt`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值 (整型或浮点型)\n\n海龟右转 _angle_ 个单位。(单位默认为角度，但可通过 [`degrees()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees) 和 [`radians()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians) 函数改变设置。) 角度的正负由海龟模式确定，参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode)。\n\n**>>\\>** turtle.heading()\n22.0\n**>>\\>** turtle.right(45)\n**>>\\>** turtle.heading()\n337.0\n\n`turtle.``left`(_angle_)`turtle.``lt`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值 (整型或浮点型)\n\n海龟左转 _angle_ 个单位。(单位默认为角度，但可通过 [`degrees()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees) 和 [`radians()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians) 函数改变设置。) 角度的正负由海龟模式确定，参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode)。\n\n**>>\\>** turtle.heading()\n22.0\n**>>\\>** turtle.left(45)\n**>>\\>** turtle.heading()\n67.0\n\n`turtle.``goto`(_x_, _y=None_)`turtle.``setpos`(_x_, _y=None_)`turtle.``setposition`(_x_, _y=None_)\n\n参数:\n\n**x** \\-\\- 一个数值或数值对/向量**y** \\-\\- 一个数值或 `None`\n\n如果 _y_ 为 `None`，_x_ 应为一个表示坐标的数值对或 [`Vec2D`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D) 类对象 (例如 [`pos()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos) 返回的对象).\n\n海龟移动到一个绝对坐标。如果画笔已落下将会画线。不改变海龟的朝向。\n\n**>>\\>** tp = turtle.pos()\n**>>\\>** tp\n(0.00,0.00)\n**>>\\>** turtle.setpos(60,30)\n**>>\\>** turtle.pos()\n(60.00,30.00)\n**>>\\>** turtle.setpos((20,80))\n**>>\\>** turtle.pos()\n(20.00,80.00)\n**>>\\>** turtle.setpos(tp)\n**>>\\>** turtle.pos()\n(0.00,0.00)\n\n`turtle.``setx`(_x_)\n\n参数:\n\n**x** \\-\\- 一个数值 (整型或浮点型)\n\n设置海龟的横坐标为 _x_，纵坐标保持不变。\n\n**>>\\>** turtle.position()\n(0.00,240.00)\n**>>\\>** turtle.setx(10)\n**>>\\>** turtle.position()\n(10.00,240.00)\n\n`turtle.``sety`(_y_)\n\n参数:\n\n**y** \\-\\- 一个数值 (整型或浮点型)\n\n设置海龟的纵坐标为 _y_，横坐标保持不变。\n\n**>>\\>** turtle.position()\n(0.00,40.00)\n**>>\\>** turtle.sety(-10)\n**>>\\>** turtle.position()\n(0.00,-10.00)\n\n`turtle.``setheading`(_to_angle_)`turtle.``seth`(_to_angle_)\n\n参数:\n\n**to_angle** \\-\\- 一个数值 (整型或浮点型)\n\n设置海龟的朝向为 _to_angle_。以下是以角度表示的几个常用方向：\n\n标准模式\n\nlogo 模式\n\n0 - 东\n\n0 - 北\n\n90 - 北\n\n90 - 东\n\n180 - 西\n\n180 - 南\n\n270 - 南\n\n270 - 西\n\n**>>\\>** turtle.setheading(90)\n**>>\\>** turtle.heading()\n90.0\n\n`turtle.``home`()\n\n海龟移至初始坐标 (0,0)，并设置朝向为初始方向 (由海龟模式确定，参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode))。\n\n**>>\\>** turtle.heading()\n90.0\n**>>\\>** turtle.position()\n(0.00,-10.00)\n**>>\\>** turtle.home()\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n\n`turtle.``circle`(_radius_, _extent=None_, _steps=None_)\n\n参数:\n\n**radius** \\-\\- 一个数值**extent** \\-\\- 一个数值 (或 `None`)**steps** \\-\\- 一个整型数 (或 `None`)\n\n绘制一个 _radius_ 指定半径的圆。圆心在海龟左边 _radius_ 个单位；_extent_ 为一个夹角，用来决定绘制圆的一部分。如未指定 _extent*则绘制整个圆。如果 *extent_ 不是完整圆周，则以当前画笔位置为一个端点绘制圆弧。如果 _radius_ 为正值则朝逆时针方向绘制圆弧，否则朝顺时针方向。最终海龟的朝向会依据 _extent_ 的值而改变。\n\n圆实际是以其内切正多边形来近似表示的，其边的数量由 _steps_ 指定。如果未指定边数则会自动确定。此方法也可用来绘制正多边形。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n**>>\\>** turtle.circle(50)\n**>>\\>** turtle.position()\n(-0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n**>>\\>** turtle.circle(120, 180)  _\\# draw a semicircle_\n**>>\\>** turtle.position()\n(0.00,240.00)\n**>>\\>** turtle.heading()\n180.0\n\n`turtle.``dot`(_size=None_, _*color_)\n\n参数:\n\n**size** \\-\\- 一个整型数 >= 1 (如果指定)**color** \\-\\- 一个颜色字符串或颜色数值元组\n\n绘制一个直径为 _size_，颜色为 _color_ 的圆点。如果 _size_ 未指定，则直径取 pensize+4 和 2*pensize 中的较大值。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.dot()\n**>>\\>** turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n**>>\\>** turtle.position()\n(100.00,-0.00)\n**>>\\>** turtle.heading()\n0.0\n\n`turtle.``stamp`()\n\n在海龟当前位置印制一个海龟形状。返回该印章的 stamp_id，印章可以通过调用 `clearstamp(stamp_id)` 来删除。\n\n**>>\\>** turtle.color(\"blue\")\n**>>\\>** turtle.stamp()\n11\n**>>\\>** turtle.fd(50)\n\n`turtle.``clearstamp`(_stampid_)\n\n参数:\n\n**stampid** \\-\\- 一个整型数，必须是之前 [`stamp()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp) 调用的返回值\n\n删除 _stampid_ 指定的印章。\n\n**>>\\>** turtle.position()\n(150.00,-0.00)\n**>>\\>** turtle.color(\"blue\")\n**>>\\>** astamp = turtle.stamp()\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.position()\n(200.00,-0.00)\n**>>\\>** turtle.clearstamp(astamp)\n**>>\\>** turtle.position()\n(200.00,-0.00)\n\n`turtle.``clearstamps`(_n=None_)\n\n参数:\n\n**n** \\-\\- 一个整型数 (或 `None`)\n\n删除全部或前/后 _n_ 个海龟印章。如果 _n_ 为 `None` 则删除全部印章，如果 _n_ \\> 0 则删除前 _n_ 个印章，否则如果 _n_< 0 则删除后 _n_ 个印章。\n\n**>>\\>** **for** i **in** range(8):\n**... **    turtle.stamp(); turtle.fd(30)\n13\n14\n15\n16\n17\n18\n19\n20\n**>>\\>** turtle.clearstamps(2)\n**>>\\>** turtle.clearstamps(-2)\n**>>\\>** turtle.clearstamps()\n\n`turtle.``undo`()\n\n撤消 (或连续撤消) 最近的一个 (或多个) 海龟动作。可撤消的次数由撤消缓冲区的大小决定。\n\n**>>\\>** **for** i **in** range(4):\n**... **    turtle.fd(50); turtle.lt(80)\n**...**\n**>>\\>** **for** i **in** range(8):\n**... **    turtle.undo()\n\n`turtle.``speed`(_speed=None_)\n\n参数:\n\n**speed** \\-\\- 一个 0..10 范围内的整型数或速度字符串 (见下)\n\n设置海龟移动的速度为 0..10 表示的整型数值。如未指定参数则返回当前速度。\n\n如果输入数值大于 10 或小于 0.5 则速度设为 0。速度字符串与速度值的对应关系如下:\n\n*   \"fastest\": 0 最快\n*   \"fast\": 10 快\n*   \"normal\": 6 正常\n*   \"slow\": 3 慢\n*   \"slowest\": 1 最慢\n\n速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。\n\n注意: _speed_ = 0 表示 _没有_ 动画效果。forward/back 将使海龟向前/向后跳跃，同样的 left/right 将使海龟立即改变朝向。\n\n**>>\\>** turtle.speed()\n3\n**>>\\>** turtle.speed('normal')\n**>>\\>** turtle.speed()\n6\n**>>\\>** turtle.speed(9)\n**>>\\>** turtle.speed()\n9\n\n### 获取海龟的状态\n\n`turtle.``position`()`turtle.``pos`()\n\n返回海龟当前的坐标 (x,y) (为 [`Vec2D`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D) 矢量类对象)。\n\n**>>\\>** turtle.pos()\n(440.00,-0.00)\n\n`turtle.``towards`(_x_, _y=None_)\n\n参数:\n\n**x** \\-\\- 一个数值或数值对/矢量，或一个海龟实例**y** \\-\\- 一个数值——如果 _x_ 是一个数值，否则为 `None`\n\n从海龟位置到由 (x,y)，矢量或另一海龟对应位置的连线的夹角。此数值依赖于海龟初始朝向 - 由 \"standard\"/\"world\" 或 \"logo\" 模式设置所决定)。\n\n**>>\\>** turtle.goto(10, 10)\n**>>\\>** turtle.towards(0,0)\n225.0\n\n`turtle.``xcor`()\n\n返回海龟的 x 坐标。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(50)\n**>>\\>** turtle.forward(100)\n**>>\\>** turtle.pos()\n(64.28,76.60)\n**>>\\>** **print**(round(turtle.xcor(), 5))\n64.27876\n\n`turtle.``ycor`()\n\n返回海龟的 y 坐标。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(60)\n**>>\\>** turtle.forward(100)\n**>>\\>** **print**(turtle.pos())\n(50.00,86.60)\n**>>\\>** **print**(round(turtle.ycor(), 5))\n86.60254\n\n`turtle.``heading`()\n\n返回海龟当前的朝向 (数值依赖于海龟模式参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode))。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(67)\n**>>\\>** turtle.heading()\n67.0\n\n`turtle.``distance`(_x_, _y=None_)\n\n参数:\n\n**x** \\-\\- 一个数值或数值对/矢量，或一个海龟实例**y** \\-\\- 一个数值——如果 _x_ 是一个数值，否则为 `None`\n\n返回从海龟位置到由 (x,y)，适量或另一海龟对应位置的单位距离。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.distance(30,40)\n50.0\n**>>\\>** turtle.distance((30,40))\n50.0\n**>>\\>** joe = Turtle()\n**>>\\>** joe.forward(77)\n**>>\\>** turtle.distance(joe)\n77.0\n\n### 度量单位设置\n\n`turtle.``degrees`(_fullcircle=360.0_)\n\n参数:\n\n**fullcircle** \\-\\- 一个数值\n\n设置角度的度量单位，即设置一个圆周为多少 \"度\"。默认值为 360 度。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(90)\n**>>\\>** turtle.heading()\n90.0\n\nChange angle measurement unit to grad (also known as gon,\ngrade, or gradian and equals 1/100-th of the right angle.)\n**>>\\>** turtle.degrees(400.0)\n**>>\\>** turtle.heading()\n100.0\n**>>\\>** turtle.degrees(360)\n**>>\\>** turtle.heading()\n90.0\n\n`turtle.``radians`()\n\n设置角度的度量单位为弧度。其值等于 `degrees(2*math.pi)`。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(90)\n**>>\\>** turtle.heading()\n90.0\n**>>\\>** turtle.radians()\n**>>\\>** turtle.heading()\n1.5707963267948966\n\n### 画笔控制\n\n#### 绘图状态\n\n`turtle.``pendown`()`turtle.``pd`()`turtle.``down`()\n\n画笔落下 \\-\\- 移动时将画线。`turtle.``penup`()`turtle.``pu`()`turtle.``up`()\n\n画笔抬起 \\-\\- 移动时不画线。`turtle.``pensize`(_width=None_)`turtle.``width`(_width=None_)\n\n参数:\n\n**width** \\-\\- 一个正数值\n\n设置线条的粗细为 _width_ 或返回该值。如果 resizemode 设为 \"auto\" 并且 turtleshape 为多边形，该多边形也以同样组细的线条绘制。如未指定参数，则返回当前的 pensize。\n\n**>>\\>** turtle.pensize()\n1\n**>>\\>** turtle.pensize(10)   _\\# from here on lines of width 10 are drawn_\n\n`turtle.``pen`(_pen=None_, _**pendict_)\n\n参数:\n\n**pen** \\-\\- 一个包含部分或全部下列键的字典**pendict** \\-\\- 一个或多个以下列键为关键字的关键字参数\n\n返回或设置画笔的属性，以一个包含以下键值对的 \"画笔字典\" 表示:\n\n*   \"shown\": True/False\n*   \"pendown\": True/False\n*   \"pencolor\": 颜色字符串或颜色元组\n*   \"fillcolor\": 颜色字符串或颜色元组\n*   \"pensize\": 正数值\n*   \"speed\": 0..10 范围内的数值\n*   \"resizemode\": \"auto\" 或 \"user\" 或 \"noresize\"\n*   \"stretchfactor\": (正数值, 正数值)\n*   \"outline\": 正数值\n*   \"tilt\": 数值\n\n此字典可作为后续调用 [`pen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen) 时的参数，以恢复之前的画笔状态。另外还可将这些属性作为关键词参数提交。使用此方式可以用一条语句设置画笔的多个属性。\n\n**>>\\>** turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n**>>\\>** sorted(turtle.pen().items())\n\\[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)\\]\n**>>\\>** penstate=turtle.pen()\n**>>\\>** turtle.color(\"yellow\", \"\")\n**>>\\>** turtle.penup()\n**>>\\>** sorted(turtle.pen().items())\\[:3\\]\n\\[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')\\]\n**>>\\>** turtle.pen(penstate, fillcolor=\"green\")\n**>>\\>** sorted(turtle.pen().items())\\[:3\\]\n\\[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')\\]\n\n`turtle.``isdown`()\n\n如果画笔落下返回 `True`，如果画笔抬起返回 `False`。\n\n**>>\\>** turtle.penup()\n**>>\\>** turtle.isdown()\nFalse\n**>>\\>** turtle.pendown()\n**>>\\>** turtle.isdown()\nTrue\n\n#### 颜色控制\n\n`turtle.``pencolor`(_*args_)\n\n返回或设置画笔颜色。\n\n允许以下四种输入格式:`pencolor()`返回以颜色描述字符串或元组 (见示例) 表示的当前画笔颜色。可用作其他 color/pencolor/fillcolor 调用的输入。`pencolor(colorstring)`设置画笔颜色为 _colorstring_ 指定的 Tk 颜色描述字符串，例如 `\"red\"`、`\"yellow\"` 或 `\"#33cc8c\"`。`pencolor((r, g, b))`设置画笔颜色为以 _r_, _g_, _b_ 元组表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 [`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode))。`pencolor(r, g, b)`设置画笔颜色为以 _r_, _g_, _b_ 表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode。\n\n如果 turtleshape 为多边形，该多边形轮廓也以新设置的画笔颜色绘制。\n\n**>>\\>** colormode()\n1.0\n**>>\\>** turtle.pencolor()\n'red'\n**>>\\>** turtle.pencolor(\"brown\")\n**>>\\>** turtle.pencolor()\n'brown'\n**>>\\>** tup = (0.2, 0.8, 0.55)\n**>>\\>** turtle.pencolor(tup)\n**>>\\>** turtle.pencolor()\n(0.2, 0.8, 0.5490196078431373)\n**>>\\>** colormode(255)\n**>>\\>** turtle.pencolor()\n(51.0, 204.0, 140.0)\n**>>\\>** turtle.pencolor('#32c18f')\n**>>\\>** turtle.pencolor()\n(50.0, 193.0, 143.0)\n\n`turtle.``fillcolor`(_*args_)\n\n返回或设置填充颜色。\n\n允许以下四种输入格式:`fillcolor()`返回以颜色描述字符串或元组 (见示例) 表示的当前填充颜色。可用作其他 color/pencolor/fillcolor 调用的输入。`fillcolor(colorstring)`设置填充颜色为 _colorstring_ 指定的 Tk 颜色描述字符串，例如 `\"red\"`、`\"yellow\"` 或 `\"#33cc8c\"`。`fillcolor((r, g, b))`设置填充颜色为以 _r_, _g_, _b_ 元组表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 [`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode))。`fillcolor(r, g, b)`设置填充颜色为 _r_, _g_, _b_ 表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode。\n\n如果 turtleshape 为多边形，该多边形内部也以新设置的填充颜色填充。\n\n**>>\\>** turtle.fillcolor(\"violet\")\n**>>\\>** turtle.fillcolor()\n'violet'\n**>>\\>** turtle.pencolor()\n(50.0, 193.0, 143.0)\n**>>\\>** turtle.fillcolor((50, 193, 143))  _\\# Integers, not floats_\n**>>\\>** turtle.fillcolor()\n(50.0, 193.0, 143.0)\n**>>\\>** turtle.fillcolor('#ffffff')\n**>>\\>** turtle.fillcolor()\n(255.0, 255.0, 255.0)\n\n`turtle.``color`(_*args_)\n\n返回或设置画笔颜色和填充颜色。\n\n允许多种输入格式。使用如下 0 至 3 个参数:`color()`返回以一对颜色描述字符串或元组表示的当前画笔颜色和填充颜色，两者可分别由 [`pencolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor) 和 [`fillcolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor) 返回。`color(colorstring)`, `color((r,g,b))`, `color(r,g,b)`输入格式与 [`pencolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor) 相同，同时设置填充颜色和画笔颜色为指定的值。`color(colorstring1, colorstring2)`, `color((r1,g1,b1), (r2,g2,b2))`相当于 `pencolor(colorstring1)` 加 `fillcolor(colorstring2)`，使用其他输入格式的方法也与之类似。\n\n如果 turtleshape 为多边形，该多边形轮廓与填充也使用新设置的颜色。\n\n**>>\\>** turtle.color(\"red\", \"green\")\n**>>\\>** turtle.color()\n('red', 'green')\n**>>\\>** color(\"#285078\", \"#a0c8f0\")\n**>>\\>** color()\n((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))\n\n另参见: Screen 方法 [`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode)。\n\n#### 填充\n\n`turtle.``filling`()\n\n返回填充状态 (填充为 `True`，否则为 `False`)。\n\n**>>\\>** turtle.begin_fill()\n**>>\\>** **if** turtle.filling():\n**... **   turtle.pensize(5)\n**...** **else**:\n**... **   turtle.pensize(3)\n\n`turtle.``begin_fill`()\n\n在绘制要填充的形状之前调用。`turtle.``end_fill`()\n\n填充上次调用 [`begin_fill()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill) 之后绘制的形状。\n\n**>>\\>** turtle.color(\"black\", \"red\")\n**>>\\>** turtle.begin_fill()\n**>>\\>** turtle.circle(80)\n**>>\\>** turtle.end_fill()\n\n#### 更多绘图控制\n\n`turtle.``reset`()\n\n从屏幕中删除海龟的绘图，海龟回到原点并设置所有变量为默认值。\n\n**>>\\>** turtle.goto(0,-22)\n**>>\\>** turtle.left(100)\n**>>\\>** turtle.position()\n(0.00,-22.00)\n**>>\\>** turtle.heading()\n100.0\n**>>\\>** turtle.reset()\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n\n`turtle.``clear`()\n\n从屏幕中删除指定海龟的绘图。不移动海龟。海龟的状态和位置以及其他海龟的绘图不受影响。`turtle.``write`(_arg_, _move=False_, _align=\"left\"_, _font=(\"Arial\"_, _8_, _\"normal\")_)\n\n参数:\n\n**arg** \\-\\- 要书写到 TurtleScreen 的对象**move** \\-\\- True/False**align** \\-\\- 字符串 \"left\", \"center\" 或 \"right\"**font** \\-\\- 一个三元组 (fontname, fontsize, fonttype)\n\n书写文本 - _arg_ 指定的字符串 \\- 到当前海龟位置，_align_ 指定对齐方式 (\"left\", \"center\" 或 right\")，font 指定字体。如果 _move_ 为 True，画笔会移动到文本的右下角。默认 _move_ 为 `False`。\n\n**>>\\>** turtle.write(\"Home = \", **True**, align=\"center\")\n**>>\\>** turtle.write((0,0), **True**)\n\n### 海龟状态\n\n#### 可见性\n\n`turtle.``hideturtle`()`turtle.``ht`()\n\n使海龟不可见。当你绘制复杂图形时这是个好主意，因为隐藏海龟可显著加快绘制速度。\n\n**>>\\>** turtle.hideturtle()\n\n`turtle.``showturtle`()`turtle.``st`()\n\n使海龟可见。\n\n**>>\\>** turtle.showturtle()\n\n`turtle.``isvisible`()\n\n如果海龟显示返回 `True`，如果海龟隐藏返回 `False`。\n\n**>>\\>** turtle.hideturtle()\n**>>\\>** turtle.isvisible()\nFalse\n**>>\\>** turtle.showturtle()\n**>>\\>** turtle.isvisible()\nTrue\n\n#### 外观\n\n`turtle.``shape`(_name=None_)\n\n参数:\n\n**name** \\-\\- 一个有效的形状名字符串\n\n设置海龟形状为 _name_ 指定的形状名，如未指定形状名则返回当前的形状名。_name_ 指定的形状名应存在于 TurtleScreen 的 shape 字典中。多边形的形状初始时有以下几种: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\"。要了解如何处理形状请参看 Screen 方法 [`register_shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape)。\n\n**>>\\>** turtle.shape()\n'classic'\n**>>\\>** turtle.shape(\"turtle\")\n**>>\\>** turtle.shape()\n'turtle'\n\n`turtle.``resizemode`(_rmode=None_)\n\n参数:\n\n**rmode** \\-\\- 字符串 \"auto\", \"user\", \"noresize\" 其中之一\n\n设置大小调整模式为以下值之一: \"auto\", \"user\", \"noresize\"。如未指定 _rmode_ 则返回当前的大小调整模式。不同的大小调整模式的效果如下:\n\n*   \"auto\": 根据画笔粗细值调整海龟的外观。\n*   \"user\": 根据拉伸因子和轮廓宽度 (outline) 值调整海龟的外观，两者是由 [`shapesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize) 设置的。\n*   \"noresize\": 不调整海龟的外观大小。\n\n大小调整模式 (\"user\") 会在 [`shapesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize) 带参数调用时生效。\n\n**>>\\>** turtle.resizemode()\n'noresize'\n**>>\\>** turtle.resizemode(\"auto\")\n**>>\\>** turtle.resizemode()\n'auto'\n\n`turtle.``shapesize`(_stretch_wid=None_, _stretch_len=None_, _outline=None_)`turtle.``turtlesize`(_stretch_wid=None_, _stretch_len=None_, _outline=None_)\n\n参数:\n\n**stretch_wid** \\-\\- 正数值**stretch_len** \\-\\- 正数值**outline** \\-\\- 正数值\n\n返回或设置画笔的属性 x/y-拉伸因子和/或轮廓。设置大小调整模式为 \"user\"。当且仅当大小调整模式设为 \"user\" 时海龟会基于其拉伸因子调整外观: _stretch_wid_ 为垂直于其朝向的宽度拉伸因子，_stretch_len_ 为平等于其朝向的长度拉伸因子，决定形状轮廓线的粗细。\n\n**>>\\>** turtle.shapesize()\n(1.0, 1.0, 1)\n**>>\\>** turtle.resizemode(\"user\")\n**>>\\>** turtle.shapesize(5, 5, 12)\n**>>\\>** turtle.shapesize()\n(5, 5, 12)\n**>>\\>** turtle.shapesize(outline=8)\n**>>\\>** turtle.shapesize()\n(5, 5, 8)\n\n`turtle.``shearfactor`(_shear=None_)\n\n参数:\n\n**shear** \\-\\- 数值 (可选)\n\n设置或返回当前的剪切因子。根据 share 指定的剪切因子即剪切角度的切线来剪切海龟形状。_不_ 改变海龟的朝向 (移动方向)。如未指定 shear 参数: 返回当前的剪切因子即剪切角度的切线，与海龟朝向平行的线条将被剪切。\n\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.shearfactor(0.5)\n**>>\\>** turtle.shearfactor()\n0.5\n\n`turtle.``tilt`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值\n\n海龟形状自其当前的倾角转动 _angle_ 指定的角度，但 _不_ 改变海龟的朝向 (移动方向)。\n\n**>>\\>** turtle.reset()\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.tilt(30)\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.tilt(30)\n**>>\\>** turtle.fd(50)\n\n`turtle.``settiltangle`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值\n\n旋转海龟形状使其指向 _angle_ 指定的方向，忽略其当前的倾角，_不_ 改变海龟的朝向 (移动方向)。\n\n**>>\\>** turtle.reset()\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.settiltangle(45)\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.settiltangle(-45)\n**>>\\>** turtle.fd(50)\n\n_3.1 版后已移除._`turtle.``tiltangle`(_angle=None_)\n\n参数:\n\n**angle** \\-\\- 一个数值 (可选)\n\n设置或返回当前的倾角。如果指定 angle 则旋转海龟形状使其指向 angle 指定的方向，忽略其当前的倾角。_不_改变海龟的朝向 (移动方向)。如果未指定 angle: 返回当前的倾角，即海龟形状的方向和海龟朝向 (移动方向) 之间的夹角。\n\n**>>\\>** turtle.reset()\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.tilt(45)\n**>>\\>** turtle.tiltangle()\n45.0\n\n`turtle.``shapetransform`(_t11=None_, _t12=None_, _t21=None_, _t22=None_)\n\n参数:\n\n**t11** \\-\\- 一个数值 (可选)**t12** \\-\\- 一个数值 (可选)**t21** \\-\\- 一个数值 (可选)**t12** \\-\\- 一个数值 (可选)\n\n设置或返回海龟形状的当前变形矩阵。\n\n如不指定任何矩阵元素，则返回以4元素元组表示的变形矩阵。否则使用指定元素设置变形矩阵改变海龟形状，矩阵第一排的值为 t11, t12，第二排的值为 t21, t22。行列式 t11 * t22 - t12 * t21 的值不能为零，否则会出错。根据指定的矩阵修改拉伸因子，剪切因子和倾角。\n\n**>>\\>** turtle = Turtle()\n**>>\\>** turtle.shape(\"square\")\n**>>\\>** turtle.shapesize(4,2)\n**>>\\>** turtle.shearfactor(-0.5)\n**>>\\>** turtle.shapetransform()\n(4.0, -1.0, -0.0, 2.0)\n\n`turtle.``get_shapepoly`()\n\n返回以坐标值对元组表示的当前形状多边形。这可以用于定义一个新形状或一个复合形状的多个组成部分。\n\n**>>\\>** turtle.shape(\"square\")\n**>>\\>** turtle.shapetransform(4, -1, 0, 2)\n**>>\\>** turtle.get_shapepoly()\n((50, -20), (30, 20), (-50, 20), (-30, -20))\n\n### 使用事件\n\n`turtle.``onclick`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n将 _fun_ 指定的函数绑定到鼠标点击此海龟事件。如果 _fun_ 值为 `None`，则移除现有的绑定。以下为使用匿名海龟即过程式的示例:\n\n**>>\\>** **def** turn(x, y):\n**... **    left(180)\n**...**\n**>>\\>** onclick(turn)  _\\# Now clicking into the turtle will turn it._\n**>>\\>** onclick(None)  _\\# event-binding will be removed_\n\n`turtle.``onrelease`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n将 _fun_ 指定的函数绑定到在此海龟上释放鼠标按键事件。如果 _fun_ 值为 `None`，则移除现有的绑定。\n\n**>>\\>** **class** **MyTurtle**(Turtle):\n**... **    **def** glow(self,x,y):\n**... **        self.fillcolor(\"red\")\n**... **    **def** unglow(self,x,y):\n**... **        self.fillcolor(\"\")\n**...**\n**>>\\>** turtle = MyTurtle()\n**>>\\>** turtle.onclick(turtle.glow)     _\\# clicking on turtle turns fillcolor red,_\n**>>\\>** turtle.onrelease(turtle.unglow) _\\# releasing turns it to transparent._\n\n`turtle.``ondrag`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n将 _fun_ 指定的函数绑定到在此海龟上移动鼠标事件。如果 _fun_ 值为 `None`，则移除现有的绑定。\n\n注: 在海龟上移动鼠标事件之前应先发生在此海龟上点击鼠标事件。\n\n**>>\\>** turtle.ondrag(turtle.goto)\n\n在此之后点击并拖动海龟可在屏幕上手绘线条 (如果画笔为落下)。\n\n### 特殊海龟方法\n\n`turtle.``begin_poly`()\n\n开始记录多边形的顶点。当前海龟位置为多边形的第一个顶点。`turtle.``end_poly`()\n\n停止记录多边形的顶点。当前海龟位置为多边形的最后一个顶点。它将连线到第一个顶点。`turtle.``get_poly`()\n\n返回最新记录的多边形。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.begin_poly()\n**>>\\>** turtle.fd(100)\n**>>\\>** turtle.left(20)\n**>>\\>** turtle.fd(30)\n**>>\\>** turtle.left(60)\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.end_poly()\n**>>\\>** p = turtle.get_poly()\n**>>\\>** register_shape(\"myFavouriteShape\", p)\n\n`turtle.``clone`()\n\n创建并返回海龟的克隆体，具有相同的位置、朝向和海龟属性。\n\n**>>\\>** mick = Turtle()\n**>>\\>** joe = mick.clone()\n\n`turtle.``getturtle`()`turtle.``getpen`()\n\n返回海龟对象自身。唯一合理的用法: 作为一个函数来返回 \"匿名海龟\":\n\n**>>\\>** pet = getturtle()\n**>>\\>** pet.fd(50)\n**>>\\>** pet\n<turtle.Turtle object at 0x...>\n\n`turtle.``getscreen`()\n\n返回作为海龟绘图场所的 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 类对象。该对象将可调用 TurtleScreen 方法。\n\n**>>\\>** ts = turtle.getscreen()\n**>>\\>** ts\n<turtle._Screen object at 0x...>\n**>>\\>** ts.bgcolor(\"pink\")\n\n`turtle.``setundobuffer`(_size_)\n\n参数:\n\n**size** \\-\\- 一个整型数值或 `None`\n\n设置或禁用撤消缓冲区。如果 _size_ 为一个整型数则将开辟一个指定大小的空缓冲区。_size_ 表示可使用 [`undo()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo)方法/函数撤消的海龟命令的次数上限。如果 _size_ 为 `None` 则禁用撤消缓冲区。\n\n**>>\\>** turtle.setundobuffer(42)\n\n`turtle.``undobufferentries`()\n\n返回撤销缓冲区里的条目数。\n\n**>>\\>** **while** undobufferentries():\n**... **    undo()\n\n### 复合形状\n\n要使用由多个不同颜色多边形构成的复合海龟形状，你必须明确地使用辅助类 [`Shape`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape)，具体步骤如下:\n\n1.  创建一个空 Shape 对象，类型为 \"compound\"。\n2.  按照需要使用 `addcomponent()` 方法向此对象添加多个部件。例如:**>>\\>** s = Shape(\"compound\") **>>\\>** poly1 = ((0,0),(10,-5),(0,10),(-10,-5)) **>>\\>** s.addcomponent(poly1, \"red\", \"blue\") **>>\\>** poly2 = ((0,0),(10,-5),(-10,-5)) **>>\\>** s.addcomponent(poly2, \"blue\", \"red\")\n3.  接下来将 Shape 对象添加到 Screen 对象的形状列表并使用它:**>>\\>** register_shape(\"myshape\", s) **>>\\>** shape(\"myshape\")\n\n注解\n\n[`Shape`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape) 类在 [`register_shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape) 方法的内部以多种方式使用。应用程序编写者 _只有_ 在使用上述的复合形状时才需要处理 Shape 类。\n\nTurtleScreen/Screen 方法及对应函数\n---------------------------\n\n本节中的大部分示例都使用 TurtleScreen 类的一个实例，命名为 `screen`。\n\n### 窗口控制\n\n`turtle.``bgcolor`(_*args_)\n\n参数:\n\n**args** \\-\\- 一个颜色字符串或三个取值范围 0..colormode 内的数值或一个取值范围相同的数值3元组\n\n设置或返回 TurtleScreen 的背景颜色。\n\n**>>\\>** screen.bgcolor(\"orange\")\n**>>\\>** screen.bgcolor()\n'orange'\n**>>\\>** screen.bgcolor(\"#800080\")\n**>>\\>** screen.bgcolor()\n(128.0, 0.0, 128.0)\n\n`turtle.``bgpic`(_picname=None_)\n\n参数:\n\n**picname** \\-\\- 一个字符串, gif-文件名, `\"nopic\"`, 或 `None`\n\n设置背景图片或返回当前背景图片名称。如果 _picname_ 为一个文件名，则将相应图片设为背景。如果 _picname_ 为 `\"nopic\"`，则删除当前背景图片。如果 _picname_ 为 `None`，则返回当前背景图片文件名。:>>>\n\n**>>\\>** screen.bgpic()\n'nopic'\n**>>\\>** screen.bgpic(\"landscape.gif\")\n**>>\\>** screen.bgpic()\n\"landscape.gif\"\n\n`turtle.``clear`()`turtle.``clearscreen`()\n\n从中删除所有海龟的全部绘图。将已清空的 TurtleScreen 重置为初始状态: 白色背景，无背景片，无事件绑定并启用追踪。\n\n注解\n\n此 TurtleScreen 方法作为全局函数时只有一个名字 `clearscreen`。全局函数 `clear` 所对应的是 Turtle 方法 `clear`。`turtle.``reset`()`turtle.``resetscreen`()\n\n重置屏幕上的所有海龟为其初始状态。\n\n注解\n\n此 TurtleScreen 方法作为全局函数时只有一个名字 `resetscreen`。全局函数 `reset` 所对应的是 Turtle 方法 `reset`。`turtle.``screensize`(_canvwidth=None_, _canvheight=None_, _bg=None_)\n\n参数:\n\n**canvwidth** \\-\\- 正整型数，以像素表示画布的新宽度值**canvheight** \\-\\- 正整型数，以像素表示画面的新高度值**bg** \\-\\- 颜色字符串或颜色元组，新的背景颜色\n\n如未指定任何参数，则返回当前的 (canvaswidth, canvasheight)。否则改变作为海龟绘图场所的画布大小。不改变绘图窗口。要观察画布的隐藏区域，可以使用滚动条。通过此方法可以令之前绘制于画布之外的图形变为可见。\n\n**>>\\>** screen.screensize()\n(400, 300)\n**>>\\>** screen.screensize(2000,1500)\n**>>\\>** screen.screensize()\n(2000, 1500)\n\n也可以用来寻找意外逃走的海龟 ;-)`turtle.``setworldcoordinates`(_llx_, _lly_, _urx_, _ury_)\n\n参数:\n\n**llx** \\-\\- 一个数值, 画布左下角的 x-坐标**lly** \\-\\- 一个数值, 画布左下角的 y-坐标**urx** \\-\\- 一个数值, 画面右上角的 x-坐标**ury** \\-\\- 一个数值, 画布右上角的 y-坐标\n\n设置用户自定义坐标系并在必要时切换模式为 \"world\"。这会执行一次 `screen.reset()`。如果 \"world\" 模式已激活，则所有图形将根据新的坐标系重绘。\n\n**注意**: 在用户自定义坐标系中，角度可能显得扭曲。\n\n**>>\\>** screen.reset()\n**>>\\>** screen.setworldcoordinates(-50,-7.5,50,7.5)\n**>>\\>** **for** _ **in** range(72):\n**... **    left(10)\n**...**\n**>>\\>** **for** _ **in** range(8):\n**... **    left(45); fd(2)   _\\# a regular octagon_\n\n### 动画控制\n\n`turtle.``delay`(_delay=None_)\n\n参数:\n\n**delay** \\-\\- 正整型数\n\n设置或返回以毫秒数表示的延迟值 _delay_。(这约等于连续两次画布刷新的间隔时间。) 绘图延迟越长，动画速度越慢。\n\n可选参数:\n\n**>>\\>** screen.delay()\n10\n**>>\\>** screen.delay(5)\n**>>\\>** screen.delay()\n5\n\n`turtle.``tracer`(_n=None_, _delay=None_)\n\n参数:\n\n**n** \\-\\- 非负整型数**delay** \\-\\- 非负整型数\n\n启用/禁用海龟动画并设置刷新图形的延迟时间。如果指定 _n_ 值，则只有每第 n 次屏幕刷新会实际执行。(可被用来加速复杂图形的绘制。) 如果调用时不带参数，则返回当前保存的 n 值。第二个参数设置延迟值 (参见 [`delay()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay))。\n\n**>>\\>** screen.tracer(8, 25)\n**>>\\>** dist = 2\n**>>\\>** **for** i **in** range(200):\n**... **    fd(dist)\n**... **    rt(90)\n**... **    dist += 2\n\n`turtle.``update`()\n\n执行一次 TurtleScreen 刷新。在禁用追踪时使用。\n\n另参见 RawTurtle/Turtle 方法 [`speed()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed)。\n\n### 使用屏幕事件\n\n`turtle.``listen`(_xdummy=None_, _ydummy=None_)\n\n设置焦点到 TurtleScreen (以便接收按键事件)。使用两个 Dummy 参数以便能够传递 [`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 给 onclick 方法。`turtle.``onkey`(_fun_, _key_)`turtle.``onkeyrelease`(_fun_, _key_)\n\n参数:\n\n**fun** \\-\\- 一个无参数的函数或 `None`**key** \\-\\- 一个字符串: 键 (例如 \"a\") 或键标 (例如 \"space\")\n\n绑定 _fun_ 指定的函数到按键释放事件。如果 _fun_ 值为 `None`，则移除事件绑定。注: 为了能够注册按键事件，TurtleScreen 必须得到焦点。(参见 method [`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 方法。)\n\n**>>\\>** **def** f():\n**... **    fd(50)\n**... **    lt(60)\n**...**\n**>>\\>** screen.onkey(f, \"Up\")\n**>>\\>** screen.listen()\n\n`turtle.``onkeypress`(_fun_, _key=None_)\n\n参数:\n\n**fun** \\-\\- 一个无参数的函数或 `None`**key** \\-\\- 一个字符串: 键 (例如 \"a\") 或键标 (例如 \"space\")\n\n绑定 _fun_ 指定的函数到指定键的按下事件。如未指定键则绑定到任意键的按下事件。注: 为了能够注册按键事件，必须得到焦点。(参见 [`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 方法。)\n\n**>>\\>** **def** f():\n**... **    fd(50)\n**...**\n**>>\\>** screen.onkey(f, \"Up\")\n**>>\\>** screen.listen()\n\n`turtle.``onclick`(_fun_, _btn=1_, _add=None_)`turtle.``onscreenclick`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n绑定 _fun_ 指定的函数到鼠标点击屏幕事件。如果 _fun_ 值为 `None`，则移除现有的绑定。\n\n以下示例使用一个 TurtleScreen 实例 `screen` 和一个 Turtle 实例 turtle:\n\n**>>\\>** screen.onclick(turtle.goto) _\\# Subsequently clicking into the TurtleScreen will_\n**>>\\> **                            _\\# make the turtle move to the clicked point._\n**>>\\>** screen.onclick(None)        _\\# remove event binding again_\n\n注解\n\n此 TurtleScreen 方法作为全局函数时只有一个名字 `onscreenclick`。全局函数 `onclick` 所对应的是 Turtle 方法 `onclick`。`turtle.``ontimer`(_fun_, _t=0_)\n\n参数:\n\n**fun** \\-\\- 一个无参数的函数**t** \\-\\- 一个数值 >= 0\n\n安装一个计时器，在 _t_ 毫秒后调用 _fun_ 函数。\n\n**>>\\>** running = True\n**>>\\>** **def** f():\n**... **    **if** running:\n**... **        fd(50)\n**... **        lt(60)\n**... **        screen.ontimer(f, 250)\n**>>\\>** f()   _\\### makes the turtle march around_\n**>>\\>** running = False\n\n`turtle.``mainloop`()`turtle.``done`()\n\n开始事件循环 \\- 调用 Tkinter 的 mainloop 函数。必须作为一个海龟绘图程序的结束语句。如果一个脚本是在以 -n 模式 (无子进程) 启动的 IDLE 中运行时 _不可_ 使用 \\- 用于实现海龟绘图的交互功能。:>>>\n\n**>>\\>** screen.mainloop()\n\n### 输入方法\n\n`turtle.``textinput`(_title_, _prompt_)\n\n参数:\n\n**title** \\-\\- 字符串**prompt** \\-\\- 字符串\n\n弹出一个对话框窗口用来输入一个字符串。形参 title 为对话框窗口的标题，prompt 为一条文本，通常用来提示要输入什么信息。返回输入的字符串。如果对话框被取消则返回 `None`。:>>>\n\n**>>\\>** screen.textinput(\"NIM\", \"Name of first player:\")\n\n`turtle.``numinput`(_title_, _prompt_, _default=None_, _minval=None_, _maxval=None_)\n\n参数:\n\n**title** \\-\\- 字符串**prompt** \\-\\- 字符串**default** \\-\\- 数值 (可选)**minval** \\-\\- 数值 (可选)**maxval** \\-\\- 数值 (可选)\n\n弹出一个对话框窗口用来输入一个数值。title 为对话框窗口的标题，prompt 为一条文本，通常用来描述要输入的数值信息。default: 默认值, minval: 可输入的最小值, maxval: 可输入的最大值。输入数值的必须在指定的 minval .. maxval 范围之内，否则将给出一条提示，对话框保持打开等待修改。返回输入的数值。如果对话框被取消则返回 `None`。:>>>\n\n**>>\\>** screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)\n\n### 设置与特殊方法\n\n`turtle.``mode`(_mode=None_)\n\n参数:\n\n**mode** \\-\\- 字符串 \"standard\", \"logo\" 或 \"world\" 其中之一\n\n设置海龟模式 (\"standard\", \"logo\" 或 \"world\") 并执行重置。如未指定模式则返回当前的模式。\n\n\"standard\" 模式与旧的 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 兼容。\"logo\" 模式与大部分 Logo 海龟绘图兼容。\"world\" 模式使用用户自定义的 \"世界坐标系\"。**注意**: 在此模式下，如果 `x/y` 单位比率不等于 1 则角度会显得扭曲。\n\n模式\n\n初始海龟朝向\n\n正数角度\n\n\"standard\"\n\n朝右 (东)\n\n逆时针\n\n\"logo\"\n\n朝上 (北)\n\n顺时针\n\n**>>\\>** mode(\"logo\")   _\\# resets turtle heading to north_\n**>>\\>** mode()\n'logo'\n\n`turtle.``colormode`(_cmode=None_)\n\n参数:\n\n**cmode** \\-\\- 数值 1.0 或 255 其中之一\n\n返回颜色模式或将其设为 1.0 或 255。构成颜色三元组的 _r_, _g_, _b_ 数值必须在 0.._cmode_ 范围之内。\n\n**>>\\>** screen.colormode(1)\n**>>\\>** turtle.pencolor(240, 160, 80)\nTraceback (most recent call last):\n     ...\nTurtleGraphicsError: bad color sequence: (240, 160, 80)\n**>>\\>** screen.colormode()\n1.0\n**>>\\>** screen.colormode(255)\n**>>\\>** screen.colormode()\n255\n**>>\\>** turtle.pencolor(240,160,80)\n\n`turtle.``getcanvas`()\n\n返回此 TurtleScreen 的 Canvas 对象。供了解 Tkinter 的 Canvas 对象内部机理的人士使用。\n\n**>>\\>** cv = screen.getcanvas()\n**>>\\>** cv\n<turtle.ScrolledCanvas object ...>\n\n`turtle.``getshapes`()\n\n返回所有当前可用海龟形状的列表。\n\n**>>\\>** screen.getshapes()\n\\['arrow', 'blank', 'circle', ..., 'turtle'\\]\n\n`turtle.``register_shape`(_name_, _shape=None_)`turtle.``addshape`(_name_, _shape=None_)\n\n调用此函数有三种不同方式:\n\n1.  _name_ 为一个 gif 文件的文件名， _shape_ 为 `None`: 安装相应的图像形状。:>>>**>>\\>** screen.register_shape(\"turtle.gif\") 注解 当海龟转向时图像形状 _不会_ 转动，因此无法显示海龟的朝向!\n2.  _name_ 为指定的字符串，_shape_ 为由坐标值对构成的元组: 安装相应的多边形形状。**>>\\>** screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))\n3.  _name_ 为指定的字符串， 为一个 (复合) [`Shape`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape) 类对象: 安装相应的复合形状。\n\n将一个海龟形状加入 TurtleScreen 的形状列表。只有这样注册过的形状才能通过执行 `shape(shapename)` 命令来使用。`turtle.``turtles`()\n\n返回屏幕上的海龟列表。\n\n**>>\\>** **for** turtle **in** screen.turtles():\n**... **    turtle.color(\"red\")\n\n`turtle.``window_height`()\n\n返回海龟窗口的高度。:>>>\n\n**>>\\>** screen.window_height()\n480\n\n`turtle.``window_width`()\n\n返回海龟窗口的宽度。:>>>\n\n**>>\\>** screen.window_width()\n640\n\n### Screen 专有方法, 而非继承自 TurtleScreen\n\n`turtle.``bye`()\n\n关闭海龟绘图窗口。`turtle.``exitonclick`()\n\n将 bye() 方法绑定到 Screen 上的鼠标点击事件。\n\n如果配置字典中 \"using_IDLE\" 的值为 `False` (默认值) 则同时进入主事件循环。注: 如果启动 IDLE 时使用了 `-n` 开关 (无子进程)，`turtle.cfg` 中此数值应设为 `True`。在此情况下 IDLE 本身的主事件循环同样会作用于客户脚本。`turtle.``setup`(_width=\\_CFG\\[\"width\"\\], height=\\_CFG\\[\"height\"\\], startx=\\_CFG\\[\"leftright\"\\], starty=\\_CFG\\[\"topbottom\"\\]_)\n\n设置主窗口的大小和位置。默认参数值保存在配置字典中，可通过 `turtle.cfg` 文件进行修改。\n\n参数:\n\n**width** \\-\\- 如为一个整型数值，表示大小为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 50%**height** \\-\\- 如为一个整型数值，表示高度为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 75%**startx** \\-\\- 如为正值，表示初始位置距离屏幕左边缘多少像素，负值表示距离右边缘，`None` 表示窗口水平居中**starty** \\-\\- 如为正值，表示初始位置距离屏幕上边缘多少像素，负值表示距离下边缘，`None` 表示窗口垂直居中\n\n**>>\\>** screen.setup (width=200, height=200, startx=0, starty=0)\n**>>\\> **             _\\# sets window to 200x200 pixels, in upper left of screen_\n**>>\\>** screen.setup(width=.75, height=0.5, startx=None, starty=None)\n**>>\\> **             _\\# sets window to 75% of screen by 50% of screen and centers_\n\n`turtle.``title`(_titlestring_)\n\n参数:\n\n**titlestring** \\-\\- 一个字符串，显示为海龟绘图窗口的标题栏文本\n\n设置海龟窗口标题为 _titlestring_ 指定的文本。\n\n**>>\\>** screen.title(\"Welcome to the turtle zoo!\")\n\n公共类\n---\n\n_class _`turtle.``RawTurtle`(_canvas_)_class _`turtle.``RawPen`(_canvas_)\n\n参数:\n\n**canvas** \\-\\- 一个 `tkinter.Canvas` , [`ScrolledCanvas`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas) 或 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 类对象\n\n创建一个海龟。海龟对象具有 \"Turtle/RawTurtle 方法\" 一节所述的全部方法。_class _`turtle.``Turtle`\n\nRawTurtle 的子类，具有相同的接口，但其绘图场所为默认的 [`Screen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 类对象，在首次使用时自动创建。_class _`turtle.``TurtleScreen`(_cv_)\n\n参数:\n\n**cv** \\-\\- 一个 `tkinter.Canvas` 类对象\n\n提供面向屏幕的方法例如 `setbg()` 等。说明见上文。_class _`turtle.``Screen`\n\nTurtleScreen 的子类，[增加了四个方法](https://docs.python.org/zh-cn/3.7/library/turtle.html#screenspecific)._class _`turtle.``ScrolledCanvas`(_master_)\n\n参数:\n\n**master** \\-\\- 可容纳 ScrolledCanvas 的 Tkinter 部件，即添加了滚动条的 Tkinter-canvas\n\n由 Screen 类使用，使其能够自动提供一个 ScrolledCanvas 作为海龟的绘图场所。_class _`turtle.``Shape`(_type__, _data_)\n\n参数:\n\n**type_** \\-\\- 字符串 \"polygon\", \"image\", \"compound\" 其中之一\n\n实现形状的数据结构。`(type_, data)` 必须遵循以下定义:\n\n_type__\n\n_data_\n\n\"polygon\"\n\n一个多边形元组，即由坐标值对构成的元组\n\n\"image\"\n\n一个图片 (此形式仅限内部使用!)\n\n\"compound\"\n\n`None` (复合形状必须使用 [`addcomponent()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape.addcomponent) 方法来构建)\n\n`addcomponent`(_poly_, _fill_, _outline=None_)\n\n参数:\n\n**poly** \\-\\- 一个多边形，即由数值对构成的元组**fill** \\-\\- 一种颜色，将用来填充 _poly_ 指定的多边形**outline** \\-\\- 一种颜色，用于多边形的轮廓 (如有指定)\n\n示例:\n\n**>>\\>** poly = ((0,0),(10,-5),(0,10),(-10,-5))\n**>>\\>** s = Shape(\"compound\")\n**>>\\>** s.addcomponent(poly, \"red\", \"blue\")\n**>>\\>** _\\# ... add more components and then use register_shape()_\n\n参见 [复合形状](https://docs.python.org/zh-cn/3.7/library/turtle.html#compoundshapes)。_class _`turtle.``Vec2D`(_x_, _y_)\n\n一个二维矢量类，用来作为实现海龟绘图的辅助类。也可能在海龟绘图程序中使用。派生自元组，因此矢量也属于元组!\n\n提供的运算 (_a_, _b_ 为矢量, _k_ 为数值):\n\n*   `a + b` 矢量加法\n*   `a - b` 矢量减法\n*   `a * b` 内积\n*   `k * a` 和 `a * k` 与标量相乘\n*   `abs(a)` a 的绝对值\n*   `a.rotate(angle)` 旋转\n\n帮助与配置\n-----\n\n### 如何使用帮助\n\nScreen 和 Turtle 类的公用方法以文档字符串提供了详细的文档。因此可以利用 Python 帮助工具获取这些在线帮助信息:\n\n*   当使用 IDLE 时，输入函数/方法调用将弹出工具提示显示其签名和文档字符串的头几行。\n*   对文法或函数调用 [`help()`](https://docs.python.org/zh-cn/3.7/library/functions.html#help) 将显示其文档字符串:>>>**>>\\>** help(Screen.bgcolor) Help on method bgcolor in module turtle: bgcolor(self, *args) unbound turtle.Screen method Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. >>> screen.bgcolor(\"orange\") >>> screen.bgcolor() \"orange\" >>> screen.bgcolor(0.5,0,0.5) >>> screen.bgcolor() \"#800080\" **>>\\>** help(Turtle.penup) Help on method penup in module turtle: penup(self) unbound turtle.Turtle method Pull the pen up -- no drawing when moving. Aliases: penup | pu | up No argument >>> turtle.penup()\n*   方法对应函数的文档字符串的形式会有一些修改:>>>**>>\\>** help(bgcolor) Help on function bgcolor in module turtle: bgcolor(*args) Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. Example:: >>> bgcolor(\"orange\") >>> bgcolor() \"orange\" >>> bgcolor(0.5,0,0.5) >>> bgcolor() \"#800080\" **>>\\>** help(penup) Help on function penup in module turtle: penup() Pull the pen up -- no drawing when moving. Aliases: penup | pu | up No argument Example: >>> penup()\n\n这些修改版文档字符串是在导入时与方法对应函数的定义一起自动生成的。\n\n### 文档字符串翻译为不同的语言\n\n可使用工具创建一个字典，键为方法名，值为 Screen 和 Turtle 类公共方法的文档字符串。`turtle.``write_docstringdict`(_filename=\"turtle_docstringdict\"_)\n\n参数:\n\n**filename** \\-\\- 一个字符串，表示文件名\n\n创建文档字符串字典并将其写入 filename 指定的 Python 脚本文件。此函数必须显示地调用 (海龟绘图类并不使用此函数)。文档字符串字典将被写入到 Python 脚本文件 `_filename_.py`。该文件可作为模板用来将文档字符串翻译为不同语言。\n\n如果你 (或你的学生) 想使用本国语言版本的 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 在线帮助，你必须翻译文档字符串并保存结果文件，例如 `turtle_docstringdict_german.py`.\n\n如果你在 `turtle.cfg` 文件中加入了相应的条目，此字典将在导入模块时被读取并替代原有的英文版文档字符串。\n\n在撰写本文档时已经有了德语和意大利语版的文档字符串字典。(更多需求请联系 [glingl@aon.at](mailto:glingl%40aon.at))\n\n### 如何配置 Screen 和 Turtle\n\n内置的默认配置是模仿旧 turtle 模块的外观和行为，以便尽可能地与其保持兼容。\n\n如果你想使用不同的配置，以便更好地反映此模块的特性或是更适合你的需求，例如在课堂中使用，你可以准备一个配置文件 `turtle.cfg`，该文件将在导入模块时被读取并根据其中的设定修改模块配置。\n\n内置的配置对应以下的 turtle.cfg:\n\nwidth = 0.5\nheight = 0.75\nleftright = **None**\ntopbottom = **None**\ncanvwidth = 400\ncanvheight = 300\nmode = standard\ncolormode = 1.0\ndelay = 10\nundobuffersize = 1000\nshape = classic\npencolor = black\nfillcolor = black\nresizemode = noresize\nvisible = **True**\nlanguage = english\nexampleturtle = turtle\nexamplescreen = screen\ntitle = Python Turtle Graphics\nusing_IDLE = **False**\n\n选定条目的简短说明:\n\n*   开头的四行对应 `Screen.setup()` 方法的参数。\n*   第 5 和 6 行对应 `Screen.screensize()` 方法的参数。\n*   _shape_ 可以是任何内置形状，即: arrow, turtle 等。更多信息可用 `help(shape)` 查看。\n*   如果你想使用无填充色 (即令海龟变透明)，你必须写 `fillcolor = \"\"` (但 cfg 文件中所有非空字符串都不可加引号)。\n*   如果你想令海龟反映其状态，你必须使用 `resizemode = auto`。\n*   如果你设置语言例如 `language = italian` 则文档字符串字典 `turtle_docstringdict_italian.py` 将在导入模块时被加载 (如果导入路径即 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 的目录中存在此文件。\n*   _exampleturtle_ 和 _examplescreen_ 条目定义了相应对象在文档字符串中显示的名称。方法文档字符串转换为函数文档字符串时将从文档字符串中删去这些名称。\n*   _using_IDLE_: 如果你经常使用 IDLE 并启用其 -n 开关 (\"无子进程\") 则应将此项设为 `True`，这将阻止 [`exitonclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick) 进入主事件循环。\n\n`turtle.cfg` 文件可以保存于 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 所在目录，当前工作目录也可以有一个同名文件。后者会重载覆盖前者的设置。\n\n`Lib/turtledemo` 目录中也有一个 `turtle.cfg` 文件。你可以将其作为示例进行研究，并在运行演示时查看其作用效果 (但最好不要在演示查看器中运行)。\n\n[`turtledemo`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo) \\-\\-\\- 演示脚本集\n----------------------------------------------------------------------------------------------------\n\n[`turtledemo`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo) 包汇集了一组演示脚本。这些脚本可以通过以下命令打开所提供的演示查看器运行和查看:\n\npython -m turtledemo\n\n此外，你也可以单独运行其中的演示脚本。例如，:\n\npython -m turtledemo.bytedesign\n\n[`turtledemo`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo) 包目录中的内容:\n\n*   一个演示查看器 `__main__.py`，可用来查看脚本的源码并即时运行。\n*   多个脚本文件，演示 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 模块的不同特性。所有示例可通过 Examples 菜单打开。也可以单独运行每个脚本。\n*   一个 `turtle.cfg` 文件，作为说明如何编写并使用模块配置文件的示例模板。\n\n演示脚本清单如下:\n\n名称\n\n描述\n\n相关特性\n\nbytedesign\n\n复杂的传统海龟绘图模式\n\n`tracer()`, delay, `update()`\n\nchaos\n\n绘制 Verhulst 动态模型，演示通过计算机的运算可能会生成令人惊叹的结果\n\n世界坐标系\n\nclock\n\n绘制模拟时钟显示本机的当前时间\n\n海龟作为表针, ontimer\n\ncolormixer\n\n试验 r, g, b 颜色模式\n\n`ondrag()` 当鼠标拖动\n\nforest\n\n绘制 3 棵广度优先树\n\n随机化\n\nfractalcurves\n\n绘制 Hilbert & Koch 曲线\n\n递归\n\nlindenmayer\n\n文化数学 (印度装饰艺术)\n\nL-系统\n\nminimal_hanoi\n\n汉诺塔\n\n矩形海龟作为汉诺盘 (shape, shapesize)\n\nnim\n\n玩经典的“尼姆”游戏，开始时有三堆小棒，与电脑对战。\n\n海龟作为小棒，事件驱动 (鼠标, 键盘)\n\npaint\n\n超极简主义绘画程序\n\n`onclick()` 当鼠标点击\n\npeace\n\n初级技巧\n\n海龟: 外观与动画\n\npenrose\n\n非周期性地使用风筝和飞镖形状铺满平面\n\n`stamp()` 印章\n\nplanet\\_and\\_moon\n\n模拟引力系统\n\n复合开关, `Vec2D` 类\n\nround_dance\n\n两两相对并不断旋转舞蹈的海龟\n\n复合形状, clone shapesize, tilt, get_shapepoly, update\n\nsorting_animate\n\n动态演示不同的排序方法\n\n简单对齐, 随机化\n\ntree\n\n一棵 (图形化的) 广度优先树 (使用生成器)\n\n`clone()` 克隆\n\ntwo_canvases\n\n简单设计\n\n两块画布上的海龟\n\nwikipedia\n\n一个来自介绍海龟绘图的维基百科文章的图案\n\n`clone()`, `undo()`\n\nyinyang\n\n另一个初级示例\n\n`circle()` 画圆\n\n祝你玩得开心！","source":"_posts/turtle-海龟绘图-开发文档.md","raw":"title: turtle --- 海龟绘图 开发文档\nurl: 16.html\nid: 16\ncategories:\n  - Python初学\ndate: 2019-08-09 17:33:22\ntags:\n---\n海龟绘图 开发文档\nurl: 16.html\nid: 16\ncategories:\n  - Python初学\ndate: 2019-08-09 17:33:22\ntags:\n---\n海龟绘图 开发文档\nurl: 16.html\nid: 16\ncategories:\n  - Python初学\ntags:Python\n---\n\n**源码：** [Lib/turtle.py](https://github.com/python/cpython/tree/3.7/Lib/turtle.py)\n\n* * *\n\n概述\n--\n\n海龟绘图很适合用来引导孩子学习编程。最初来自于 Wally Feurzig 和 Seymour Papert 于 1966 年所创造的 Logo 编程语言。\n<!--more-->\n\n请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 `import turtle`，再执行 `turtle.forward(15)`，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 `turtle.right(25)`，它将原地右转 25 度。\n\nTurtle star\n\n使用海龟绘图可以编写重复执行简单动作的程序画出精细复杂的形状。\n\n![../_images/turtle-star.png](https://docs.python.org/zh-cn/3.7/_images/turtle-star.png)\n\n**from** **turtle** **import** *\ncolor('red', 'yellow')\nbegin_fill()\n**while** **True**:\n    forward(200)\n    left(170)\n    **if** abs(pos()) < 1:\n        **break**\nend_fill()\ndone()\n\n通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。\n\n[`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 模块是基于 Python 标准发行版 2.5 以来的同名模块重新编写并进行了功能扩展。\n\n新模块尽量保持了原模块的特点，并且(几乎)100%与其兼容。这就意味着初学编程者能够以交互方式使用模块的所有命令、类和方法——运行 IDLE 时注意加 `-n` 参数。\n\nturtle 模块提供面向对象和面向过程两种形式的海龟绘图基本组件。由于它使用 [`tkinter`](https://docs.python.org/zh-cn/3.7/library/tkinter.html#module-tkinter) 实现基本图形界面，因此需要安装了 Tk 支持的 Python 版本。\n\n面向对象的接口主要使用“2+2”个类：\n\n1.  [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 类定义图形窗口作为绘图海龟的运动场。它的构造器需要一个 `tkinter.Canvas` 或 [`ScrolledCanvas`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas) 作为参数。应在 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 作为某个程序的一部分的时候使用。[`Screen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 函数返回一个 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 子类的单例对象。此函数应在 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 作为独立绘图工具时使用。作为一个单例对象，其所属的类是不可被继承的。TurtleScreen/Screen 的所有方法还存在对应的函数，即作为面向过程的接口组成部分。\n2.  [`RawTurtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawTurtle) (别名: [`RawPen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawPen)) 类定义海龟对象在 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen)上绘图。它的构造器需要一个 Canvas, ScrolledCanvas 或 TurtleScreen 作为参数，以指定 RawTurtle 对象在哪里绘图。从 RawTurtle 派生出子类 [`Turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle) (别名: `Pen`)，该类对象在 [`Screen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 实例上绘图，如果实例不存在则会自动创建。RawTurtle/Turtle 的所有方法也存在对应的函数，即作为面向过程的接口组成部分。\n\n过程式接口提供与 [`Screen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 和 [`Turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle) 类的方法相对应的函数。函数名与对应的方法名相同。当 Screen 类的方法对应函数被调用时会自动创建一个 Screen 对象。当 Turtle 类的方法对应函数被调用时会自动创建一个 (匿名的) Turtle 对象。\n\n如果屏幕上需要有多个海龟，就必须使用面向对象的接口。\n\n注解\n\n以下文档给出了函数的参数列表。对于方法来说当然还有额外的第一个参数 _self_，这里省略了。\n\n可用的 Turtle 和 Screen 方法概览\n------------------------\n\n### Turtle 方法\n\n海龟动作移动和绘制[`forward()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.forward) | [`fd()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fd) 前进[`backward()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.backward) | [`bk()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bk) | [`back()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.back) 后退[`right()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.right) | [`rt()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.rt) 右转[`left()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.left) | [`lt()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.lt) 左转[`goto()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.goto) | [`setpos()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setpos) | [`setposition()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setposition) 前往/定位[`setx()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setx) 设置x坐标[`sety()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.sety) 设置y坐标[`setheading()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setheading) | [`seth()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.seth) 设置朝向[`home()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.home) 返回原点[`circle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.circle) 画圆[`dot()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.dot) 画点[`stamp()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp) 印章[`clearstamp()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamp) 清除印章[`clearstamps()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamps) 清除多个印章[`undo()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo) 撤消[`speed()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed) 速度获取海龟的状态[`position()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.position) | [`pos()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos) 位置[`towards()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.towards) 目标方向[`xcor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.xcor) x坐标[`ycor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ycor) y坐标[`heading()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.heading) 朝向[`distance()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.distance) 距离设置与度量单位[`degrees()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees) 角度[`radians()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians) 弧度画笔控制绘图状态[`pendown()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pendown) | [`pd()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pd) | [`down()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.down) 画笔落下[`penup()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.penup) | [`pu()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pu) | [`up()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.up) 画笔抬起[`pensize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pensize) | [`width()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.width) 画笔粗细[`pen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen) 画笔[`isdown()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isdown) 画笔是否落下颜色控制[`color()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.color) 颜色[`pencolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor) 画笔颜色[`fillcolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor) 填充颜色填充[`filling()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.filling) 是否填充[`begin_fill()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill) 开始填充[`end_fill()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_fill) 结束填充更多绘图控制[`reset()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset) 重置[`clear()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear) 清空[`write()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.write) 书写海龟状态可见性[`showturtle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.showturtle) | [`st()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.st) 显示海龟[`hideturtle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.hideturtle) | [`ht()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ht) 隐藏海龟[`isvisible()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isvisible) 是否可见外观[`shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shape) 形状[`resizemode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resizemode) 大小调整模式[`shapesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize) | [`turtlesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtlesize) 形状大小[`shearfactor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shearfactor) 剪切因子[`settiltangle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.settiltangle) 设置倾角[`tiltangle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tiltangle) 倾角[`tilt()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tilt) 倾斜[`shapetransform()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapetransform) 变形[`get_shapepoly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_shapepoly) 获取形状多边形使用事件[`onclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick) 当鼠标点击[`onrelease()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onrelease) 当鼠标释放[`ondrag()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ondrag) 当鼠标拖动特殊海龟方法[`begin_poly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_poly) 开始记录多边形[`end_poly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_poly) 结束记录多边形[`get_poly()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_poly) 获取多边形[`clone()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clone) 克隆[`getturtle()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getturtle) | [`getpen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getpen) 获取海龟画笔[`getscreen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getscreen) 获取屏幕[`setundobuffer()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setundobuffer) 设置撤消缓冲区[`undobufferentries()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undobufferentries) 撤消缓冲区条目数\n\n### TurtleScreen/Screen 方法\n\n窗口控制[`bgcolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgcolor) 背景颜色[`bgpic()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgpic) 背景图片[`clear()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear) | [`clearscreen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearscreen) 清屏[`reset()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset) | [`resetscreen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resetscreen) 重置[`screensize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.screensize) 屏幕大小[`setworldcoordinates()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setworldcoordinates) 设置世界坐标系动画控制[`delay()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay) 延迟[`tracer()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tracer) 追踪[`update()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.update) 更新使用屏幕事件[`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 监听[`onkey()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkey) | [`onkeyrelease()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeyrelease) 当键盘按下并释放[`onkeypress()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeypress) 当键盘按下[`onclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick) | [`onscreenclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onscreenclick) 当点击屏幕[`ontimer()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ontimer) 当达到定时[`mainloop()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mainloop) | [`done()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.done) 主循环设置与特殊方法[`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode) 模式[`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode) 颜色模式[`getcanvas()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getcanvas) 获取画布[`getshapes()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getshapes) 获取形状[`register_shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape) | [`addshape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.addshape) 添加形状[`turtles()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtles) 所有海龟[`window_height()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_height) 窗口高度[`window_width()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_width) 窗口宽度输入方法[`textinput()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.textinput) 文本输入[`numinput()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.numinput) 数字输入Screen 专有方法[`bye()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bye) 退出[`exitonclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick) 当点击时退出[`setup()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setup) 设置[`title()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.title) 标题\n\nRawTurtle/Turtle 方法和对应函数\n------------------------\n\n本节中的大部分示例都使用 Turtle 类的一个实例，命名为 `turtle`。\n\n### 海龟动作\n\n`turtle.``forward`(_distance_)`turtle.``fd`(_distance_)\n\n参数:\n\n**distance** \\-\\- 一个数值 (整型或浮点型)\n\n海龟前进 _distance_ 指定的距离，方向为海龟的朝向。\n\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.forward(25)\n**>>\\>** turtle.position()\n(25.00,0.00)\n**>>\\>** turtle.forward(-75)\n**>>\\>** turtle.position()\n(-50.00,0.00)\n\n`turtle.``back`(_distance_)`turtle.``bk`(_distance_)`turtle.``backward`(_distance_)\n\n参数:\n\n**distance** \\-\\- 一个数值\n\n海龟后退 _distance_ 指定的距离，方向与海龟的朝向相反。不改变海龟的朝向。\n\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.backward(30)\n**>>\\>** turtle.position()\n(-30.00,0.00)\n\n`turtle.``right`(_angle_)`turtle.``rt`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值 (整型或浮点型)\n\n海龟右转 _angle_ 个单位。(单位默认为角度，但可通过 [`degrees()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees) 和 [`radians()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians) 函数改变设置。) 角度的正负由海龟模式确定，参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode)。\n\n**>>\\>** turtle.heading()\n22.0\n**>>\\>** turtle.right(45)\n**>>\\>** turtle.heading()\n337.0\n\n`turtle.``left`(_angle_)`turtle.``lt`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值 (整型或浮点型)\n\n海龟左转 _angle_ 个单位。(单位默认为角度，但可通过 [`degrees()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees) 和 [`radians()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians) 函数改变设置。) 角度的正负由海龟模式确定，参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode)。\n\n**>>\\>** turtle.heading()\n22.0\n**>>\\>** turtle.left(45)\n**>>\\>** turtle.heading()\n67.0\n\n`turtle.``goto`(_x_, _y=None_)`turtle.``setpos`(_x_, _y=None_)`turtle.``setposition`(_x_, _y=None_)\n\n参数:\n\n**x** \\-\\- 一个数值或数值对/向量**y** \\-\\- 一个数值或 `None`\n\n如果 _y_ 为 `None`，_x_ 应为一个表示坐标的数值对或 [`Vec2D`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D) 类对象 (例如 [`pos()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos) 返回的对象).\n\n海龟移动到一个绝对坐标。如果画笔已落下将会画线。不改变海龟的朝向。\n\n**>>\\>** tp = turtle.pos()\n**>>\\>** tp\n(0.00,0.00)\n**>>\\>** turtle.setpos(60,30)\n**>>\\>** turtle.pos()\n(60.00,30.00)\n**>>\\>** turtle.setpos((20,80))\n**>>\\>** turtle.pos()\n(20.00,80.00)\n**>>\\>** turtle.setpos(tp)\n**>>\\>** turtle.pos()\n(0.00,0.00)\n\n`turtle.``setx`(_x_)\n\n参数:\n\n**x** \\-\\- 一个数值 (整型或浮点型)\n\n设置海龟的横坐标为 _x_，纵坐标保持不变。\n\n**>>\\>** turtle.position()\n(0.00,240.00)\n**>>\\>** turtle.setx(10)\n**>>\\>** turtle.position()\n(10.00,240.00)\n\n`turtle.``sety`(_y_)\n\n参数:\n\n**y** \\-\\- 一个数值 (整型或浮点型)\n\n设置海龟的纵坐标为 _y_，横坐标保持不变。\n\n**>>\\>** turtle.position()\n(0.00,40.00)\n**>>\\>** turtle.sety(-10)\n**>>\\>** turtle.position()\n(0.00,-10.00)\n\n`turtle.``setheading`(_to_angle_)`turtle.``seth`(_to_angle_)\n\n参数:\n\n**to_angle** \\-\\- 一个数值 (整型或浮点型)\n\n设置海龟的朝向为 _to_angle_。以下是以角度表示的几个常用方向：\n\n标准模式\n\nlogo 模式\n\n0 - 东\n\n0 - 北\n\n90 - 北\n\n90 - 东\n\n180 - 西\n\n180 - 南\n\n270 - 南\n\n270 - 西\n\n**>>\\>** turtle.setheading(90)\n**>>\\>** turtle.heading()\n90.0\n\n`turtle.``home`()\n\n海龟移至初始坐标 (0,0)，并设置朝向为初始方向 (由海龟模式确定，参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode))。\n\n**>>\\>** turtle.heading()\n90.0\n**>>\\>** turtle.position()\n(0.00,-10.00)\n**>>\\>** turtle.home()\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n\n`turtle.``circle`(_radius_, _extent=None_, _steps=None_)\n\n参数:\n\n**radius** \\-\\- 一个数值**extent** \\-\\- 一个数值 (或 `None`)**steps** \\-\\- 一个整型数 (或 `None`)\n\n绘制一个 _radius_ 指定半径的圆。圆心在海龟左边 _radius_ 个单位；_extent_ 为一个夹角，用来决定绘制圆的一部分。如未指定 _extent*则绘制整个圆。如果 *extent_ 不是完整圆周，则以当前画笔位置为一个端点绘制圆弧。如果 _radius_ 为正值则朝逆时针方向绘制圆弧，否则朝顺时针方向。最终海龟的朝向会依据 _extent_ 的值而改变。\n\n圆实际是以其内切正多边形来近似表示的，其边的数量由 _steps_ 指定。如果未指定边数则会自动确定。此方法也可用来绘制正多边形。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n**>>\\>** turtle.circle(50)\n**>>\\>** turtle.position()\n(-0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n**>>\\>** turtle.circle(120, 180)  _\\# draw a semicircle_\n**>>\\>** turtle.position()\n(0.00,240.00)\n**>>\\>** turtle.heading()\n180.0\n\n`turtle.``dot`(_size=None_, _*color_)\n\n参数:\n\n**size** \\-\\- 一个整型数 >= 1 (如果指定)**color** \\-\\- 一个颜色字符串或颜色数值元组\n\n绘制一个直径为 _size_，颜色为 _color_ 的圆点。如果 _size_ 未指定，则直径取 pensize+4 和 2*pensize 中的较大值。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.dot()\n**>>\\>** turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n**>>\\>** turtle.position()\n(100.00,-0.00)\n**>>\\>** turtle.heading()\n0.0\n\n`turtle.``stamp`()\n\n在海龟当前位置印制一个海龟形状。返回该印章的 stamp_id，印章可以通过调用 `clearstamp(stamp_id)` 来删除。\n\n**>>\\>** turtle.color(\"blue\")\n**>>\\>** turtle.stamp()\n11\n**>>\\>** turtle.fd(50)\n\n`turtle.``clearstamp`(_stampid_)\n\n参数:\n\n**stampid** \\-\\- 一个整型数，必须是之前 [`stamp()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp) 调用的返回值\n\n删除 _stampid_ 指定的印章。\n\n**>>\\>** turtle.position()\n(150.00,-0.00)\n**>>\\>** turtle.color(\"blue\")\n**>>\\>** astamp = turtle.stamp()\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.position()\n(200.00,-0.00)\n**>>\\>** turtle.clearstamp(astamp)\n**>>\\>** turtle.position()\n(200.00,-0.00)\n\n`turtle.``clearstamps`(_n=None_)\n\n参数:\n\n**n** \\-\\- 一个整型数 (或 `None`)\n\n删除全部或前/后 _n_ 个海龟印章。如果 _n_ 为 `None` 则删除全部印章，如果 _n_ \\> 0 则删除前 _n_ 个印章，否则如果 _n_< 0 则删除后 _n_ 个印章。\n\n**>>\\>** **for** i **in** range(8):\n**... **    turtle.stamp(); turtle.fd(30)\n13\n14\n15\n16\n17\n18\n19\n20\n**>>\\>** turtle.clearstamps(2)\n**>>\\>** turtle.clearstamps(-2)\n**>>\\>** turtle.clearstamps()\n\n`turtle.``undo`()\n\n撤消 (或连续撤消) 最近的一个 (或多个) 海龟动作。可撤消的次数由撤消缓冲区的大小决定。\n\n**>>\\>** **for** i **in** range(4):\n**... **    turtle.fd(50); turtle.lt(80)\n**...**\n**>>\\>** **for** i **in** range(8):\n**... **    turtle.undo()\n\n`turtle.``speed`(_speed=None_)\n\n参数:\n\n**speed** \\-\\- 一个 0..10 范围内的整型数或速度字符串 (见下)\n\n设置海龟移动的速度为 0..10 表示的整型数值。如未指定参数则返回当前速度。\n\n如果输入数值大于 10 或小于 0.5 则速度设为 0。速度字符串与速度值的对应关系如下:\n\n*   \"fastest\": 0 最快\n*   \"fast\": 10 快\n*   \"normal\": 6 正常\n*   \"slow\": 3 慢\n*   \"slowest\": 1 最慢\n\n速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。\n\n注意: _speed_ = 0 表示 _没有_ 动画效果。forward/back 将使海龟向前/向后跳跃，同样的 left/right 将使海龟立即改变朝向。\n\n**>>\\>** turtle.speed()\n3\n**>>\\>** turtle.speed('normal')\n**>>\\>** turtle.speed()\n6\n**>>\\>** turtle.speed(9)\n**>>\\>** turtle.speed()\n9\n\n### 获取海龟的状态\n\n`turtle.``position`()`turtle.``pos`()\n\n返回海龟当前的坐标 (x,y) (为 [`Vec2D`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D) 矢量类对象)。\n\n**>>\\>** turtle.pos()\n(440.00,-0.00)\n\n`turtle.``towards`(_x_, _y=None_)\n\n参数:\n\n**x** \\-\\- 一个数值或数值对/矢量，或一个海龟实例**y** \\-\\- 一个数值——如果 _x_ 是一个数值，否则为 `None`\n\n从海龟位置到由 (x,y)，矢量或另一海龟对应位置的连线的夹角。此数值依赖于海龟初始朝向 - 由 \"standard\"/\"world\" 或 \"logo\" 模式设置所决定)。\n\n**>>\\>** turtle.goto(10, 10)\n**>>\\>** turtle.towards(0,0)\n225.0\n\n`turtle.``xcor`()\n\n返回海龟的 x 坐标。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(50)\n**>>\\>** turtle.forward(100)\n**>>\\>** turtle.pos()\n(64.28,76.60)\n**>>\\>** **print**(round(turtle.xcor(), 5))\n64.27876\n\n`turtle.``ycor`()\n\n返回海龟的 y 坐标。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(60)\n**>>\\>** turtle.forward(100)\n**>>\\>** **print**(turtle.pos())\n(50.00,86.60)\n**>>\\>** **print**(round(turtle.ycor(), 5))\n86.60254\n\n`turtle.``heading`()\n\n返回海龟当前的朝向 (数值依赖于海龟模式参见 [`mode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode))。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(67)\n**>>\\>** turtle.heading()\n67.0\n\n`turtle.``distance`(_x_, _y=None_)\n\n参数:\n\n**x** \\-\\- 一个数值或数值对/矢量，或一个海龟实例**y** \\-\\- 一个数值——如果 _x_ 是一个数值，否则为 `None`\n\n返回从海龟位置到由 (x,y)，适量或另一海龟对应位置的单位距离。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.distance(30,40)\n50.0\n**>>\\>** turtle.distance((30,40))\n50.0\n**>>\\>** joe = Turtle()\n**>>\\>** joe.forward(77)\n**>>\\>** turtle.distance(joe)\n77.0\n\n### 度量单位设置\n\n`turtle.``degrees`(_fullcircle=360.0_)\n\n参数:\n\n**fullcircle** \\-\\- 一个数值\n\n设置角度的度量单位，即设置一个圆周为多少 \"度\"。默认值为 360 度。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(90)\n**>>\\>** turtle.heading()\n90.0\n\nChange angle measurement unit to grad (also known as gon,\ngrade, or gradian and equals 1/100-th of the right angle.)\n**>>\\>** turtle.degrees(400.0)\n**>>\\>** turtle.heading()\n100.0\n**>>\\>** turtle.degrees(360)\n**>>\\>** turtle.heading()\n90.0\n\n`turtle.``radians`()\n\n设置角度的度量单位为弧度。其值等于 `degrees(2*math.pi)`。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.left(90)\n**>>\\>** turtle.heading()\n90.0\n**>>\\>** turtle.radians()\n**>>\\>** turtle.heading()\n1.5707963267948966\n\n### 画笔控制\n\n#### 绘图状态\n\n`turtle.``pendown`()`turtle.``pd`()`turtle.``down`()\n\n画笔落下 \\-\\- 移动时将画线。`turtle.``penup`()`turtle.``pu`()`turtle.``up`()\n\n画笔抬起 \\-\\- 移动时不画线。`turtle.``pensize`(_width=None_)`turtle.``width`(_width=None_)\n\n参数:\n\n**width** \\-\\- 一个正数值\n\n设置线条的粗细为 _width_ 或返回该值。如果 resizemode 设为 \"auto\" 并且 turtleshape 为多边形，该多边形也以同样组细的线条绘制。如未指定参数，则返回当前的 pensize。\n\n**>>\\>** turtle.pensize()\n1\n**>>\\>** turtle.pensize(10)   _\\# from here on lines of width 10 are drawn_\n\n`turtle.``pen`(_pen=None_, _**pendict_)\n\n参数:\n\n**pen** \\-\\- 一个包含部分或全部下列键的字典**pendict** \\-\\- 一个或多个以下列键为关键字的关键字参数\n\n返回或设置画笔的属性，以一个包含以下键值对的 \"画笔字典\" 表示:\n\n*   \"shown\": True/False\n*   \"pendown\": True/False\n*   \"pencolor\": 颜色字符串或颜色元组\n*   \"fillcolor\": 颜色字符串或颜色元组\n*   \"pensize\": 正数值\n*   \"speed\": 0..10 范围内的数值\n*   \"resizemode\": \"auto\" 或 \"user\" 或 \"noresize\"\n*   \"stretchfactor\": (正数值, 正数值)\n*   \"outline\": 正数值\n*   \"tilt\": 数值\n\n此字典可作为后续调用 [`pen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen) 时的参数，以恢复之前的画笔状态。另外还可将这些属性作为关键词参数提交。使用此方式可以用一条语句设置画笔的多个属性。\n\n**>>\\>** turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n**>>\\>** sorted(turtle.pen().items())\n\\[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)\\]\n**>>\\>** penstate=turtle.pen()\n**>>\\>** turtle.color(\"yellow\", \"\")\n**>>\\>** turtle.penup()\n**>>\\>** sorted(turtle.pen().items())\\[:3\\]\n\\[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')\\]\n**>>\\>** turtle.pen(penstate, fillcolor=\"green\")\n**>>\\>** sorted(turtle.pen().items())\\[:3\\]\n\\[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')\\]\n\n`turtle.``isdown`()\n\n如果画笔落下返回 `True`，如果画笔抬起返回 `False`。\n\n**>>\\>** turtle.penup()\n**>>\\>** turtle.isdown()\nFalse\n**>>\\>** turtle.pendown()\n**>>\\>** turtle.isdown()\nTrue\n\n#### 颜色控制\n\n`turtle.``pencolor`(_*args_)\n\n返回或设置画笔颜色。\n\n允许以下四种输入格式:`pencolor()`返回以颜色描述字符串或元组 (见示例) 表示的当前画笔颜色。可用作其他 color/pencolor/fillcolor 调用的输入。`pencolor(colorstring)`设置画笔颜色为 _colorstring_ 指定的 Tk 颜色描述字符串，例如 `\"red\"`、`\"yellow\"` 或 `\"#33cc8c\"`。`pencolor((r, g, b))`设置画笔颜色为以 _r_, _g_, _b_ 元组表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 [`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode))。`pencolor(r, g, b)`设置画笔颜色为以 _r_, _g_, _b_ 表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode。\n\n如果 turtleshape 为多边形，该多边形轮廓也以新设置的画笔颜色绘制。\n\n**>>\\>** colormode()\n1.0\n**>>\\>** turtle.pencolor()\n'red'\n**>>\\>** turtle.pencolor(\"brown\")\n**>>\\>** turtle.pencolor()\n'brown'\n**>>\\>** tup = (0.2, 0.8, 0.55)\n**>>\\>** turtle.pencolor(tup)\n**>>\\>** turtle.pencolor()\n(0.2, 0.8, 0.5490196078431373)\n**>>\\>** colormode(255)\n**>>\\>** turtle.pencolor()\n(51.0, 204.0, 140.0)\n**>>\\>** turtle.pencolor('#32c18f')\n**>>\\>** turtle.pencolor()\n(50.0, 193.0, 143.0)\n\n`turtle.``fillcolor`(_*args_)\n\n返回或设置填充颜色。\n\n允许以下四种输入格式:`fillcolor()`返回以颜色描述字符串或元组 (见示例) 表示的当前填充颜色。可用作其他 color/pencolor/fillcolor 调用的输入。`fillcolor(colorstring)`设置填充颜色为 _colorstring_ 指定的 Tk 颜色描述字符串，例如 `\"red\"`、`\"yellow\"` 或 `\"#33cc8c\"`。`fillcolor((r, g, b))`设置填充颜色为以 _r_, _g_, _b_ 元组表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 [`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode))。`fillcolor(r, g, b)`设置填充颜色为 _r_, _g_, _b_ 表示的 RGB 颜色。_r_, _g_, _b_ 的取值范围应为 0..colormode。\n\n如果 turtleshape 为多边形，该多边形内部也以新设置的填充颜色填充。\n\n**>>\\>** turtle.fillcolor(\"violet\")\n**>>\\>** turtle.fillcolor()\n'violet'\n**>>\\>** turtle.pencolor()\n(50.0, 193.0, 143.0)\n**>>\\>** turtle.fillcolor((50, 193, 143))  _\\# Integers, not floats_\n**>>\\>** turtle.fillcolor()\n(50.0, 193.0, 143.0)\n**>>\\>** turtle.fillcolor('#ffffff')\n**>>\\>** turtle.fillcolor()\n(255.0, 255.0, 255.0)\n\n`turtle.``color`(_*args_)\n\n返回或设置画笔颜色和填充颜色。\n\n允许多种输入格式。使用如下 0 至 3 个参数:`color()`返回以一对颜色描述字符串或元组表示的当前画笔颜色和填充颜色，两者可分别由 [`pencolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor) 和 [`fillcolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor) 返回。`color(colorstring)`, `color((r,g,b))`, `color(r,g,b)`输入格式与 [`pencolor()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor) 相同，同时设置填充颜色和画笔颜色为指定的值。`color(colorstring1, colorstring2)`, `color((r1,g1,b1), (r2,g2,b2))`相当于 `pencolor(colorstring1)` 加 `fillcolor(colorstring2)`，使用其他输入格式的方法也与之类似。\n\n如果 turtleshape 为多边形，该多边形轮廓与填充也使用新设置的颜色。\n\n**>>\\>** turtle.color(\"red\", \"green\")\n**>>\\>** turtle.color()\n('red', 'green')\n**>>\\>** color(\"#285078\", \"#a0c8f0\")\n**>>\\>** color()\n((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))\n\n另参见: Screen 方法 [`colormode()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode)。\n\n#### 填充\n\n`turtle.``filling`()\n\n返回填充状态 (填充为 `True`，否则为 `False`)。\n\n**>>\\>** turtle.begin_fill()\n**>>\\>** **if** turtle.filling():\n**... **   turtle.pensize(5)\n**...** **else**:\n**... **   turtle.pensize(3)\n\n`turtle.``begin_fill`()\n\n在绘制要填充的形状之前调用。`turtle.``end_fill`()\n\n填充上次调用 [`begin_fill()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill) 之后绘制的形状。\n\n**>>\\>** turtle.color(\"black\", \"red\")\n**>>\\>** turtle.begin_fill()\n**>>\\>** turtle.circle(80)\n**>>\\>** turtle.end_fill()\n\n#### 更多绘图控制\n\n`turtle.``reset`()\n\n从屏幕中删除海龟的绘图，海龟回到原点并设置所有变量为默认值。\n\n**>>\\>** turtle.goto(0,-22)\n**>>\\>** turtle.left(100)\n**>>\\>** turtle.position()\n(0.00,-22.00)\n**>>\\>** turtle.heading()\n100.0\n**>>\\>** turtle.reset()\n**>>\\>** turtle.position()\n(0.00,0.00)\n**>>\\>** turtle.heading()\n0.0\n\n`turtle.``clear`()\n\n从屏幕中删除指定海龟的绘图。不移动海龟。海龟的状态和位置以及其他海龟的绘图不受影响。`turtle.``write`(_arg_, _move=False_, _align=\"left\"_, _font=(\"Arial\"_, _8_, _\"normal\")_)\n\n参数:\n\n**arg** \\-\\- 要书写到 TurtleScreen 的对象**move** \\-\\- True/False**align** \\-\\- 字符串 \"left\", \"center\" 或 \"right\"**font** \\-\\- 一个三元组 (fontname, fontsize, fonttype)\n\n书写文本 - _arg_ 指定的字符串 \\- 到当前海龟位置，_align_ 指定对齐方式 (\"left\", \"center\" 或 right\")，font 指定字体。如果 _move_ 为 True，画笔会移动到文本的右下角。默认 _move_ 为 `False`。\n\n**>>\\>** turtle.write(\"Home = \", **True**, align=\"center\")\n**>>\\>** turtle.write((0,0), **True**)\n\n### 海龟状态\n\n#### 可见性\n\n`turtle.``hideturtle`()`turtle.``ht`()\n\n使海龟不可见。当你绘制复杂图形时这是个好主意，因为隐藏海龟可显著加快绘制速度。\n\n**>>\\>** turtle.hideturtle()\n\n`turtle.``showturtle`()`turtle.``st`()\n\n使海龟可见。\n\n**>>\\>** turtle.showturtle()\n\n`turtle.``isvisible`()\n\n如果海龟显示返回 `True`，如果海龟隐藏返回 `False`。\n\n**>>\\>** turtle.hideturtle()\n**>>\\>** turtle.isvisible()\nFalse\n**>>\\>** turtle.showturtle()\n**>>\\>** turtle.isvisible()\nTrue\n\n#### 外观\n\n`turtle.``shape`(_name=None_)\n\n参数:\n\n**name** \\-\\- 一个有效的形状名字符串\n\n设置海龟形状为 _name_ 指定的形状名，如未指定形状名则返回当前的形状名。_name_ 指定的形状名应存在于 TurtleScreen 的 shape 字典中。多边形的形状初始时有以下几种: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\"。要了解如何处理形状请参看 Screen 方法 [`register_shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape)。\n\n**>>\\>** turtle.shape()\n'classic'\n**>>\\>** turtle.shape(\"turtle\")\n**>>\\>** turtle.shape()\n'turtle'\n\n`turtle.``resizemode`(_rmode=None_)\n\n参数:\n\n**rmode** \\-\\- 字符串 \"auto\", \"user\", \"noresize\" 其中之一\n\n设置大小调整模式为以下值之一: \"auto\", \"user\", \"noresize\"。如未指定 _rmode_ 则返回当前的大小调整模式。不同的大小调整模式的效果如下:\n\n*   \"auto\": 根据画笔粗细值调整海龟的外观。\n*   \"user\": 根据拉伸因子和轮廓宽度 (outline) 值调整海龟的外观，两者是由 [`shapesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize) 设置的。\n*   \"noresize\": 不调整海龟的外观大小。\n\n大小调整模式 (\"user\") 会在 [`shapesize()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize) 带参数调用时生效。\n\n**>>\\>** turtle.resizemode()\n'noresize'\n**>>\\>** turtle.resizemode(\"auto\")\n**>>\\>** turtle.resizemode()\n'auto'\n\n`turtle.``shapesize`(_stretch_wid=None_, _stretch_len=None_, _outline=None_)`turtle.``turtlesize`(_stretch_wid=None_, _stretch_len=None_, _outline=None_)\n\n参数:\n\n**stretch_wid** \\-\\- 正数值**stretch_len** \\-\\- 正数值**outline** \\-\\- 正数值\n\n返回或设置画笔的属性 x/y-拉伸因子和/或轮廓。设置大小调整模式为 \"user\"。当且仅当大小调整模式设为 \"user\" 时海龟会基于其拉伸因子调整外观: _stretch_wid_ 为垂直于其朝向的宽度拉伸因子，_stretch_len_ 为平等于其朝向的长度拉伸因子，决定形状轮廓线的粗细。\n\n**>>\\>** turtle.shapesize()\n(1.0, 1.0, 1)\n**>>\\>** turtle.resizemode(\"user\")\n**>>\\>** turtle.shapesize(5, 5, 12)\n**>>\\>** turtle.shapesize()\n(5, 5, 12)\n**>>\\>** turtle.shapesize(outline=8)\n**>>\\>** turtle.shapesize()\n(5, 5, 8)\n\n`turtle.``shearfactor`(_shear=None_)\n\n参数:\n\n**shear** \\-\\- 数值 (可选)\n\n设置或返回当前的剪切因子。根据 share 指定的剪切因子即剪切角度的切线来剪切海龟形状。_不_ 改变海龟的朝向 (移动方向)。如未指定 shear 参数: 返回当前的剪切因子即剪切角度的切线，与海龟朝向平行的线条将被剪切。\n\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.shearfactor(0.5)\n**>>\\>** turtle.shearfactor()\n0.5\n\n`turtle.``tilt`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值\n\n海龟形状自其当前的倾角转动 _angle_ 指定的角度，但 _不_ 改变海龟的朝向 (移动方向)。\n\n**>>\\>** turtle.reset()\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.tilt(30)\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.tilt(30)\n**>>\\>** turtle.fd(50)\n\n`turtle.``settiltangle`(_angle_)\n\n参数:\n\n**angle** \\-\\- 一个数值\n\n旋转海龟形状使其指向 _angle_ 指定的方向，忽略其当前的倾角，_不_ 改变海龟的朝向 (移动方向)。\n\n**>>\\>** turtle.reset()\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.settiltangle(45)\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.settiltangle(-45)\n**>>\\>** turtle.fd(50)\n\n_3.1 版后已移除._`turtle.``tiltangle`(_angle=None_)\n\n参数:\n\n**angle** \\-\\- 一个数值 (可选)\n\n设置或返回当前的倾角。如果指定 angle 则旋转海龟形状使其指向 angle 指定的方向，忽略其当前的倾角。_不_改变海龟的朝向 (移动方向)。如果未指定 angle: 返回当前的倾角，即海龟形状的方向和海龟朝向 (移动方向) 之间的夹角。\n\n**>>\\>** turtle.reset()\n**>>\\>** turtle.shape(\"circle\")\n**>>\\>** turtle.shapesize(5,2)\n**>>\\>** turtle.tilt(45)\n**>>\\>** turtle.tiltangle()\n45.0\n\n`turtle.``shapetransform`(_t11=None_, _t12=None_, _t21=None_, _t22=None_)\n\n参数:\n\n**t11** \\-\\- 一个数值 (可选)**t12** \\-\\- 一个数值 (可选)**t21** \\-\\- 一个数值 (可选)**t12** \\-\\- 一个数值 (可选)\n\n设置或返回海龟形状的当前变形矩阵。\n\n如不指定任何矩阵元素，则返回以4元素元组表示的变形矩阵。否则使用指定元素设置变形矩阵改变海龟形状，矩阵第一排的值为 t11, t12，第二排的值为 t21, t22。行列式 t11 * t22 - t12 * t21 的值不能为零，否则会出错。根据指定的矩阵修改拉伸因子，剪切因子和倾角。\n\n**>>\\>** turtle = Turtle()\n**>>\\>** turtle.shape(\"square\")\n**>>\\>** turtle.shapesize(4,2)\n**>>\\>** turtle.shearfactor(-0.5)\n**>>\\>** turtle.shapetransform()\n(4.0, -1.0, -0.0, 2.0)\n\n`turtle.``get_shapepoly`()\n\n返回以坐标值对元组表示的当前形状多边形。这可以用于定义一个新形状或一个复合形状的多个组成部分。\n\n**>>\\>** turtle.shape(\"square\")\n**>>\\>** turtle.shapetransform(4, -1, 0, 2)\n**>>\\>** turtle.get_shapepoly()\n((50, -20), (30, 20), (-50, 20), (-30, -20))\n\n### 使用事件\n\n`turtle.``onclick`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n将 _fun_ 指定的函数绑定到鼠标点击此海龟事件。如果 _fun_ 值为 `None`，则移除现有的绑定。以下为使用匿名海龟即过程式的示例:\n\n**>>\\>** **def** turn(x, y):\n**... **    left(180)\n**...**\n**>>\\>** onclick(turn)  _\\# Now clicking into the turtle will turn it._\n**>>\\>** onclick(None)  _\\# event-binding will be removed_\n\n`turtle.``onrelease`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n将 _fun_ 指定的函数绑定到在此海龟上释放鼠标按键事件。如果 _fun_ 值为 `None`，则移除现有的绑定。\n\n**>>\\>** **class** **MyTurtle**(Turtle):\n**... **    **def** glow(self,x,y):\n**... **        self.fillcolor(\"red\")\n**... **    **def** unglow(self,x,y):\n**... **        self.fillcolor(\"\")\n**...**\n**>>\\>** turtle = MyTurtle()\n**>>\\>** turtle.onclick(turtle.glow)     _\\# clicking on turtle turns fillcolor red,_\n**>>\\>** turtle.onrelease(turtle.unglow) _\\# releasing turns it to transparent._\n\n`turtle.``ondrag`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n将 _fun_ 指定的函数绑定到在此海龟上移动鼠标事件。如果 _fun_ 值为 `None`，则移除现有的绑定。\n\n注: 在海龟上移动鼠标事件之前应先发生在此海龟上点击鼠标事件。\n\n**>>\\>** turtle.ondrag(turtle.goto)\n\n在此之后点击并拖动海龟可在屏幕上手绘线条 (如果画笔为落下)。\n\n### 特殊海龟方法\n\n`turtle.``begin_poly`()\n\n开始记录多边形的顶点。当前海龟位置为多边形的第一个顶点。`turtle.``end_poly`()\n\n停止记录多边形的顶点。当前海龟位置为多边形的最后一个顶点。它将连线到第一个顶点。`turtle.``get_poly`()\n\n返回最新记录的多边形。\n\n**>>\\>** turtle.home()\n**>>\\>** turtle.begin_poly()\n**>>\\>** turtle.fd(100)\n**>>\\>** turtle.left(20)\n**>>\\>** turtle.fd(30)\n**>>\\>** turtle.left(60)\n**>>\\>** turtle.fd(50)\n**>>\\>** turtle.end_poly()\n**>>\\>** p = turtle.get_poly()\n**>>\\>** register_shape(\"myFavouriteShape\", p)\n\n`turtle.``clone`()\n\n创建并返回海龟的克隆体，具有相同的位置、朝向和海龟属性。\n\n**>>\\>** mick = Turtle()\n**>>\\>** joe = mick.clone()\n\n`turtle.``getturtle`()`turtle.``getpen`()\n\n返回海龟对象自身。唯一合理的用法: 作为一个函数来返回 \"匿名海龟\":\n\n**>>\\>** pet = getturtle()\n**>>\\>** pet.fd(50)\n**>>\\>** pet\n<turtle.Turtle object at 0x...>\n\n`turtle.``getscreen`()\n\n返回作为海龟绘图场所的 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 类对象。该对象将可调用 TurtleScreen 方法。\n\n**>>\\>** ts = turtle.getscreen()\n**>>\\>** ts\n<turtle._Screen object at 0x...>\n**>>\\>** ts.bgcolor(\"pink\")\n\n`turtle.``setundobuffer`(_size_)\n\n参数:\n\n**size** \\-\\- 一个整型数值或 `None`\n\n设置或禁用撤消缓冲区。如果 _size_ 为一个整型数则将开辟一个指定大小的空缓冲区。_size_ 表示可使用 [`undo()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo)方法/函数撤消的海龟命令的次数上限。如果 _size_ 为 `None` 则禁用撤消缓冲区。\n\n**>>\\>** turtle.setundobuffer(42)\n\n`turtle.``undobufferentries`()\n\n返回撤销缓冲区里的条目数。\n\n**>>\\>** **while** undobufferentries():\n**... **    undo()\n\n### 复合形状\n\n要使用由多个不同颜色多边形构成的复合海龟形状，你必须明确地使用辅助类 [`Shape`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape)，具体步骤如下:\n\n1.  创建一个空 Shape 对象，类型为 \"compound\"。\n2.  按照需要使用 `addcomponent()` 方法向此对象添加多个部件。例如:**>>\\>** s = Shape(\"compound\") **>>\\>** poly1 = ((0,0),(10,-5),(0,10),(-10,-5)) **>>\\>** s.addcomponent(poly1, \"red\", \"blue\") **>>\\>** poly2 = ((0,0),(10,-5),(-10,-5)) **>>\\>** s.addcomponent(poly2, \"blue\", \"red\")\n3.  接下来将 Shape 对象添加到 Screen 对象的形状列表并使用它:**>>\\>** register_shape(\"myshape\", s) **>>\\>** shape(\"myshape\")\n\n注解\n\n[`Shape`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape) 类在 [`register_shape()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape) 方法的内部以多种方式使用。应用程序编写者 _只有_ 在使用上述的复合形状时才需要处理 Shape 类。\n\nTurtleScreen/Screen 方法及对应函数\n---------------------------\n\n本节中的大部分示例都使用 TurtleScreen 类的一个实例，命名为 `screen`。\n\n### 窗口控制\n\n`turtle.``bgcolor`(_*args_)\n\n参数:\n\n**args** \\-\\- 一个颜色字符串或三个取值范围 0..colormode 内的数值或一个取值范围相同的数值3元组\n\n设置或返回 TurtleScreen 的背景颜色。\n\n**>>\\>** screen.bgcolor(\"orange\")\n**>>\\>** screen.bgcolor()\n'orange'\n**>>\\>** screen.bgcolor(\"#800080\")\n**>>\\>** screen.bgcolor()\n(128.0, 0.0, 128.0)\n\n`turtle.``bgpic`(_picname=None_)\n\n参数:\n\n**picname** \\-\\- 一个字符串, gif-文件名, `\"nopic\"`, 或 `None`\n\n设置背景图片或返回当前背景图片名称。如果 _picname_ 为一个文件名，则将相应图片设为背景。如果 _picname_ 为 `\"nopic\"`，则删除当前背景图片。如果 _picname_ 为 `None`，则返回当前背景图片文件名。:>>>\n\n**>>\\>** screen.bgpic()\n'nopic'\n**>>\\>** screen.bgpic(\"landscape.gif\")\n**>>\\>** screen.bgpic()\n\"landscape.gif\"\n\n`turtle.``clear`()`turtle.``clearscreen`()\n\n从中删除所有海龟的全部绘图。将已清空的 TurtleScreen 重置为初始状态: 白色背景，无背景片，无事件绑定并启用追踪。\n\n注解\n\n此 TurtleScreen 方法作为全局函数时只有一个名字 `clearscreen`。全局函数 `clear` 所对应的是 Turtle 方法 `clear`。`turtle.``reset`()`turtle.``resetscreen`()\n\n重置屏幕上的所有海龟为其初始状态。\n\n注解\n\n此 TurtleScreen 方法作为全局函数时只有一个名字 `resetscreen`。全局函数 `reset` 所对应的是 Turtle 方法 `reset`。`turtle.``screensize`(_canvwidth=None_, _canvheight=None_, _bg=None_)\n\n参数:\n\n**canvwidth** \\-\\- 正整型数，以像素表示画布的新宽度值**canvheight** \\-\\- 正整型数，以像素表示画面的新高度值**bg** \\-\\- 颜色字符串或颜色元组，新的背景颜色\n\n如未指定任何参数，则返回当前的 (canvaswidth, canvasheight)。否则改变作为海龟绘图场所的画布大小。不改变绘图窗口。要观察画布的隐藏区域，可以使用滚动条。通过此方法可以令之前绘制于画布之外的图形变为可见。\n\n**>>\\>** screen.screensize()\n(400, 300)\n**>>\\>** screen.screensize(2000,1500)\n**>>\\>** screen.screensize()\n(2000, 1500)\n\n也可以用来寻找意外逃走的海龟 ;-)`turtle.``setworldcoordinates`(_llx_, _lly_, _urx_, _ury_)\n\n参数:\n\n**llx** \\-\\- 一个数值, 画布左下角的 x-坐标**lly** \\-\\- 一个数值, 画布左下角的 y-坐标**urx** \\-\\- 一个数值, 画面右上角的 x-坐标**ury** \\-\\- 一个数值, 画布右上角的 y-坐标\n\n设置用户自定义坐标系并在必要时切换模式为 \"world\"。这会执行一次 `screen.reset()`。如果 \"world\" 模式已激活，则所有图形将根据新的坐标系重绘。\n\n**注意**: 在用户自定义坐标系中，角度可能显得扭曲。\n\n**>>\\>** screen.reset()\n**>>\\>** screen.setworldcoordinates(-50,-7.5,50,7.5)\n**>>\\>** **for** _ **in** range(72):\n**... **    left(10)\n**...**\n**>>\\>** **for** _ **in** range(8):\n**... **    left(45); fd(2)   _\\# a regular octagon_\n\n### 动画控制\n\n`turtle.``delay`(_delay=None_)\n\n参数:\n\n**delay** \\-\\- 正整型数\n\n设置或返回以毫秒数表示的延迟值 _delay_。(这约等于连续两次画布刷新的间隔时间。) 绘图延迟越长，动画速度越慢。\n\n可选参数:\n\n**>>\\>** screen.delay()\n10\n**>>\\>** screen.delay(5)\n**>>\\>** screen.delay()\n5\n\n`turtle.``tracer`(_n=None_, _delay=None_)\n\n参数:\n\n**n** \\-\\- 非负整型数**delay** \\-\\- 非负整型数\n\n启用/禁用海龟动画并设置刷新图形的延迟时间。如果指定 _n_ 值，则只有每第 n 次屏幕刷新会实际执行。(可被用来加速复杂图形的绘制。) 如果调用时不带参数，则返回当前保存的 n 值。第二个参数设置延迟值 (参见 [`delay()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay))。\n\n**>>\\>** screen.tracer(8, 25)\n**>>\\>** dist = 2\n**>>\\>** **for** i **in** range(200):\n**... **    fd(dist)\n**... **    rt(90)\n**... **    dist += 2\n\n`turtle.``update`()\n\n执行一次 TurtleScreen 刷新。在禁用追踪时使用。\n\n另参见 RawTurtle/Turtle 方法 [`speed()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed)。\n\n### 使用屏幕事件\n\n`turtle.``listen`(_xdummy=None_, _ydummy=None_)\n\n设置焦点到 TurtleScreen (以便接收按键事件)。使用两个 Dummy 参数以便能够传递 [`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 给 onclick 方法。`turtle.``onkey`(_fun_, _key_)`turtle.``onkeyrelease`(_fun_, _key_)\n\n参数:\n\n**fun** \\-\\- 一个无参数的函数或 `None`**key** \\-\\- 一个字符串: 键 (例如 \"a\") 或键标 (例如 \"space\")\n\n绑定 _fun_ 指定的函数到按键释放事件。如果 _fun_ 值为 `None`，则移除事件绑定。注: 为了能够注册按键事件，TurtleScreen 必须得到焦点。(参见 method [`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 方法。)\n\n**>>\\>** **def** f():\n**... **    fd(50)\n**... **    lt(60)\n**...**\n**>>\\>** screen.onkey(f, \"Up\")\n**>>\\>** screen.listen()\n\n`turtle.``onkeypress`(_fun_, _key=None_)\n\n参数:\n\n**fun** \\-\\- 一个无参数的函数或 `None`**key** \\-\\- 一个字符串: 键 (例如 \"a\") 或键标 (例如 \"space\")\n\n绑定 _fun_ 指定的函数到指定键的按下事件。如未指定键则绑定到任意键的按下事件。注: 为了能够注册按键事件，必须得到焦点。(参见 [`listen()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen) 方法。)\n\n**>>\\>** **def** f():\n**... **    fd(50)\n**...**\n**>>\\>** screen.onkey(f, \"Up\")\n**>>\\>** screen.listen()\n\n`turtle.``onclick`(_fun_, _btn=1_, _add=None_)`turtle.``onscreenclick`(_fun_, _btn=1_, _add=None_)\n\n参数:\n\n**fun** \\-\\- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。**btn** \\-\\- 鼠标按钮编号，默认值为 1 (鼠标左键)**add** -- `True` 或 `False` \\-\\- 如为 `True` 则将添加一个新绑定，否则将取代先前的绑定\n\n绑定 _fun_ 指定的函数到鼠标点击屏幕事件。如果 _fun_ 值为 `None`，则移除现有的绑定。\n\n以下示例使用一个 TurtleScreen 实例 `screen` 和一个 Turtle 实例 turtle:\n\n**>>\\>** screen.onclick(turtle.goto) _\\# Subsequently clicking into the TurtleScreen will_\n**>>\\> **                            _\\# make the turtle move to the clicked point._\n**>>\\>** screen.onclick(None)        _\\# remove event binding again_\n\n注解\n\n此 TurtleScreen 方法作为全局函数时只有一个名字 `onscreenclick`。全局函数 `onclick` 所对应的是 Turtle 方法 `onclick`。`turtle.``ontimer`(_fun_, _t=0_)\n\n参数:\n\n**fun** \\-\\- 一个无参数的函数**t** \\-\\- 一个数值 >= 0\n\n安装一个计时器，在 _t_ 毫秒后调用 _fun_ 函数。\n\n**>>\\>** running = True\n**>>\\>** **def** f():\n**... **    **if** running:\n**... **        fd(50)\n**... **        lt(60)\n**... **        screen.ontimer(f, 250)\n**>>\\>** f()   _\\### makes the turtle march around_\n**>>\\>** running = False\n\n`turtle.``mainloop`()`turtle.``done`()\n\n开始事件循环 \\- 调用 Tkinter 的 mainloop 函数。必须作为一个海龟绘图程序的结束语句。如果一个脚本是在以 -n 模式 (无子进程) 启动的 IDLE 中运行时 _不可_ 使用 \\- 用于实现海龟绘图的交互功能。:>>>\n\n**>>\\>** screen.mainloop()\n\n### 输入方法\n\n`turtle.``textinput`(_title_, _prompt_)\n\n参数:\n\n**title** \\-\\- 字符串**prompt** \\-\\- 字符串\n\n弹出一个对话框窗口用来输入一个字符串。形参 title 为对话框窗口的标题，prompt 为一条文本，通常用来提示要输入什么信息。返回输入的字符串。如果对话框被取消则返回 `None`。:>>>\n\n**>>\\>** screen.textinput(\"NIM\", \"Name of first player:\")\n\n`turtle.``numinput`(_title_, _prompt_, _default=None_, _minval=None_, _maxval=None_)\n\n参数:\n\n**title** \\-\\- 字符串**prompt** \\-\\- 字符串**default** \\-\\- 数值 (可选)**minval** \\-\\- 数值 (可选)**maxval** \\-\\- 数值 (可选)\n\n弹出一个对话框窗口用来输入一个数值。title 为对话框窗口的标题，prompt 为一条文本，通常用来描述要输入的数值信息。default: 默认值, minval: 可输入的最小值, maxval: 可输入的最大值。输入数值的必须在指定的 minval .. maxval 范围之内，否则将给出一条提示，对话框保持打开等待修改。返回输入的数值。如果对话框被取消则返回 `None`。:>>>\n\n**>>\\>** screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)\n\n### 设置与特殊方法\n\n`turtle.``mode`(_mode=None_)\n\n参数:\n\n**mode** \\-\\- 字符串 \"standard\", \"logo\" 或 \"world\" 其中之一\n\n设置海龟模式 (\"standard\", \"logo\" 或 \"world\") 并执行重置。如未指定模式则返回当前的模式。\n\n\"standard\" 模式与旧的 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 兼容。\"logo\" 模式与大部分 Logo 海龟绘图兼容。\"world\" 模式使用用户自定义的 \"世界坐标系\"。**注意**: 在此模式下，如果 `x/y` 单位比率不等于 1 则角度会显得扭曲。\n\n模式\n\n初始海龟朝向\n\n正数角度\n\n\"standard\"\n\n朝右 (东)\n\n逆时针\n\n\"logo\"\n\n朝上 (北)\n\n顺时针\n\n**>>\\>** mode(\"logo\")   _\\# resets turtle heading to north_\n**>>\\>** mode()\n'logo'\n\n`turtle.``colormode`(_cmode=None_)\n\n参数:\n\n**cmode** \\-\\- 数值 1.0 或 255 其中之一\n\n返回颜色模式或将其设为 1.0 或 255。构成颜色三元组的 _r_, _g_, _b_ 数值必须在 0.._cmode_ 范围之内。\n\n**>>\\>** screen.colormode(1)\n**>>\\>** turtle.pencolor(240, 160, 80)\nTraceback (most recent call last):\n     ...\nTurtleGraphicsError: bad color sequence: (240, 160, 80)\n**>>\\>** screen.colormode()\n1.0\n**>>\\>** screen.colormode(255)\n**>>\\>** screen.colormode()\n255\n**>>\\>** turtle.pencolor(240,160,80)\n\n`turtle.``getcanvas`()\n\n返回此 TurtleScreen 的 Canvas 对象。供了解 Tkinter 的 Canvas 对象内部机理的人士使用。\n\n**>>\\>** cv = screen.getcanvas()\n**>>\\>** cv\n<turtle.ScrolledCanvas object ...>\n\n`turtle.``getshapes`()\n\n返回所有当前可用海龟形状的列表。\n\n**>>\\>** screen.getshapes()\n\\['arrow', 'blank', 'circle', ..., 'turtle'\\]\n\n`turtle.``register_shape`(_name_, _shape=None_)`turtle.``addshape`(_name_, _shape=None_)\n\n调用此函数有三种不同方式:\n\n1.  _name_ 为一个 gif 文件的文件名， _shape_ 为 `None`: 安装相应的图像形状。:>>>**>>\\>** screen.register_shape(\"turtle.gif\") 注解 当海龟转向时图像形状 _不会_ 转动，因此无法显示海龟的朝向!\n2.  _name_ 为指定的字符串，_shape_ 为由坐标值对构成的元组: 安装相应的多边形形状。**>>\\>** screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))\n3.  _name_ 为指定的字符串， 为一个 (复合) [`Shape`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape) 类对象: 安装相应的复合形状。\n\n将一个海龟形状加入 TurtleScreen 的形状列表。只有这样注册过的形状才能通过执行 `shape(shapename)` 命令来使用。`turtle.``turtles`()\n\n返回屏幕上的海龟列表。\n\n**>>\\>** **for** turtle **in** screen.turtles():\n**... **    turtle.color(\"red\")\n\n`turtle.``window_height`()\n\n返回海龟窗口的高度。:>>>\n\n**>>\\>** screen.window_height()\n480\n\n`turtle.``window_width`()\n\n返回海龟窗口的宽度。:>>>\n\n**>>\\>** screen.window_width()\n640\n\n### Screen 专有方法, 而非继承自 TurtleScreen\n\n`turtle.``bye`()\n\n关闭海龟绘图窗口。`turtle.``exitonclick`()\n\n将 bye() 方法绑定到 Screen 上的鼠标点击事件。\n\n如果配置字典中 \"using_IDLE\" 的值为 `False` (默认值) 则同时进入主事件循环。注: 如果启动 IDLE 时使用了 `-n` 开关 (无子进程)，`turtle.cfg` 中此数值应设为 `True`。在此情况下 IDLE 本身的主事件循环同样会作用于客户脚本。`turtle.``setup`(_width=\\_CFG\\[\"width\"\\], height=\\_CFG\\[\"height\"\\], startx=\\_CFG\\[\"leftright\"\\], starty=\\_CFG\\[\"topbottom\"\\]_)\n\n设置主窗口的大小和位置。默认参数值保存在配置字典中，可通过 `turtle.cfg` 文件进行修改。\n\n参数:\n\n**width** \\-\\- 如为一个整型数值，表示大小为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 50%**height** \\-\\- 如为一个整型数值，表示高度为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 75%**startx** \\-\\- 如为正值，表示初始位置距离屏幕左边缘多少像素，负值表示距离右边缘，`None` 表示窗口水平居中**starty** \\-\\- 如为正值，表示初始位置距离屏幕上边缘多少像素，负值表示距离下边缘，`None` 表示窗口垂直居中\n\n**>>\\>** screen.setup (width=200, height=200, startx=0, starty=0)\n**>>\\> **             _\\# sets window to 200x200 pixels, in upper left of screen_\n**>>\\>** screen.setup(width=.75, height=0.5, startx=None, starty=None)\n**>>\\> **             _\\# sets window to 75% of screen by 50% of screen and centers_\n\n`turtle.``title`(_titlestring_)\n\n参数:\n\n**titlestring** \\-\\- 一个字符串，显示为海龟绘图窗口的标题栏文本\n\n设置海龟窗口标题为 _titlestring_ 指定的文本。\n\n**>>\\>** screen.title(\"Welcome to the turtle zoo!\")\n\n公共类\n---\n\n_class _`turtle.``RawTurtle`(_canvas_)_class _`turtle.``RawPen`(_canvas_)\n\n参数:\n\n**canvas** \\-\\- 一个 `tkinter.Canvas` , [`ScrolledCanvas`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas) 或 [`TurtleScreen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen) 类对象\n\n创建一个海龟。海龟对象具有 \"Turtle/RawTurtle 方法\" 一节所述的全部方法。_class _`turtle.``Turtle`\n\nRawTurtle 的子类，具有相同的接口，但其绘图场所为默认的 [`Screen`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen) 类对象，在首次使用时自动创建。_class _`turtle.``TurtleScreen`(_cv_)\n\n参数:\n\n**cv** \\-\\- 一个 `tkinter.Canvas` 类对象\n\n提供面向屏幕的方法例如 `setbg()` 等。说明见上文。_class _`turtle.``Screen`\n\nTurtleScreen 的子类，[增加了四个方法](https://docs.python.org/zh-cn/3.7/library/turtle.html#screenspecific)._class _`turtle.``ScrolledCanvas`(_master_)\n\n参数:\n\n**master** \\-\\- 可容纳 ScrolledCanvas 的 Tkinter 部件，即添加了滚动条的 Tkinter-canvas\n\n由 Screen 类使用，使其能够自动提供一个 ScrolledCanvas 作为海龟的绘图场所。_class _`turtle.``Shape`(_type__, _data_)\n\n参数:\n\n**type_** \\-\\- 字符串 \"polygon\", \"image\", \"compound\" 其中之一\n\n实现形状的数据结构。`(type_, data)` 必须遵循以下定义:\n\n_type__\n\n_data_\n\n\"polygon\"\n\n一个多边形元组，即由坐标值对构成的元组\n\n\"image\"\n\n一个图片 (此形式仅限内部使用!)\n\n\"compound\"\n\n`None` (复合形状必须使用 [`addcomponent()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape.addcomponent) 方法来构建)\n\n`addcomponent`(_poly_, _fill_, _outline=None_)\n\n参数:\n\n**poly** \\-\\- 一个多边形，即由数值对构成的元组**fill** \\-\\- 一种颜色，将用来填充 _poly_ 指定的多边形**outline** \\-\\- 一种颜色，用于多边形的轮廓 (如有指定)\n\n示例:\n\n**>>\\>** poly = ((0,0),(10,-5),(0,10),(-10,-5))\n**>>\\>** s = Shape(\"compound\")\n**>>\\>** s.addcomponent(poly, \"red\", \"blue\")\n**>>\\>** _\\# ... add more components and then use register_shape()_\n\n参见 [复合形状](https://docs.python.org/zh-cn/3.7/library/turtle.html#compoundshapes)。_class _`turtle.``Vec2D`(_x_, _y_)\n\n一个二维矢量类，用来作为实现海龟绘图的辅助类。也可能在海龟绘图程序中使用。派生自元组，因此矢量也属于元组!\n\n提供的运算 (_a_, _b_ 为矢量, _k_ 为数值):\n\n*   `a + b` 矢量加法\n*   `a - b` 矢量减法\n*   `a * b` 内积\n*   `k * a` 和 `a * k` 与标量相乘\n*   `abs(a)` a 的绝对值\n*   `a.rotate(angle)` 旋转\n\n帮助与配置\n-----\n\n### 如何使用帮助\n\nScreen 和 Turtle 类的公用方法以文档字符串提供了详细的文档。因此可以利用 Python 帮助工具获取这些在线帮助信息:\n\n*   当使用 IDLE 时，输入函数/方法调用将弹出工具提示显示其签名和文档字符串的头几行。\n*   对文法或函数调用 [`help()`](https://docs.python.org/zh-cn/3.7/library/functions.html#help) 将显示其文档字符串:>>>**>>\\>** help(Screen.bgcolor) Help on method bgcolor in module turtle: bgcolor(self, *args) unbound turtle.Screen method Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. >>> screen.bgcolor(\"orange\") >>> screen.bgcolor() \"orange\" >>> screen.bgcolor(0.5,0,0.5) >>> screen.bgcolor() \"#800080\" **>>\\>** help(Turtle.penup) Help on method penup in module turtle: penup(self) unbound turtle.Turtle method Pull the pen up -- no drawing when moving. Aliases: penup | pu | up No argument >>> turtle.penup()\n*   方法对应函数的文档字符串的形式会有一些修改:>>>**>>\\>** help(bgcolor) Help on function bgcolor in module turtle: bgcolor(*args) Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. Example:: >>> bgcolor(\"orange\") >>> bgcolor() \"orange\" >>> bgcolor(0.5,0,0.5) >>> bgcolor() \"#800080\" **>>\\>** help(penup) Help on function penup in module turtle: penup() Pull the pen up -- no drawing when moving. Aliases: penup | pu | up No argument Example: >>> penup()\n\n这些修改版文档字符串是在导入时与方法对应函数的定义一起自动生成的。\n\n### 文档字符串翻译为不同的语言\n\n可使用工具创建一个字典，键为方法名，值为 Screen 和 Turtle 类公共方法的文档字符串。`turtle.``write_docstringdict`(_filename=\"turtle_docstringdict\"_)\n\n参数:\n\n**filename** \\-\\- 一个字符串，表示文件名\n\n创建文档字符串字典并将其写入 filename 指定的 Python 脚本文件。此函数必须显示地调用 (海龟绘图类并不使用此函数)。文档字符串字典将被写入到 Python 脚本文件 `_filename_.py`。该文件可作为模板用来将文档字符串翻译为不同语言。\n\n如果你 (或你的学生) 想使用本国语言版本的 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 在线帮助，你必须翻译文档字符串并保存结果文件，例如 `turtle_docstringdict_german.py`.\n\n如果你在 `turtle.cfg` 文件中加入了相应的条目，此字典将在导入模块时被读取并替代原有的英文版文档字符串。\n\n在撰写本文档时已经有了德语和意大利语版的文档字符串字典。(更多需求请联系 [glingl@aon.at](mailto:glingl%40aon.at))\n\n### 如何配置 Screen 和 Turtle\n\n内置的默认配置是模仿旧 turtle 模块的外观和行为，以便尽可能地与其保持兼容。\n\n如果你想使用不同的配置，以便更好地反映此模块的特性或是更适合你的需求，例如在课堂中使用，你可以准备一个配置文件 `turtle.cfg`，该文件将在导入模块时被读取并根据其中的设定修改模块配置。\n\n内置的配置对应以下的 turtle.cfg:\n\nwidth = 0.5\nheight = 0.75\nleftright = **None**\ntopbottom = **None**\ncanvwidth = 400\ncanvheight = 300\nmode = standard\ncolormode = 1.0\ndelay = 10\nundobuffersize = 1000\nshape = classic\npencolor = black\nfillcolor = black\nresizemode = noresize\nvisible = **True**\nlanguage = english\nexampleturtle = turtle\nexamplescreen = screen\ntitle = Python Turtle Graphics\nusing_IDLE = **False**\n\n选定条目的简短说明:\n\n*   开头的四行对应 `Screen.setup()` 方法的参数。\n*   第 5 和 6 行对应 `Screen.screensize()` 方法的参数。\n*   _shape_ 可以是任何内置形状，即: arrow, turtle 等。更多信息可用 `help(shape)` 查看。\n*   如果你想使用无填充色 (即令海龟变透明)，你必须写 `fillcolor = \"\"` (但 cfg 文件中所有非空字符串都不可加引号)。\n*   如果你想令海龟反映其状态，你必须使用 `resizemode = auto`。\n*   如果你设置语言例如 `language = italian` 则文档字符串字典 `turtle_docstringdict_italian.py` 将在导入模块时被加载 (如果导入路径即 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 的目录中存在此文件。\n*   _exampleturtle_ 和 _examplescreen_ 条目定义了相应对象在文档字符串中显示的名称。方法文档字符串转换为函数文档字符串时将从文档字符串中删去这些名称。\n*   _using_IDLE_: 如果你经常使用 IDLE 并启用其 -n 开关 (\"无子进程\") 则应将此项设为 `True`，这将阻止 [`exitonclick()`](https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick) 进入主事件循环。\n\n`turtle.cfg` 文件可以保存于 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 所在目录，当前工作目录也可以有一个同名文件。后者会重载覆盖前者的设置。\n\n`Lib/turtledemo` 目录中也有一个 `turtle.cfg` 文件。你可以将其作为示例进行研究，并在运行演示时查看其作用效果 (但最好不要在演示查看器中运行)。\n\n[`turtledemo`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo) \\-\\-\\- 演示脚本集\n----------------------------------------------------------------------------------------------------\n\n[`turtledemo`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo) 包汇集了一组演示脚本。这些脚本可以通过以下命令打开所提供的演示查看器运行和查看:\n\npython -m turtledemo\n\n此外，你也可以单独运行其中的演示脚本。例如，:\n\npython -m turtledemo.bytedesign\n\n[`turtledemo`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo) 包目录中的内容:\n\n*   一个演示查看器 `__main__.py`，可用来查看脚本的源码并即时运行。\n*   多个脚本文件，演示 [`turtle`](https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle) 模块的不同特性。所有示例可通过 Examples 菜单打开。也可以单独运行每个脚本。\n*   一个 `turtle.cfg` 文件，作为说明如何编写并使用模块配置文件的示例模板。\n\n演示脚本清单如下:\n\n名称\n\n描述\n\n相关特性\n\nbytedesign\n\n复杂的传统海龟绘图模式\n\n`tracer()`, delay, `update()`\n\nchaos\n\n绘制 Verhulst 动态模型，演示通过计算机的运算可能会生成令人惊叹的结果\n\n世界坐标系\n\nclock\n\n绘制模拟时钟显示本机的当前时间\n\n海龟作为表针, ontimer\n\ncolormixer\n\n试验 r, g, b 颜色模式\n\n`ondrag()` 当鼠标拖动\n\nforest\n\n绘制 3 棵广度优先树\n\n随机化\n\nfractalcurves\n\n绘制 Hilbert & Koch 曲线\n\n递归\n\nlindenmayer\n\n文化数学 (印度装饰艺术)\n\nL-系统\n\nminimal_hanoi\n\n汉诺塔\n\n矩形海龟作为汉诺盘 (shape, shapesize)\n\nnim\n\n玩经典的“尼姆”游戏，开始时有三堆小棒，与电脑对战。\n\n海龟作为小棒，事件驱动 (鼠标, 键盘)\n\npaint\n\n超极简主义绘画程序\n\n`onclick()` 当鼠标点击\n\npeace\n\n初级技巧\n\n海龟: 外观与动画\n\npenrose\n\n非周期性地使用风筝和飞镖形状铺满平面\n\n`stamp()` 印章\n\nplanet\\_and\\_moon\n\n模拟引力系统\n\n复合开关, `Vec2D` 类\n\nround_dance\n\n两两相对并不断旋转舞蹈的海龟\n\n复合形状, clone shapesize, tilt, get_shapepoly, update\n\nsorting_animate\n\n动态演示不同的排序方法\n\n简单对齐, 随机化\n\ntree\n\n一棵 (图形化的) 广度优先树 (使用生成器)\n\n`clone()` 克隆\n\ntwo_canvases\n\n简单设计\n\n两块画布上的海龟\n\nwikipedia\n\n一个来自介绍海龟绘图的维基百科文章的图案\n\n`clone()`, `undo()`\n\nyinyang\n\n另一个初级示例\n\n`circle()` 画圆\n\n祝你玩得开心！","slug":"turtle-海龟绘图-开发文档","published":1,"updated":"2019-08-09T09:37:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz3xz49v000hvovqkae0wmrm","content":"<p>海龟绘图 开发文档<br>url: 16.html<br>id: 16<br>categories:</p>\n<ul>\n<li>Python初学<br>date: 2019-08-09 17:33:22<br>tags:</li>\n</ul>\n<hr>\n<p>海龟绘图 开发文档<br>url: 16.html<br>id: 16<br>categories:</p>\n<ul>\n<li>Python初学<br>tags:Python</li>\n</ul>\n<hr>\n<p><strong>源码：</strong> <a href=\"https://github.com/python/cpython/tree/3.7/Lib/turtle.py\" target=\"_blank\" rel=\"noopener\">Lib/turtle.py</a></p>\n<hr>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>海龟绘图很适合用来引导孩子学习编程。最初来自于 Wally Feurzig 和 Seymour Papert 于 1966 年所创造的 Logo 编程语言。</p>\n<a id=\"more\"></a>\n\n<p>请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 <code>import turtle</code>，再执行 <code>turtle.forward(15)</code>，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 <code>turtle.right(25)</code>，它将原地右转 25 度。</p>\n<p>Turtle star</p>\n<p>使用海龟绘图可以编写重复执行简单动作的程序画出精细复杂的形状。</p>\n<p><img src=\"https://docs.python.org/zh-cn/3.7/_images/turtle-star.png\" alt=\"../_images/turtle-star.png\"></p>\n<p><strong>from</strong> <strong>turtle</strong> <strong>import</strong> *\ncolor(‘red’, ‘yellow’)<br>begin_fill()<br><strong>while</strong> <strong>True</strong>:\n    forward(200)<br>    left(170)<br>    <strong>if</strong> abs(pos()) &lt; 1:<br>        <strong>break</strong><br>end_fill()<br>done()</p>\n<p>通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。</p>\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 模块是基于 Python 标准发行版 2.5 以来的同名模块重新编写并进行了功能扩展。</p>\n<p>新模块尽量保持了原模块的特点，并且(几乎)100%与其兼容。这就意味着初学编程者能够以交互方式使用模块的所有命令、类和方法——运行 IDLE 时注意加 <code>-n</code> 参数。</p>\n<p>turtle 模块提供面向对象和面向过程两种形式的海龟绘图基本组件。由于它使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/tkinter.html#module-tkinter\" target=\"_blank\" rel=\"noopener\"><code>tkinter</code></a> 实现基本图形界面，因此需要安装了 Tk 支持的 Python 版本。</p>\n<p>面向对象的接口主要使用“2+2”个类：</p>\n<ol>\n<li><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 类定义图形窗口作为绘图海龟的运动场。它的构造器需要一个 <code>tkinter.Canvas</code> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas\" target=\"_blank\" rel=\"noopener\"><code>ScrolledCanvas</code></a> 作为参数。应在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 作为某个程序的一部分的时候使用。<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen()</code></a> 函数返回一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 子类的单例对象。此函数应在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 作为独立绘图工具时使用。作为一个单例对象，其所属的类是不可被继承的。TurtleScreen/Screen 的所有方法还存在对应的函数，即作为面向过程的接口组成部分。</li>\n<li><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawTurtle\" target=\"_blank\" rel=\"noopener\"><code>RawTurtle</code></a> (别名: <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawPen\" target=\"_blank\" rel=\"noopener\"><code>RawPen</code></a>) 类定义海龟对象在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a>上绘图。它的构造器需要一个 Canvas, ScrolledCanvas 或 TurtleScreen 作为参数，以指定 RawTurtle 对象在哪里绘图。从 RawTurtle 派生出子类 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle\" target=\"_blank\" rel=\"noopener\"><code>Turtle</code></a> (别名: <code>Pen</code>)，该类对象在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen</code></a> 实例上绘图，如果实例不存在则会自动创建。RawTurtle/Turtle 的所有方法也存在对应的函数，即作为面向过程的接口组成部分。</li>\n</ol>\n<p>过程式接口提供与 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle\" target=\"_blank\" rel=\"noopener\"><code>Turtle</code></a> 类的方法相对应的函数。函数名与对应的方法名相同。当 Screen 类的方法对应函数被调用时会自动创建一个 Screen 对象。当 Turtle 类的方法对应函数被调用时会自动创建一个 (匿名的) Turtle 对象。</p>\n<p>如果屏幕上需要有多个海龟，就必须使用面向对象的接口。</p>\n<p>注解</p>\n<p>以下文档给出了函数的参数列表。对于方法来说当然还有额外的第一个参数 _self_，这里省略了。</p>\n<h2 id=\"可用的-Turtle-和-Screen-方法概览\"><a href=\"#可用的-Turtle-和-Screen-方法概览\" class=\"headerlink\" title=\"可用的 Turtle 和 Screen 方法概览\"></a>可用的 Turtle 和 Screen 方法概览</h2><h3 id=\"Turtle-方法\"><a href=\"#Turtle-方法\" class=\"headerlink\" title=\"Turtle 方法\"></a>Turtle 方法</h3><p>海龟动作移动和绘制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.forward\" target=\"_blank\" rel=\"noopener\"><code>forward()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fd\" target=\"_blank\" rel=\"noopener\"><code>fd()</code></a> 前进<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.backward\" target=\"_blank\" rel=\"noopener\"><code>backward()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bk\" target=\"_blank\" rel=\"noopener\"><code>bk()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.back\" target=\"_blank\" rel=\"noopener\"><code>back()</code></a> 后退<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.right\" target=\"_blank\" rel=\"noopener\"><code>right()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.rt\" target=\"_blank\" rel=\"noopener\"><code>rt()</code></a> 右转<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.left\" target=\"_blank\" rel=\"noopener\"><code>left()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.lt\" target=\"_blank\" rel=\"noopener\"><code>lt()</code></a> 左转<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.goto\" target=\"_blank\" rel=\"noopener\"><code>goto()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setpos\" target=\"_blank\" rel=\"noopener\"><code>setpos()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setposition\" target=\"_blank\" rel=\"noopener\"><code>setposition()</code></a> 前往/定位<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setx\" target=\"_blank\" rel=\"noopener\"><code>setx()</code></a> 设置x坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.sety\" target=\"_blank\" rel=\"noopener\"><code>sety()</code></a> 设置y坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setheading\" target=\"_blank\" rel=\"noopener\"><code>setheading()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.seth\" target=\"_blank\" rel=\"noopener\"><code>seth()</code></a> 设置朝向<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.home\" target=\"_blank\" rel=\"noopener\"><code>home()</code></a> 返回原点<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.circle\" target=\"_blank\" rel=\"noopener\"><code>circle()</code></a> 画圆<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.dot\" target=\"_blank\" rel=\"noopener\"><code>dot()</code></a> 画点<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp\" target=\"_blank\" rel=\"noopener\"><code>stamp()</code></a> 印章<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamp\" target=\"_blank\" rel=\"noopener\"><code>clearstamp()</code></a> 清除印章<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamps\" target=\"_blank\" rel=\"noopener\"><code>clearstamps()</code></a> 清除多个印章<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo\" target=\"_blank\" rel=\"noopener\"><code>undo()</code></a> 撤消<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed\" target=\"_blank\" rel=\"noopener\"><code>speed()</code></a> 速度获取海龟的状态<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.position\" target=\"_blank\" rel=\"noopener\"><code>position()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos\" target=\"_blank\" rel=\"noopener\"><code>pos()</code></a> 位置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.towards\" target=\"_blank\" rel=\"noopener\"><code>towards()</code></a> 目标方向<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.xcor\" target=\"_blank\" rel=\"noopener\"><code>xcor()</code></a> x坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ycor\" target=\"_blank\" rel=\"noopener\"><code>ycor()</code></a> y坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.heading\" target=\"_blank\" rel=\"noopener\"><code>heading()</code></a> 朝向<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.distance\" target=\"_blank\" rel=\"noopener\"><code>distance()</code></a> 距离设置与度量单位<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees\" target=\"_blank\" rel=\"noopener\"><code>degrees()</code></a> 角度<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians\" target=\"_blank\" rel=\"noopener\"><code>radians()</code></a> 弧度画笔控制绘图状态<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pendown\" target=\"_blank\" rel=\"noopener\"><code>pendown()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pd\" target=\"_blank\" rel=\"noopener\"><code>pd()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.down\" target=\"_blank\" rel=\"noopener\"><code>down()</code></a> 画笔落下<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.penup\" target=\"_blank\" rel=\"noopener\"><code>penup()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pu\" target=\"_blank\" rel=\"noopener\"><code>pu()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.up\" target=\"_blank\" rel=\"noopener\"><code>up()</code></a> 画笔抬起<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pensize\" target=\"_blank\" rel=\"noopener\"><code>pensize()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.width\" target=\"_blank\" rel=\"noopener\"><code>width()</code></a> 画笔粗细<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen\" target=\"_blank\" rel=\"noopener\"><code>pen()</code></a> 画笔<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isdown\" target=\"_blank\" rel=\"noopener\"><code>isdown()</code></a> 画笔是否落下颜色控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.color\" target=\"_blank\" rel=\"noopener\"><code>color()</code></a> 颜色<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor\" target=\"_blank\" rel=\"noopener\"><code>pencolor()</code></a> 画笔颜色<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor\" target=\"_blank\" rel=\"noopener\"><code>fillcolor()</code></a> 填充颜色填充<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.filling\" target=\"_blank\" rel=\"noopener\"><code>filling()</code></a> 是否填充<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill\" target=\"_blank\" rel=\"noopener\"><code>begin_fill()</code></a> 开始填充<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_fill\" target=\"_blank\" rel=\"noopener\"><code>end_fill()</code></a> 结束填充更多绘图控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset\" target=\"_blank\" rel=\"noopener\"><code>reset()</code></a> 重置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear\" target=\"_blank\" rel=\"noopener\"><code>clear()</code></a> 清空<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.write\" target=\"_blank\" rel=\"noopener\"><code>write()</code></a> 书写海龟状态可见性<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.showturtle\" target=\"_blank\" rel=\"noopener\"><code>showturtle()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.st\" target=\"_blank\" rel=\"noopener\"><code>st()</code></a> 显示海龟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.hideturtle\" target=\"_blank\" rel=\"noopener\"><code>hideturtle()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ht\" target=\"_blank\" rel=\"noopener\"><code>ht()</code></a> 隐藏海龟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isvisible\" target=\"_blank\" rel=\"noopener\"><code>isvisible()</code></a> 是否可见外观<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shape\" target=\"_blank\" rel=\"noopener\"><code>shape()</code></a> 形状<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resizemode\" target=\"_blank\" rel=\"noopener\"><code>resizemode()</code></a> 大小调整模式<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize\" target=\"_blank\" rel=\"noopener\"><code>shapesize()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtlesize\" target=\"_blank\" rel=\"noopener\"><code>turtlesize()</code></a> 形状大小<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shearfactor\" target=\"_blank\" rel=\"noopener\"><code>shearfactor()</code></a> 剪切因子<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.settiltangle\" target=\"_blank\" rel=\"noopener\"><code>settiltangle()</code></a> 设置倾角<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tiltangle\" target=\"_blank\" rel=\"noopener\"><code>tiltangle()</code></a> 倾角<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tilt\" target=\"_blank\" rel=\"noopener\"><code>tilt()</code></a> 倾斜<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapetransform\" target=\"_blank\" rel=\"noopener\"><code>shapetransform()</code></a> 变形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_shapepoly\" target=\"_blank\" rel=\"noopener\"><code>get_shapepoly()</code></a> 获取形状多边形使用事件<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick\" target=\"_blank\" rel=\"noopener\"><code>onclick()</code></a> 当鼠标点击<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onrelease\" target=\"_blank\" rel=\"noopener\"><code>onrelease()</code></a> 当鼠标释放<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ondrag\" target=\"_blank\" rel=\"noopener\"><code>ondrag()</code></a> 当鼠标拖动特殊海龟方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_poly\" target=\"_blank\" rel=\"noopener\"><code>begin_poly()</code></a> 开始记录多边形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_poly\" target=\"_blank\" rel=\"noopener\"><code>end_poly()</code></a> 结束记录多边形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_poly\" target=\"_blank\" rel=\"noopener\"><code>get_poly()</code></a> 获取多边形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clone\" target=\"_blank\" rel=\"noopener\"><code>clone()</code></a> 克隆<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getturtle\" target=\"_blank\" rel=\"noopener\"><code>getturtle()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getpen\" target=\"_blank\" rel=\"noopener\"><code>getpen()</code></a> 获取海龟画笔<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getscreen\" target=\"_blank\" rel=\"noopener\"><code>getscreen()</code></a> 获取屏幕<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setundobuffer\" target=\"_blank\" rel=\"noopener\"><code>setundobuffer()</code></a> 设置撤消缓冲区<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undobufferentries\" target=\"_blank\" rel=\"noopener\"><code>undobufferentries()</code></a> 撤消缓冲区条目数</p>\n<h3 id=\"TurtleScreen-Screen-方法\"><a href=\"#TurtleScreen-Screen-方法\" class=\"headerlink\" title=\"TurtleScreen/Screen 方法\"></a>TurtleScreen/Screen 方法</h3><p>窗口控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgcolor\" target=\"_blank\" rel=\"noopener\"><code>bgcolor()</code></a> 背景颜色<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgpic\" target=\"_blank\" rel=\"noopener\"><code>bgpic()</code></a> 背景图片<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear\" target=\"_blank\" rel=\"noopener\"><code>clear()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearscreen\" target=\"_blank\" rel=\"noopener\"><code>clearscreen()</code></a> 清屏<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset\" target=\"_blank\" rel=\"noopener\"><code>reset()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resetscreen\" target=\"_blank\" rel=\"noopener\"><code>resetscreen()</code></a> 重置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.screensize\" target=\"_blank\" rel=\"noopener\"><code>screensize()</code></a> 屏幕大小<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setworldcoordinates\" target=\"_blank\" rel=\"noopener\"><code>setworldcoordinates()</code></a> 设置世界坐标系动画控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay\" target=\"_blank\" rel=\"noopener\"><code>delay()</code></a> 延迟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tracer\" target=\"_blank\" rel=\"noopener\"><code>tracer()</code></a> 追踪<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.update\" target=\"_blank\" rel=\"noopener\"><code>update()</code></a> 更新使用屏幕事件<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 监听<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkey\" target=\"_blank\" rel=\"noopener\"><code>onkey()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeyrelease\" target=\"_blank\" rel=\"noopener\"><code>onkeyrelease()</code></a> 当键盘按下并释放<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeypress\" target=\"_blank\" rel=\"noopener\"><code>onkeypress()</code></a> 当键盘按下<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick\" target=\"_blank\" rel=\"noopener\"><code>onclick()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onscreenclick\" target=\"_blank\" rel=\"noopener\"><code>onscreenclick()</code></a> 当点击屏幕<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ontimer\" target=\"_blank\" rel=\"noopener\"><code>ontimer()</code></a> 当达到定时<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mainloop\" target=\"_blank\" rel=\"noopener\"><code>mainloop()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.done\" target=\"_blank\" rel=\"noopener\"><code>done()</code></a> 主循环设置与特殊方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a> 模式<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a> 颜色模式<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getcanvas\" target=\"_blank\" rel=\"noopener\"><code>getcanvas()</code></a> 获取画布<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getshapes\" target=\"_blank\" rel=\"noopener\"><code>getshapes()</code></a> 获取形状<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape\" target=\"_blank\" rel=\"noopener\"><code>register_shape()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.addshape\" target=\"_blank\" rel=\"noopener\"><code>addshape()</code></a> 添加形状<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtles\" target=\"_blank\" rel=\"noopener\"><code>turtles()</code></a> 所有海龟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_height\" target=\"_blank\" rel=\"noopener\"><code>window_height()</code></a> 窗口高度<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_width\" target=\"_blank\" rel=\"noopener\"><code>window_width()</code></a> 窗口宽度输入方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.textinput\" target=\"_blank\" rel=\"noopener\"><code>textinput()</code></a> 文本输入<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.numinput\" target=\"_blank\" rel=\"noopener\"><code>numinput()</code></a> 数字输入Screen 专有方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bye\" target=\"_blank\" rel=\"noopener\"><code>bye()</code></a> 退出<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick\" target=\"_blank\" rel=\"noopener\"><code>exitonclick()</code></a> 当点击时退出<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setup\" target=\"_blank\" rel=\"noopener\"><code>setup()</code></a> 设置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.title\" target=\"_blank\" rel=\"noopener\"><code>title()</code></a> 标题</p>\n<h2 id=\"RawTurtle-Turtle-方法和对应函数\"><a href=\"#RawTurtle-Turtle-方法和对应函数\" class=\"headerlink\" title=\"RawTurtle/Turtle 方法和对应函数\"></a>RawTurtle/Turtle 方法和对应函数</h2><p>本节中的大部分示例都使用 Turtle 类的一个实例，命名为 <code>turtle</code>。</p>\n<h3 id=\"海龟动作\"><a href=\"#海龟动作\" class=\"headerlink\" title=\"海龟动作\"></a>海龟动作</h3><p><code>turtle.``forward</code>(<em>distance</em>)<code>turtle.``fd</code>(<em>distance</em>)</p>\n<p>参数:</p>\n<p><strong>distance</strong> -- 一个数值 (整型或浮点型)</p>\n<p>海龟前进 <em>distance</em> 指定的距离，方向为海龟的朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(25)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(25.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(-75)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(-50.00,0.00)</p>\n<p><code>turtle.``back</code>(<em>distance</em>)<code>turtle.``bk</code>(<em>distance</em>)<code>turtle.``backward</code>(<em>distance</em>)</p>\n<p>参数:</p>\n<p><strong>distance</strong> -- 一个数值</p>\n<p>海龟后退 <em>distance</em> 指定的距离，方向与海龟的朝向相反。不改变海龟的朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.backward(30)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(-30.00,0.00)</p>\n<p><code>turtle.``right</code>(<em>angle</em>)<code>turtle.``rt</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值 (整型或浮点型)</p>\n<p>海龟右转 <em>angle</em> 个单位。(单位默认为角度，但可通过 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees\" target=\"_blank\" rel=\"noopener\"><code>degrees()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians\" target=\"_blank\" rel=\"noopener\"><code>radians()</code></a> 函数改变设置。) 角度的正负由海龟模式确定，参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>22.0<br><strong>&gt;&gt;&gt;</strong> turtle.right(45)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>337.0</p>\n<p><code>turtle.``left</code>(<em>angle</em>)<code>turtle.``lt</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值 (整型或浮点型)</p>\n<p>海龟左转 <em>angle</em> 个单位。(单位默认为角度，但可通过 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees\" target=\"_blank\" rel=\"noopener\"><code>degrees()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians\" target=\"_blank\" rel=\"noopener\"><code>radians()</code></a> 函数改变设置。) 角度的正负由海龟模式确定，参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>22.0<br><strong>&gt;&gt;&gt;</strong> turtle.left(45)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>67.0</p>\n<p><code>turtle.``goto</code>(<em>x</em>, <em>y=None</em>)<code>turtle.``setpos</code>(<em>x</em>, <em>y=None</em>)<code>turtle.``setposition</code>(<em>x</em>, <em>y=None</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值或数值对/向量<strong>y</strong> -- 一个数值或 <code>None</code></p>\n<p>如果 <em>y</em> 为 <code>None</code>，<em>x</em> 应为一个表示坐标的数值对或 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D\" target=\"_blank\" rel=\"noopener\"><code>Vec2D</code></a> 类对象 (例如 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos\" target=\"_blank\" rel=\"noopener\"><code>pos()</code></a> 返回的对象).</p>\n<p>海龟移动到一个绝对坐标。如果画笔已落下将会画线。不改变海龟的朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> tp = turtle.pos()<br><strong>&gt;&gt;&gt;</strong> tp<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setpos(60,30)<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(60.00,30.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setpos((20,80))<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(20.00,80.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setpos(tp)<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(0.00,0.00)</p>\n<p><code>turtle.``setx</code>(<em>x</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值 (整型或浮点型)</p>\n<p>设置海龟的横坐标为 <em>x</em>，纵坐标保持不变。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,240.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setx(10)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(10.00,240.00)</p>\n<p><code>turtle.``sety</code>(<em>y</em>)</p>\n<p>参数:</p>\n<p><strong>y</strong> -- 一个数值 (整型或浮点型)</p>\n<p>设置海龟的纵坐标为 <em>y</em>，横坐标保持不变。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,40.00)<br><strong>&gt;&gt;&gt;</strong> turtle.sety(-10)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,-10.00)</p>\n<p><code>turtle.``setheading</code>(<em>to_angle</em>)<code>turtle.``seth</code>(<em>to_angle</em>)</p>\n<p>参数:</p>\n<p><strong>to_angle</strong> -- 一个数值 (整型或浮点型)</p>\n<p>设置海龟的朝向为 _to_angle_。以下是以角度表示的几个常用方向：</p>\n<p>标准模式</p>\n<p>logo 模式</p>\n<p>0 - 东</p>\n<p>0 - 北</p>\n<p>90 - 北</p>\n<p>90 - 东</p>\n<p>180 - 西</p>\n<p>180 - 南</p>\n<p>270 - 南</p>\n<p>270 - 西</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.setheading(90)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0</p>\n<p><code>turtle.``home</code>()</p>\n<p>海龟移至初始坐标 (0,0)，并设置朝向为初始方向 (由海龟模式确定，参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,-10.00)<br><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0</p>\n<p><code>turtle.``circle</code>(<em>radius</em>, <em>extent=None</em>, <em>steps=None</em>)</p>\n<p>参数:</p>\n<p><strong>radius</strong> -- 一个数值<strong>extent</strong> -- 一个数值 (或 <code>None</code>)<strong>steps</strong> -- 一个整型数 (或 <code>None</code>)</p>\n<p>绘制一个 <em>radius</em> 指定半径的圆。圆心在海龟左边 <em>radius</em> 个单位；<em>extent</em> 为一个夹角，用来决定绘制圆的一部分。如未指定 <em>extent*则绘制整个圆。如果 *extent</em> 不是完整圆周，则以当前画笔位置为一个端点绘制圆弧。如果 <em>radius</em> 为正值则朝逆时针方向绘制圆弧，否则朝顺时针方向。最终海龟的朝向会依据 <em>extent</em> 的值而改变。</p>\n<p>圆实际是以其内切正多边形来近似表示的，其边的数量由 <em>steps</em> 指定。如果未指定边数则会自动确定。此方法也可用来绘制正多边形。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0<br><strong>&gt;&gt;&gt;</strong> turtle.circle(50)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(-0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0<br><strong>&gt;&gt;&gt;</strong> turtle.circle(120, 180)  <em># draw a semicircle</em><br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,240.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>180.0</p>\n<p><code>turtle.``dot</code>(<em>size=None</em>, <em>*color</em>)</p>\n<p>参数:</p>\n<p><strong>size</strong> -- 一个整型数 &gt;= 1 (如果指定)<strong>color</strong> -- 一个颜色字符串或颜色数值元组</p>\n<p>绘制一个直径为 <em>size_，颜色为 _color</em> 的圆点。如果 <em>size</em> 未指定，则直径取 pensize+4 和 2*pensize 中的较大值。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.dot()<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50); turtle.dot(20, “blue”); turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(100.00,-0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0</p>\n<p><code>turtle.``stamp</code>()</p>\n<p>在海龟当前位置印制一个海龟形状。返回该印章的 stamp_id，印章可以通过调用 <code>clearstamp(stamp_id)</code> 来删除。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.color(“blue”)<br><strong>&gt;&gt;&gt;</strong> turtle.stamp()<br>11<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)</p>\n<p><code>turtle.``clearstamp</code>(<em>stampid</em>)</p>\n<p>参数:</p>\n<p><strong>stampid</strong> -- 一个整型数，必须是之前 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp\" target=\"_blank\" rel=\"noopener\"><code>stamp()</code></a> 调用的返回值</p>\n<p>删除 <em>stampid</em> 指定的印章。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(150.00,-0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.color(“blue”)<br><strong>&gt;&gt;&gt;</strong> astamp = turtle.stamp()<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(200.00,-0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.clearstamp(astamp)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(200.00,-0.00)</p>\n<p><code>turtle.``clearstamps</code>(<em>n=None</em>)</p>\n<p>参数:</p>\n<p><strong>n</strong> -- 一个整型数 (或 <code>None</code>)</p>\n<p>删除全部或前/后 <em>n</em> 个海龟印章。如果 <em>n</em> 为 <code>None</code> 则删除全部印章，如果 <em>n</em> &gt; 0 则删除前 <em>n</em> 个印章，否则如果 <em>n</em>&lt; 0 则删除后 <em>n</em> 个印章。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(8):<br><strong>… **    turtle.stamp(); turtle.fd(30)<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>**&gt;&gt;&gt;</strong> turtle.clearstamps(2)<br><strong>&gt;&gt;&gt;</strong> turtle.clearstamps(-2)<br><strong>&gt;&gt;&gt;</strong> turtle.clearstamps()</p>\n<p><code>turtle.``undo</code>()</p>\n<p>撤消 (或连续撤消) 最近的一个 (或多个) 海龟动作。可撤消的次数由撤消缓冲区的大小决定。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(4):<br><strong>… **    turtle.fd(50); turtle.lt(80)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(8):<br>*<em>… *</em>    turtle.undo()</p>\n<p><code>turtle.``speed</code>(<em>speed=None</em>)</p>\n<p>参数:</p>\n<p><strong>speed</strong> -- 一个 0..10 范围内的整型数或速度字符串 (见下)</p>\n<p>设置海龟移动的速度为 0..10 表示的整型数值。如未指定参数则返回当前速度。</p>\n<p>如果输入数值大于 10 或小于 0.5 则速度设为 0。速度字符串与速度值的对应关系如下:</p>\n<ul>\n<li>“fastest”: 0 最快</li>\n<li>“fast”: 10 快</li>\n<li>“normal”: 6 正常</li>\n<li>“slow”: 3 慢</li>\n<li>“slowest”: 1 最慢</li>\n</ul>\n<p>速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。</p>\n<p>注意: <em>speed</em> = 0 表示 <em>没有</em> 动画效果。forward/back 将使海龟向前/向后跳跃，同样的 left/right 将使海龟立即改变朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.speed()<br>3\n<strong>&gt;&gt;&gt;</strong> turtle.speed(‘normal’)<br><strong>&gt;&gt;&gt;</strong> turtle.speed()<br>6\n<strong>&gt;&gt;&gt;</strong> turtle.speed(9)<br><strong>&gt;&gt;&gt;</strong> turtle.speed()<br>9</p>\n<h3 id=\"获取海龟的状态\"><a href=\"#获取海龟的状态\" class=\"headerlink\" title=\"获取海龟的状态\"></a>获取海龟的状态</h3><p><code>turtle.``position</code>()<code>turtle.``pos</code>()</p>\n<p>返回海龟当前的坐标 (x,y) (为 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D\" target=\"_blank\" rel=\"noopener\"><code>Vec2D</code></a> 矢量类对象)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(440.00,-0.00)</p>\n<p><code>turtle.``towards</code>(<em>x</em>, <em>y=None</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值或数值对/矢量，或一个海龟实例<strong>y</strong> -- 一个数值——如果 <em>x</em> 是一个数值，否则为 <code>None</code></p>\n<p>从海龟位置到由 (x,y)，矢量或另一海龟对应位置的连线的夹角。此数值依赖于海龟初始朝向 - 由 “standard”/“world” 或 “logo” 模式设置所决定)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.goto(10, 10)<br><strong>&gt;&gt;&gt;</strong> turtle.towards(0,0)<br>225.0</p>\n<p><code>turtle.``xcor</code>()</p>\n<p>返回海龟的 x 坐标。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(50)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(100)<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(64.28,76.60)<br><strong>&gt;&gt;&gt;</strong> <strong>print</strong>(round(turtle.xcor(), 5))<br>64.27876</p>\n<p><code>turtle.``ycor</code>()</p>\n<p>返回海龟的 y 坐标。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(60)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(100)<br><strong>&gt;&gt;&gt;</strong> <strong>print</strong>(turtle.pos())<br>(50.00,86.60)<br><strong>&gt;&gt;&gt;</strong> <strong>print</strong>(round(turtle.ycor(), 5))<br>86.60254</p>\n<p><code>turtle.``heading</code>()</p>\n<p>返回海龟当前的朝向 (数值依赖于海龟模式参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(67)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>67.0</p>\n<p><code>turtle.``distance</code>(<em>x</em>, <em>y=None</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值或数值对/矢量，或一个海龟实例<strong>y</strong> -- 一个数值——如果 <em>x</em> 是一个数值，否则为 <code>None</code></p>\n<p>返回从海龟位置到由 (x,y)，适量或另一海龟对应位置的单位距离。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.distance(30,40)<br>50.0<br><strong>&gt;&gt;&gt;</strong> turtle.distance((30,40))<br>50.0<br><strong>&gt;&gt;&gt;</strong> joe = Turtle()<br><strong>&gt;&gt;&gt;</strong> joe.forward(77)<br><strong>&gt;&gt;&gt;</strong> turtle.distance(joe)<br>77.0</p>\n<h3 id=\"度量单位设置\"><a href=\"#度量单位设置\" class=\"headerlink\" title=\"度量单位设置\"></a>度量单位设置</h3><p><code>turtle.``degrees</code>(<em>fullcircle=360.0</em>)</p>\n<p>参数:</p>\n<p><strong>fullcircle</strong> -- 一个数值</p>\n<p>设置角度的度量单位，即设置一个圆周为多少 “度”。默认值为 360 度。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(90)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0</p>\n<p>Change angle measurement unit to grad (also known as gon,<br>grade, or gradian and equals 1/100-th of the right angle.)<br><strong>&gt;&gt;&gt;</strong> turtle.degrees(400.0)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>100.0<br><strong>&gt;&gt;&gt;</strong> turtle.degrees(360)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0</p>\n<p><code>turtle.``radians</code>()</p>\n<p>设置角度的度量单位为弧度。其值等于 <code>degrees(2*math.pi)</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(90)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0<br><strong>&gt;&gt;&gt;</strong> turtle.radians()<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>1.5707963267948966</p>\n<h3 id=\"画笔控制\"><a href=\"#画笔控制\" class=\"headerlink\" title=\"画笔控制\"></a>画笔控制</h3><h4 id=\"绘图状态\"><a href=\"#绘图状态\" class=\"headerlink\" title=\"绘图状态\"></a>绘图状态</h4><p><code>turtle.``pendown</code>()<code>turtle.``pd</code>()<code>turtle.``down</code>()</p>\n<p>画笔落下 -- 移动时将画线。<code>turtle.``penup</code>()<code>turtle.``pu</code>()<code>turtle.``up</code>()</p>\n<p>画笔抬起 -- 移动时不画线。<code>turtle.``pensize</code>(<em>width=None</em>)<code>turtle.``width</code>(<em>width=None</em>)</p>\n<p>参数:</p>\n<p><strong>width</strong> -- 一个正数值</p>\n<p>设置线条的粗细为 <em>width</em> 或返回该值。如果 resizemode 设为 “auto” 并且 turtleshape 为多边形，该多边形也以同样组细的线条绘制。如未指定参数，则返回当前的 pensize。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.pensize()<br>1\n<strong>&gt;&gt;&gt;</strong> turtle.pensize(10)   <em># from here on lines of width 10 are drawn</em></p>\n<p><code>turtle.``pen</code>(<em>pen=None</em>, <em>**pendict</em>)</p>\n<p>参数:</p>\n<p><strong>pen</strong> -- 一个包含部分或全部下列键的字典<strong>pendict</strong> -- 一个或多个以下列键为关键字的关键字参数</p>\n<p>返回或设置画笔的属性，以一个包含以下键值对的 “画笔字典” 表示:</p>\n<ul>\n<li>“shown”: True/False</li>\n<li>“pendown”: True/False</li>\n<li>“pencolor”: 颜色字符串或颜色元组</li>\n<li>“fillcolor”: 颜色字符串或颜色元组</li>\n<li>“pensize”: 正数值</li>\n<li>“speed”: 0..10 范围内的数值</li>\n<li>“resizemode”: “auto” 或 “user” 或 “noresize”</li>\n<li>“stretchfactor”: (正数值, 正数值)</li>\n<li>“outline”: 正数值</li>\n<li>“tilt”: 数值</li>\n</ul>\n<p>此字典可作为后续调用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen\" target=\"_blank\" rel=\"noopener\"><code>pen()</code></a> 时的参数，以恢复之前的画笔状态。另外还可将这些属性作为关键词参数提交。使用此方式可以用一条语句设置画笔的多个属性。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.pen(fillcolor=”black”, pencolor=”red”, pensize=10)<br><strong>&gt;&gt;&gt;</strong> sorted(turtle.pen().items())<br>[(‘fillcolor’, ‘black’), (‘outline’, 1), (‘pencolor’, ‘red’),<br> (‘pendown’, True), (‘pensize’, 10), (‘resizemode’, ‘noresize’),<br> (‘shearfactor’, 0.0), (‘shown’, True), (‘speed’, 9),<br> (‘stretchfactor’, (1.0, 1.0)), (‘tilt’, 0.0)]<br><strong>&gt;&gt;&gt;</strong> penstate=turtle.pen()<br><strong>&gt;&gt;&gt;</strong> turtle.color(“yellow”, “”)<br><strong>&gt;&gt;&gt;</strong> turtle.penup()<br><strong>&gt;&gt;&gt;</strong> sorted(turtle.pen().items())[:3]<br>[(‘fillcolor’, ‘’), (‘outline’, 1), (‘pencolor’, ‘yellow’)]<br><strong>&gt;&gt;&gt;</strong> turtle.pen(penstate, fillcolor=”green”)<br><strong>&gt;&gt;&gt;</strong> sorted(turtle.pen().items())[:3]<br>[(‘fillcolor’, ‘green’), (‘outline’, 1), (‘pencolor’, ‘red’)]</p>\n<p><code>turtle.``isdown</code>()</p>\n<p>如果画笔落下返回 <code>True</code>，如果画笔抬起返回 <code>False</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.penup()<br><strong>&gt;&gt;&gt;</strong> turtle.isdown()<br>False<br><strong>&gt;&gt;&gt;</strong> turtle.pendown()<br><strong>&gt;&gt;&gt;</strong> turtle.isdown()<br>True</p>\n<h4 id=\"颜色控制\"><a href=\"#颜色控制\" class=\"headerlink\" title=\"颜色控制\"></a>颜色控制</h4><p><code>turtle.``pencolor</code>(<em>*args</em>)</p>\n<p>返回或设置画笔颜色。</p>\n<p>允许以下四种输入格式:<code>pencolor()</code>返回以颜色描述字符串或元组 (见示例) 表示的当前画笔颜色。可用作其他 color/pencolor/fillcolor 调用的输入。<code>pencolor(colorstring)</code>设置画笔颜色为 <em>colorstring</em> 指定的 Tk 颜色描述字符串，例如 <code>&quot;red&quot;</code>、<code>&quot;yellow&quot;</code> 或 <code>&quot;#33cc8c&quot;</code>。<code>pencolor((r, g, b))</code>设置画笔颜色为以 <em>r</em>, <em>g</em>, <em>b</em> 元组表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a>)。<code>pencolor(r, g, b)</code>设置画笔颜色为以 <em>r</em>, <em>g</em>, <em>b</em> 表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode。</p>\n<p>如果 turtleshape 为多边形，该多边形轮廓也以新设置的画笔颜色绘制。</p>\n<p><strong>&gt;&gt;&gt;</strong> colormode()<br>1.0<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>‘red’<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(“brown”)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>‘brown’<br><strong>&gt;&gt;&gt;</strong> tup = (0.2, 0.8, 0.55)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(tup)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(0.2, 0.8, 0.5490196078431373)<br><strong>&gt;&gt;&gt;</strong> colormode(255)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(51.0, 204.0, 140.0)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(‘#32c18f’)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(50.0, 193.0, 143.0)</p>\n<p><code>turtle.``fillcolor</code>(<em>*args</em>)</p>\n<p>返回或设置填充颜色。</p>\n<p>允许以下四种输入格式:<code>fillcolor()</code>返回以颜色描述字符串或元组 (见示例) 表示的当前填充颜色。可用作其他 color/pencolor/fillcolor 调用的输入。<code>fillcolor(colorstring)</code>设置填充颜色为 <em>colorstring</em> 指定的 Tk 颜色描述字符串，例如 <code>&quot;red&quot;</code>、<code>&quot;yellow&quot;</code> 或 <code>&quot;#33cc8c&quot;</code>。<code>fillcolor((r, g, b))</code>设置填充颜色为以 <em>r</em>, <em>g</em>, <em>b</em> 元组表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a>)。<code>fillcolor(r, g, b)</code>设置填充颜色为 <em>r</em>, <em>g</em>, <em>b</em> 表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode。</p>\n<p>如果 turtleshape 为多边形，该多边形内部也以新设置的填充颜色填充。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.fillcolor(“violet”)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor()<br>‘violet’<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(50.0, 193.0, 143.0)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor((50, 193, 143))  <em># Integers, not floats</em><br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor()<br>(50.0, 193.0, 143.0)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor(‘#ffffff’)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor()<br>(255.0, 255.0, 255.0)</p>\n<p><code>turtle.``color</code>(<em>*args</em>)</p>\n<p>返回或设置画笔颜色和填充颜色。</p>\n<p>允许多种输入格式。使用如下 0 至 3 个参数:<code>color()</code>返回以一对颜色描述字符串或元组表示的当前画笔颜色和填充颜色，两者可分别由 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor\" target=\"_blank\" rel=\"noopener\"><code>pencolor()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor\" target=\"_blank\" rel=\"noopener\"><code>fillcolor()</code></a> 返回。<code>color(colorstring)</code>, <code>color((r,g,b))</code>, <code>color(r,g,b)</code>输入格式与 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor\" target=\"_blank\" rel=\"noopener\"><code>pencolor()</code></a> 相同，同时设置填充颜色和画笔颜色为指定的值。<code>color(colorstring1, colorstring2)</code>, <code>color((r1,g1,b1), (r2,g2,b2))</code>相当于 <code>pencolor(colorstring1)</code> 加 <code>fillcolor(colorstring2)</code>，使用其他输入格式的方法也与之类似。</p>\n<p>如果 turtleshape 为多边形，该多边形轮廓与填充也使用新设置的颜色。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.color(“red”, “green”)<br><strong>&gt;&gt;&gt;</strong> turtle.color()<br>(‘red’, ‘green’)<br><strong>&gt;&gt;&gt;</strong> color(“#285078”, “#a0c8f0”)<br><strong>&gt;&gt;&gt;</strong> color()<br>((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))</p>\n<p>另参见: Screen 方法 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a>。</p>\n<h4 id=\"填充\"><a href=\"#填充\" class=\"headerlink\" title=\"填充\"></a>填充</h4><p><code>turtle.``filling</code>()</p>\n<p>返回填充状态 (填充为 <code>True</code>，否则为 <code>False</code>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.begin_fill()<br><strong>&gt;&gt;&gt;</strong> <strong>if</strong> turtle.filling():<br><strong>… **   turtle.pensize(5)<br>**…</strong> <strong>else</strong>:\n*<em>… *</em>   turtle.pensize(3)</p>\n<p><code>turtle.``begin_fill</code>()</p>\n<p>在绘制要填充的形状之前调用。<code>turtle.``end_fill</code>()</p>\n<p>填充上次调用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill\" target=\"_blank\" rel=\"noopener\"><code>begin_fill()</code></a> 之后绘制的形状。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.color(“black”, “red”)<br><strong>&gt;&gt;&gt;</strong> turtle.begin_fill()<br><strong>&gt;&gt;&gt;</strong> turtle.circle(80)<br><strong>&gt;&gt;&gt;</strong> turtle.end_fill()</p>\n<h4 id=\"更多绘图控制\"><a href=\"#更多绘图控制\" class=\"headerlink\" title=\"更多绘图控制\"></a>更多绘图控制</h4><p><code>turtle.``reset</code>()</p>\n<p>从屏幕中删除海龟的绘图，海龟回到原点并设置所有变量为默认值。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.goto(0,-22)<br><strong>&gt;&gt;&gt;</strong> turtle.left(100)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,-22.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>100.0<br><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0</p>\n<p><code>turtle.``clear</code>()</p>\n<p>从屏幕中删除指定海龟的绘图。不移动海龟。海龟的状态和位置以及其他海龟的绘图不受影响。<code>turtle.``write</code>(<em>arg</em>, <em>move=False</em>, <em>align=”left”</em>, <em>font=(“Arial”</em>, <em>8</em>, <em>“normal”)</em>)</p>\n<p>参数:</p>\n<p><strong>arg</strong> -- 要书写到 TurtleScreen 的对象<strong>move</strong> -- True/False<strong>align</strong> -- 字符串 “left”, “center” 或 “right”<strong>font</strong> -- 一个三元组 (fontname, fontsize, fonttype)</p>\n<p>书写文本 - <em>arg</em> 指定的字符串 - 到当前海龟位置，<em>align</em> 指定对齐方式 (“left”, “center” 或 right”)，font 指定字体。如果 <em>move</em> 为 True，画笔会移动到文本的右下角。默认 <em>move</em> 为 <code>False</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.write(“Home = “, <strong>True</strong>, align=”center”)<br><strong>&gt;&gt;&gt;</strong> turtle.write((0,0), <strong>True</strong>)</p>\n<h3 id=\"海龟状态\"><a href=\"#海龟状态\" class=\"headerlink\" title=\"海龟状态\"></a>海龟状态</h3><h4 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h4><p><code>turtle.``hideturtle</code>()<code>turtle.``ht</code>()</p>\n<p>使海龟不可见。当你绘制复杂图形时这是个好主意，因为隐藏海龟可显著加快绘制速度。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.hideturtle()</p>\n<p><code>turtle.``showturtle</code>()<code>turtle.``st</code>()</p>\n<p>使海龟可见。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.showturtle()</p>\n<p><code>turtle.``isvisible</code>()</p>\n<p>如果海龟显示返回 <code>True</code>，如果海龟隐藏返回 <code>False</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.hideturtle()<br><strong>&gt;&gt;&gt;</strong> turtle.isvisible()<br>False<br><strong>&gt;&gt;&gt;</strong> turtle.showturtle()<br><strong>&gt;&gt;&gt;</strong> turtle.isvisible()<br>True</p>\n<h4 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h4><p><code>turtle.``shape</code>(<em>name=None</em>)</p>\n<p>参数:</p>\n<p><strong>name</strong> -- 一个有效的形状名字符串</p>\n<p>设置海龟形状为 <em>name</em> 指定的形状名，如未指定形状名则返回当前的形状名。<em>name</em> 指定的形状名应存在于 TurtleScreen 的 shape 字典中。多边形的形状初始时有以下几种: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”。要了解如何处理形状请参看 Screen 方法 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape\" target=\"_blank\" rel=\"noopener\"><code>register_shape()</code></a>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shape()<br>‘classic’<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“turtle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shape()<br>‘turtle’</p>\n<p><code>turtle.``resizemode</code>(<em>rmode=None</em>)</p>\n<p>参数:</p>\n<p><strong>rmode</strong> -- 字符串 “auto”, “user”, “noresize” 其中之一</p>\n<p>设置大小调整模式为以下值之一: “auto”, “user”, “noresize”。如未指定 <em>rmode</em> 则返回当前的大小调整模式。不同的大小调整模式的效果如下:</p>\n<ul>\n<li>“auto”: 根据画笔粗细值调整海龟的外观。</li>\n<li>“user”: 根据拉伸因子和轮廓宽度 (outline) 值调整海龟的外观，两者是由 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize\" target=\"_blank\" rel=\"noopener\"><code>shapesize()</code></a> 设置的。</li>\n<li>“noresize”: 不调整海龟的外观大小。</li>\n</ul>\n<p>大小调整模式 (“user”) 会在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize\" target=\"_blank\" rel=\"noopener\"><code>shapesize()</code></a> 带参数调用时生效。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.resizemode()<br>‘noresize’<br><strong>&gt;&gt;&gt;</strong> turtle.resizemode(“auto”)<br><strong>&gt;&gt;&gt;</strong> turtle.resizemode()<br>‘auto’</p>\n<p><code>turtle.``shapesize</code>(<em>stretch_wid=None</em>, <em>stretch_len=None</em>, <em>outline=None</em>)<code>turtle.``turtlesize</code>(<em>stretch_wid=None</em>, <em>stretch_len=None</em>, <em>outline=None</em>)</p>\n<p>参数:</p>\n<p><strong>stretch_wid</strong> -- 正数值<strong>stretch_len</strong> -- 正数值<strong>outline</strong> -- 正数值</p>\n<p>返回或设置画笔的属性 x/y-拉伸因子和/或轮廓。设置大小调整模式为 “user”。当且仅当大小调整模式设为 “user” 时海龟会基于其拉伸因子调整外观: <em>stretch_wid</em> 为垂直于其朝向的宽度拉伸因子，<em>stretch_len</em> 为平等于其朝向的长度拉伸因子，决定形状轮廓线的粗细。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shapesize()<br>(1.0, 1.0, 1)<br><strong>&gt;&gt;&gt;</strong> turtle.resizemode(“user”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5, 5, 12)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize()<br>(5, 5, 12)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(outline=8)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize()<br>(5, 5, 8)</p>\n<p><code>turtle.``shearfactor</code>(<em>shear=None</em>)</p>\n<p>参数:</p>\n<p><strong>shear</strong> -- 数值 (可选)</p>\n<p>设置或返回当前的剪切因子。根据 share 指定的剪切因子即剪切角度的切线来剪切海龟形状。<em>不</em> 改变海龟的朝向 (移动方向)。如未指定 shear 参数: 返回当前的剪切因子即剪切角度的切线，与海龟朝向平行的线条将被剪切。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.shearfactor(0.5)<br><strong>&gt;&gt;&gt;</strong> turtle.shearfactor()<br>0.5</p>\n<p><code>turtle.``tilt</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值</p>\n<p>海龟形状自其当前的倾角转动 <em>angle</em> 指定的角度，但 <em>不</em> 改变海龟的朝向 (移动方向)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.tilt(30)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.tilt(30)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)</p>\n<p><code>turtle.``settiltangle</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值</p>\n<p>旋转海龟形状使其指向 <em>angle</em> 指定的方向，忽略其当前的倾角，<em>不</em> 改变海龟的朝向 (移动方向)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.settiltangle(45)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.settiltangle(-45)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)</p>\n<p><em>3.1 版后已移除._<code>turtle.``tiltangle</code>(_angle=None</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值 (可选)</p>\n<p>设置或返回当前的倾角。如果指定 angle 则旋转海龟形状使其指向 angle 指定的方向，忽略其当前的倾角。<em>不</em>改变海龟的朝向 (移动方向)。如果未指定 angle: 返回当前的倾角，即海龟形状的方向和海龟朝向 (移动方向) 之间的夹角。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.tilt(45)<br><strong>&gt;&gt;&gt;</strong> turtle.tiltangle()<br>45.0</p>\n<p><code>turtle.``shapetransform</code>(<em>t11=None</em>, <em>t12=None</em>, <em>t21=None</em>, <em>t22=None</em>)</p>\n<p>参数:</p>\n<p><strong>t11</strong> -- 一个数值 (可选)<strong>t12</strong> -- 一个数值 (可选)<strong>t21</strong> -- 一个数值 (可选)<strong>t12</strong> -- 一个数值 (可选)</p>\n<p>设置或返回海龟形状的当前变形矩阵。</p>\n<p>如不指定任何矩阵元素，则返回以4元素元组表示的变形矩阵。否则使用指定元素设置变形矩阵改变海龟形状，矩阵第一排的值为 t11, t12，第二排的值为 t21, t22。行列式 t11 * t22 - t12 * t21 的值不能为零，否则会出错。根据指定的矩阵修改拉伸因子，剪切因子和倾角。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle = Turtle()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“square”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(4,2)<br><strong>&gt;&gt;&gt;</strong> turtle.shearfactor(-0.5)<br><strong>&gt;&gt;&gt;</strong> turtle.shapetransform()<br>(4.0, -1.0, -0.0, 2.0)</p>\n<p><code>turtle.``get_shapepoly</code>()</p>\n<p>返回以坐标值对元组表示的当前形状多边形。这可以用于定义一个新形状或一个复合形状的多个组成部分。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shape(“square”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapetransform(4, -1, 0, 2)<br><strong>&gt;&gt;&gt;</strong> turtle.get_shapepoly()<br>((50, -20), (30, 20), (-50, 20), (-30, -20))</p>\n<h3 id=\"使用事件\"><a href=\"#使用事件\" class=\"headerlink\" title=\"使用事件\"></a>使用事件</h3><p><code>turtle.``onclick</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>将 <em>fun</em> 指定的函数绑定到鼠标点击此海龟事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。以下为使用匿名海龟即过程式的示例:</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>def</strong> turn(x, y):<br><strong>… **    left(180)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> onclick(turn)  <em># Now clicking into the turtle will turn it.</em><br><strong>&gt;&gt;&gt;</strong> onclick(None)  <em># event-binding will be removed</em></p>\n<p><code>turtle.``onrelease</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>将 <em>fun</em> 指定的函数绑定到在此海龟上释放鼠标按键事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>class</strong> <strong>MyTurtle</strong>(Turtle):<br><strong>… **    **def</strong> glow(self,x,y):<br><strong>… **        self.fillcolor(“red”)<br>*<em>… *</em>    **def</strong> unglow(self,x,y):<br><strong>… **        self.fillcolor(“”)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> turtle = MyTurtle()<br><strong>&gt;&gt;&gt;</strong> turtle.onclick(turtle.glow)     <em># clicking on turtle turns fillcolor red,</em><br><strong>&gt;&gt;&gt;</strong> turtle.onrelease(turtle.unglow) <em># releasing turns it to transparent.</em></p>\n<p><code>turtle.``ondrag</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>将 <em>fun</em> 指定的函数绑定到在此海龟上移动鼠标事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。</p>\n<p>注: 在海龟上移动鼠标事件之前应先发生在此海龟上点击鼠标事件。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.ondrag(turtle.goto)</p>\n<p>在此之后点击并拖动海龟可在屏幕上手绘线条 (如果画笔为落下)。</p>\n<h3 id=\"特殊海龟方法\"><a href=\"#特殊海龟方法\" class=\"headerlink\" title=\"特殊海龟方法\"></a>特殊海龟方法</h3><p><code>turtle.``begin_poly</code>()</p>\n<p>开始记录多边形的顶点。当前海龟位置为多边形的第一个顶点。<code>turtle.``end_poly</code>()</p>\n<p>停止记录多边形的顶点。当前海龟位置为多边形的最后一个顶点。它将连线到第一个顶点。<code>turtle.``get_poly</code>()</p>\n<p>返回最新记录的多边形。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.begin_poly()<br><strong>&gt;&gt;&gt;</strong> turtle.fd(100)<br><strong>&gt;&gt;&gt;</strong> turtle.left(20)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(30)<br><strong>&gt;&gt;&gt;</strong> turtle.left(60)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.end_poly()<br><strong>&gt;&gt;&gt;</strong> p = turtle.get_poly()<br><strong>&gt;&gt;&gt;</strong> register_shape(“myFavouriteShape”, p)</p>\n<p><code>turtle.``clone</code>()</p>\n<p>创建并返回海龟的克隆体，具有相同的位置、朝向和海龟属性。</p>\n<p><strong>&gt;&gt;&gt;</strong> mick = Turtle()<br><strong>&gt;&gt;&gt;</strong> joe = mick.clone()</p>\n<p><code>turtle.``getturtle</code>()<code>turtle.``getpen</code>()</p>\n<p>返回海龟对象自身。唯一合理的用法: 作为一个函数来返回 “匿名海龟”:</p>\n<p><strong>&gt;&gt;&gt;</strong> pet = getturtle()<br><strong>&gt;&gt;&gt;</strong> pet.fd(50)<br><strong>&gt;&gt;&gt;</strong> pet<br>&lt;turtle.Turtle object at 0x…&gt;</p>\n<p><code>turtle.``getscreen</code>()</p>\n<p>返回作为海龟绘图场所的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 类对象。该对象将可调用 TurtleScreen 方法。</p>\n<p><strong>&gt;&gt;&gt;</strong> ts = turtle.getscreen()<br><strong>&gt;&gt;&gt;</strong> ts<br>&lt;turtle._Screen object at 0x…&gt;<br><strong>&gt;&gt;&gt;</strong> ts.bgcolor(“pink”)</p>\n<p><code>turtle.``setundobuffer</code>(<em>size</em>)</p>\n<p>参数:</p>\n<p><strong>size</strong> -- 一个整型数值或 <code>None</code></p>\n<p>设置或禁用撤消缓冲区。如果 <em>size</em> 为一个整型数则将开辟一个指定大小的空缓冲区。<em>size</em> 表示可使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo\" target=\"_blank\" rel=\"noopener\"><code>undo()</code></a>方法/函数撤消的海龟命令的次数上限。如果 <em>size</em> 为 <code>None</code> 则禁用撤消缓冲区。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.setundobuffer(42)</p>\n<p><code>turtle.``undobufferentries</code>()</p>\n<p>返回撤销缓冲区里的条目数。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>while</strong> undobufferentries():<br>*<em>… *</em>    undo()</p>\n<h3 id=\"复合形状\"><a href=\"#复合形状\" class=\"headerlink\" title=\"复合形状\"></a>复合形状</h3><p>要使用由多个不同颜色多边形构成的复合海龟形状，你必须明确地使用辅助类 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape\" target=\"_blank\" rel=\"noopener\"><code>Shape</code></a>，具体步骤如下:</p>\n<ol>\n<li>创建一个空 Shape 对象，类型为 “compound”。</li>\n<li>按照需要使用 <code>addcomponent()</code> 方法向此对象添加多个部件。例如:<strong>&gt;&gt;&gt;</strong> s = Shape(“compound”) <strong>&gt;&gt;&gt;</strong> poly1 = ((0,0),(10,-5),(0,10),(-10,-5)) <strong>&gt;&gt;&gt;</strong> s.addcomponent(poly1, “red”, “blue”) <strong>&gt;&gt;&gt;</strong> poly2 = ((0,0),(10,-5),(-10,-5)) <strong>&gt;&gt;&gt;</strong> s.addcomponent(poly2, “blue”, “red”)</li>\n<li>接下来将 Shape 对象添加到 Screen 对象的形状列表并使用它:<strong>&gt;&gt;&gt;</strong> register_shape(“myshape”, s) <strong>&gt;&gt;&gt;</strong> shape(“myshape”)</li>\n</ol>\n<p>注解</p>\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape\" target=\"_blank\" rel=\"noopener\"><code>Shape</code></a> 类在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape\" target=\"_blank\" rel=\"noopener\"><code>register_shape()</code></a> 方法的内部以多种方式使用。应用程序编写者 <em>只有</em> 在使用上述的复合形状时才需要处理 Shape 类。</p>\n<h2 id=\"TurtleScreen-Screen-方法及对应函数\"><a href=\"#TurtleScreen-Screen-方法及对应函数\" class=\"headerlink\" title=\"TurtleScreen/Screen 方法及对应函数\"></a>TurtleScreen/Screen 方法及对应函数</h2><p>本节中的大部分示例都使用 TurtleScreen 类的一个实例，命名为 <code>screen</code>。</p>\n<h3 id=\"窗口控制\"><a href=\"#窗口控制\" class=\"headerlink\" title=\"窗口控制\"></a>窗口控制</h3><p><code>turtle.``bgcolor</code>(<em>*args</em>)</p>\n<p>参数:</p>\n<p><strong>args</strong> -- 一个颜色字符串或三个取值范围 0..colormode 内的数值或一个取值范围相同的数值3元组</p>\n<p>设置或返回 TurtleScreen 的背景颜色。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.bgcolor(“orange”)<br><strong>&gt;&gt;&gt;</strong> screen.bgcolor()<br>‘orange’<br><strong>&gt;&gt;&gt;</strong> screen.bgcolor(“#800080”)<br><strong>&gt;&gt;&gt;</strong> screen.bgcolor()<br>(128.0, 0.0, 128.0)</p>\n<p><code>turtle.``bgpic</code>(<em>picname=None</em>)</p>\n<p>参数:</p>\n<p><strong>picname</strong> -- 一个字符串, gif-文件名, <code>&quot;nopic&quot;</code>, 或 <code>None</code></p>\n<p>设置背景图片或返回当前背景图片名称。如果 <em>picname</em> 为一个文件名，则将相应图片设为背景。如果 <em>picname</em> 为 <code>&quot;nopic&quot;</code>，则删除当前背景图片。如果 <em>picname</em> 为 <code>None</code>，则返回当前背景图片文件名。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.bgpic()<br>‘nopic’<br><strong>&gt;&gt;&gt;</strong> screen.bgpic(“landscape.gif”)<br><strong>&gt;&gt;&gt;</strong> screen.bgpic()<br>“landscape.gif”</p>\n<p><code>turtle.``clear</code>()<code>turtle.``clearscreen</code>()</p>\n<p>从中删除所有海龟的全部绘图。将已清空的 TurtleScreen 重置为初始状态: 白色背景，无背景片，无事件绑定并启用追踪。</p>\n<p>注解</p>\n<p>此 TurtleScreen 方法作为全局函数时只有一个名字 <code>clearscreen</code>。全局函数 <code>clear</code> 所对应的是 Turtle 方法 <code>clear</code>。<code>turtle.``reset</code>()<code>turtle.``resetscreen</code>()</p>\n<p>重置屏幕上的所有海龟为其初始状态。</p>\n<p>注解</p>\n<p>此 TurtleScreen 方法作为全局函数时只有一个名字 <code>resetscreen</code>。全局函数 <code>reset</code> 所对应的是 Turtle 方法 <code>reset</code>。<code>turtle.``screensize</code>(<em>canvwidth=None</em>, <em>canvheight=None</em>, <em>bg=None</em>)</p>\n<p>参数:</p>\n<p><strong>canvwidth</strong> -- 正整型数，以像素表示画布的新宽度值<strong>canvheight</strong> -- 正整型数，以像素表示画面的新高度值<strong>bg</strong> -- 颜色字符串或颜色元组，新的背景颜色</p>\n<p>如未指定任何参数，则返回当前的 (canvaswidth, canvasheight)。否则改变作为海龟绘图场所的画布大小。不改变绘图窗口。要观察画布的隐藏区域，可以使用滚动条。通过此方法可以令之前绘制于画布之外的图形变为可见。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.screensize()<br>(400, 300)<br><strong>&gt;&gt;&gt;</strong> screen.screensize(2000,1500)<br><strong>&gt;&gt;&gt;</strong> screen.screensize()<br>(2000, 1500)</p>\n<p>也可以用来寻找意外逃走的海龟 ;-)<code>turtle.``setworldcoordinates</code>(<em>llx</em>, <em>lly</em>, <em>urx</em>, <em>ury</em>)</p>\n<p>参数:</p>\n<p><strong>llx</strong> -- 一个数值, 画布左下角的 x-坐标<strong>lly</strong> -- 一个数值, 画布左下角的 y-坐标<strong>urx</strong> -- 一个数值, 画面右上角的 x-坐标<strong>ury</strong> -- 一个数值, 画布右上角的 y-坐标</p>\n<p>设置用户自定义坐标系并在必要时切换模式为 “world”。这会执行一次 <code>screen.reset()</code>。如果 “world” 模式已激活，则所有图形将根据新的坐标系重绘。</p>\n<p><strong>注意</strong>: 在用户自定义坐标系中，角度可能显得扭曲。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.reset()<br><strong>&gt;&gt;&gt;</strong> screen.setworldcoordinates(-50,-7.5,50,7.5)<br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> _ <strong>in</strong> range(72):<br><strong>… **    left(10)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> _ <strong>in</strong> range(8):<br>*<em>… *</em>    left(45); fd(2)   <em># a regular octagon</em></p>\n<h3 id=\"动画控制\"><a href=\"#动画控制\" class=\"headerlink\" title=\"动画控制\"></a>动画控制</h3><p><code>turtle.``delay</code>(<em>delay=None</em>)</p>\n<p>参数:</p>\n<p><strong>delay</strong> -- 正整型数</p>\n<p>设置或返回以毫秒数表示的延迟值 _delay_。(这约等于连续两次画布刷新的间隔时间。) 绘图延迟越长，动画速度越慢。</p>\n<p>可选参数:</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.delay()<br>10<br><strong>&gt;&gt;&gt;</strong> screen.delay(5)<br><strong>&gt;&gt;&gt;</strong> screen.delay()<br>5</p>\n<p><code>turtle.``tracer</code>(<em>n=None</em>, <em>delay=None</em>)</p>\n<p>参数:</p>\n<p><strong>n</strong> -- 非负整型数<strong>delay</strong> -- 非负整型数</p>\n<p>启用/禁用海龟动画并设置刷新图形的延迟时间。如果指定 <em>n</em> 值，则只有每第 n 次屏幕刷新会实际执行。(可被用来加速复杂图形的绘制。) 如果调用时不带参数，则返回当前保存的 n 值。第二个参数设置延迟值 (参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay\" target=\"_blank\" rel=\"noopener\"><code>delay()</code></a>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.tracer(8, 25)<br><strong>&gt;&gt;&gt;</strong> dist = 2<br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(200):<br>*<em>… *</em>    fd(dist)<br>*<em>… *</em>    rt(90)<br>*<em>… *</em>    dist += 2</p>\n<p><code>turtle.``update</code>()</p>\n<p>执行一次 TurtleScreen 刷新。在禁用追踪时使用。</p>\n<p>另参见 RawTurtle/Turtle 方法 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed\" target=\"_blank\" rel=\"noopener\"><code>speed()</code></a>。</p>\n<h3 id=\"使用屏幕事件\"><a href=\"#使用屏幕事件\" class=\"headerlink\" title=\"使用屏幕事件\"></a>使用屏幕事件</h3><p><code>turtle.``listen</code>(<em>xdummy=None</em>, <em>ydummy=None</em>)</p>\n<p>设置焦点到 TurtleScreen (以便接收按键事件)。使用两个 Dummy 参数以便能够传递 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 给 onclick 方法。<code>turtle.``onkey</code>(<em>fun</em>, <em>key</em>)<code>turtle.``onkeyrelease</code>(<em>fun</em>, <em>key</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个无参数的函数或 <code>None</code><strong>key</strong> -- 一个字符串: 键 (例如 “a”) 或键标 (例如 “space”)</p>\n<p>绑定 <em>fun</em> 指定的函数到按键释放事件。如果 <em>fun</em> 值为 <code>None</code>，则移除事件绑定。注: 为了能够注册按键事件，TurtleScreen 必须得到焦点。(参见 method <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 方法。)</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>def</strong> f():<br><strong>… **    fd(50)<br>*<em>… *</em>    lt(60)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> screen.onkey(f, “Up”)<br><strong>&gt;&gt;&gt;</strong> screen.listen()</p>\n<p><code>turtle.``onkeypress</code>(<em>fun</em>, <em>key=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个无参数的函数或 <code>None</code><strong>key</strong> -- 一个字符串: 键 (例如 “a”) 或键标 (例如 “space”)</p>\n<p>绑定 <em>fun</em> 指定的函数到指定键的按下事件。如未指定键则绑定到任意键的按下事件。注: 为了能够注册按键事件，必须得到焦点。(参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 方法。)</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>def</strong> f():<br><strong>… **    fd(50)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> screen.onkey(f, “Up”)<br><strong>&gt;&gt;&gt;</strong> screen.listen()</p>\n<p><code>turtle.``onclick</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)<code>turtle.``onscreenclick</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>绑定 <em>fun</em> 指定的函数到鼠标点击屏幕事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。</p>\n<p>以下示例使用一个 TurtleScreen 实例 <code>screen</code> 和一个 Turtle 实例 turtle:</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.onclick(turtle.goto) <em># Subsequently clicking into the TurtleScreen will</em><br><strong>&gt;&gt;&gt; **                            <em># make the turtle move to the clicked point.</em><br>**&gt;&gt;&gt;</strong> screen.onclick(None)        <em># remove event binding again</em></p>\n<p>注解</p>\n<p>此 TurtleScreen 方法作为全局函数时只有一个名字 <code>onscreenclick</code>。全局函数 <code>onclick</code> 所对应的是 Turtle 方法 <code>onclick</code>。<code>turtle.``ontimer</code>(<em>fun</em>, <em>t=0</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个无参数的函数<strong>t</strong> -- 一个数值 &gt;= 0</p>\n<p>安装一个计时器，在 <em>t</em> 毫秒后调用 <em>fun</em> 函数。</p>\n<p><strong>&gt;&gt;&gt;</strong> running = True<br><strong>&gt;&gt;&gt;</strong> <strong>def</strong> f():<br><strong>… **    **if</strong> running:<br><strong>… **        fd(50)<br>*<em>… *</em>        lt(60)<br>*<em>… *</em>        screen.ontimer(f, 250)<br>**&gt;&gt;&gt;</strong> f()   <em>### makes the turtle march around</em><br><strong>&gt;&gt;&gt;</strong> running = False</p>\n<p><code>turtle.``mainloop</code>()<code>turtle.``done</code>()</p>\n<p>开始事件循环 - 调用 Tkinter 的 mainloop 函数。必须作为一个海龟绘图程序的结束语句。如果一个脚本是在以 -n 模式 (无子进程) 启动的 IDLE 中运行时 <em>不可</em> 使用 - 用于实现海龟绘图的交互功能。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.mainloop()</p>\n<h3 id=\"输入方法\"><a href=\"#输入方法\" class=\"headerlink\" title=\"输入方法\"></a>输入方法</h3><p><code>turtle.``textinput</code>(<em>title</em>, <em>prompt</em>)</p>\n<p>参数:</p>\n<p><strong>title</strong> -- 字符串<strong>prompt</strong> -- 字符串</p>\n<p>弹出一个对话框窗口用来输入一个字符串。形参 title 为对话框窗口的标题，prompt 为一条文本，通常用来提示要输入什么信息。返回输入的字符串。如果对话框被取消则返回 <code>None</code>。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.textinput(“NIM”, “Name of first player:”)</p>\n<p><code>turtle.``numinput</code>(<em>title</em>, <em>prompt</em>, <em>default=None</em>, <em>minval=None</em>, <em>maxval=None</em>)</p>\n<p>参数:</p>\n<p><strong>title</strong> -- 字符串<strong>prompt</strong> -- 字符串<strong>default</strong> -- 数值 (可选)<strong>minval</strong> -- 数值 (可选)<strong>maxval</strong> -- 数值 (可选)</p>\n<p>弹出一个对话框窗口用来输入一个数值。title 为对话框窗口的标题，prompt 为一条文本，通常用来描述要输入的数值信息。default: 默认值, minval: 可输入的最小值, maxval: 可输入的最大值。输入数值的必须在指定的 minval .. maxval 范围之内，否则将给出一条提示，对话框保持打开等待修改。返回输入的数值。如果对话框被取消则返回 <code>None</code>。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.numinput(“Poker”, “Your stakes:”, 1000, minval=10, maxval=10000)</p>\n<h3 id=\"设置与特殊方法\"><a href=\"#设置与特殊方法\" class=\"headerlink\" title=\"设置与特殊方法\"></a>设置与特殊方法</h3><p><code>turtle.``mode</code>(<em>mode=None</em>)</p>\n<p>参数:</p>\n<p><strong>mode</strong> -- 字符串 “standard”, “logo” 或 “world” 其中之一</p>\n<p>设置海龟模式 (“standard”, “logo” 或 “world”) 并执行重置。如未指定模式则返回当前的模式。</p>\n<p>“standard” 模式与旧的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 兼容。”logo” 模式与大部分 Logo 海龟绘图兼容。”world” 模式使用用户自定义的 “世界坐标系”。<strong>注意</strong>: 在此模式下，如果 <code>x/y</code> 单位比率不等于 1 则角度会显得扭曲。</p>\n<p>模式</p>\n<p>初始海龟朝向</p>\n<p>正数角度</p>\n<p>“standard”</p>\n<p>朝右 (东)</p>\n<p>逆时针</p>\n<p>“logo”</p>\n<p>朝上 (北)</p>\n<p>顺时针</p>\n<p><strong>&gt;&gt;&gt;</strong> mode(“logo”)   <em># resets turtle heading to north</em><br><strong>&gt;&gt;&gt;</strong> mode()<br>‘logo’</p>\n<p><code>turtle.``colormode</code>(<em>cmode=None</em>)</p>\n<p>参数:</p>\n<p><strong>cmode</strong> -- 数值 1.0 或 255 其中之一</p>\n<p>返回颜色模式或将其设为 1.0 或 255。构成颜色三元组的 <em>r</em>, <em>g</em>, <em>b</em> 数值必须在 0..<em>cmode</em> 范围之内。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.colormode(1)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(240, 160, 80)<br>Traceback (most recent call last):<br>     …<br>TurtleGraphicsError: bad color sequence: (240, 160, 80)<br><strong>&gt;&gt;&gt;</strong> screen.colormode()<br>1.0<br><strong>&gt;&gt;&gt;</strong> screen.colormode(255)<br><strong>&gt;&gt;&gt;</strong> screen.colormode()<br>255<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(240,160,80)</p>\n<p><code>turtle.``getcanvas</code>()</p>\n<p>返回此 TurtleScreen 的 Canvas 对象。供了解 Tkinter 的 Canvas 对象内部机理的人士使用。</p>\n<p><strong>&gt;&gt;&gt;</strong> cv = screen.getcanvas()<br><strong>&gt;&gt;&gt;</strong> cv<br>&lt;turtle.ScrolledCanvas object …&gt;</p>\n<p><code>turtle.``getshapes</code>()</p>\n<p>返回所有当前可用海龟形状的列表。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.getshapes()<br>[‘arrow’, ‘blank’, ‘circle’, …, ‘turtle’]</p>\n<p><code>turtle.``register_shape</code>(<em>name</em>, <em>shape=None</em>)<code>turtle.``addshape</code>(<em>name</em>, <em>shape=None</em>)</p>\n<p>调用此函数有三种不同方式:</p>\n<ol>\n<li><em>name</em> 为一个 gif 文件的文件名， <em>shape</em> 为 <code>None</code>: 安装相应的图像形状。:&gt;&gt;&gt;<strong>&gt;&gt;&gt;</strong> screen.register_shape(“turtle.gif”) 注解 当海龟转向时图像形状 <em>不会</em> 转动，因此无法显示海龟的朝向!</li>\n<li><em>name</em> 为指定的字符串，<em>shape</em> 为由坐标值对构成的元组: 安装相应的多边形形状。<strong>&gt;&gt;&gt;</strong> screen.register_shape(“triangle”, ((5,-3), (0,5), (-5,-3)))</li>\n<li><em>name</em> 为指定的字符串， 为一个 (复合) <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape\" target=\"_blank\" rel=\"noopener\"><code>Shape</code></a> 类对象: 安装相应的复合形状。</li>\n</ol>\n<p>将一个海龟形状加入 TurtleScreen 的形状列表。只有这样注册过的形状才能通过执行 <code>shape(shapename)</code> 命令来使用。<code>turtle.``turtles</code>()</p>\n<p>返回屏幕上的海龟列表。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>for</strong> turtle <strong>in</strong> screen.turtles():<br>*<em>… *</em>    turtle.color(“red”)</p>\n<p><code>turtle.``window_height</code>()</p>\n<p>返回海龟窗口的高度。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.window_height()<br>480</p>\n<p><code>turtle.``window_width</code>()</p>\n<p>返回海龟窗口的宽度。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.window_width()<br>640</p>\n<h3 id=\"Screen-专有方法-而非继承自-TurtleScreen\"><a href=\"#Screen-专有方法-而非继承自-TurtleScreen\" class=\"headerlink\" title=\"Screen 专有方法, 而非继承自 TurtleScreen\"></a>Screen 专有方法, 而非继承自 TurtleScreen</h3><p><code>turtle.``bye</code>()</p>\n<p>关闭海龟绘图窗口。<code>turtle.``exitonclick</code>()</p>\n<p>将 bye() 方法绑定到 Screen 上的鼠标点击事件。</p>\n<p>如果配置字典中 “using_IDLE” 的值为 <code>False</code> (默认值) 则同时进入主事件循环。注: 如果启动 IDLE 时使用了 <code>-n</code> 开关 (无子进程)，<code>turtle.cfg</code> 中此数值应设为 <code>True</code>。在此情况下 IDLE 本身的主事件循环同样会作用于客户脚本。<code>turtle.``setup</code>(<em>width=_CFG[“width”], height=_CFG[“height”], startx=_CFG[“leftright”], starty=_CFG[“topbottom”]</em>)</p>\n<p>设置主窗口的大小和位置。默认参数值保存在配置字典中，可通过 <code>turtle.cfg</code> 文件进行修改。</p>\n<p>参数:</p>\n<p><strong>width</strong> -- 如为一个整型数值，表示大小为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 50%<strong>height</strong> -- 如为一个整型数值，表示高度为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 75%<strong>startx</strong> -- 如为正值，表示初始位置距离屏幕左边缘多少像素，负值表示距离右边缘，<code>None</code> 表示窗口水平居中<strong>starty</strong> -- 如为正值，表示初始位置距离屏幕上边缘多少像素，负值表示距离下边缘，<code>None</code> 表示窗口垂直居中</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.setup (width=200, height=200, startx=0, starty=0)<br><strong>&gt;&gt;&gt; **             <em># sets window to 200x200 pixels, in upper left of screen</em><br>**&gt;&gt;&gt;</strong> screen.setup(width=.75, height=0.5, startx=None, starty=None)<br>*<em>&gt;&gt;&gt; *</em>             <em># sets window to 75% of screen by 50% of screen and centers</em></p>\n<p><code>turtle.``title</code>(<em>titlestring</em>)</p>\n<p>参数:</p>\n<p><strong>titlestring</strong> -- 一个字符串，显示为海龟绘图窗口的标题栏文本</p>\n<p>设置海龟窗口标题为 <em>titlestring</em> 指定的文本。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.title(“Welcome to the turtle zoo!”)</p>\n<h2 id=\"公共类\"><a href=\"#公共类\" class=\"headerlink\" title=\"公共类\"></a>公共类</h2><p><em>class _<code>turtle.``RawTurtle</code>(_canvas</em>)<em>class _<code>turtle.``RawPen</code>(_canvas</em>)</p>\n<p>参数:</p>\n<p><strong>canvas</strong> -- 一个 <code>tkinter.Canvas</code> , <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas\" target=\"_blank\" rel=\"noopener\"><code>ScrolledCanvas</code></a> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 类对象</p>\n<p>创建一个海龟。海龟对象具有 “Turtle/RawTurtle 方法” 一节所述的全部方法。_class _<code>turtle.``Turtle</code></p>\n<p>RawTurtle 的子类，具有相同的接口，但其绘图场所为默认的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen</code></a> 类对象，在首次使用时自动创建。<em>class _<code>turtle.``TurtleScreen</code>(_cv</em>)</p>\n<p>参数:</p>\n<p><strong>cv</strong> -- 一个 <code>tkinter.Canvas</code> 类对象</p>\n<p>提供面向屏幕的方法例如 <code>setbg()</code> 等。说明见上文。_class _<code>turtle.``Screen</code></p>\n<p>TurtleScreen 的子类，<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#screenspecific\" target=\"_blank\" rel=\"noopener\">增加了四个方法</a>.<em>class _<code>turtle.``ScrolledCanvas</code>(_master</em>)</p>\n<p>参数:</p>\n<p><strong>master</strong> -- 可容纳 ScrolledCanvas 的 Tkinter 部件，即添加了滚动条的 Tkinter-canvas</p>\n<p>由 Screen 类使用，使其能够自动提供一个 ScrolledCanvas 作为海龟的绘图场所。<em>class <em><code>turtle.``Shape</code>(<em>type</em></em>, _data</em>)</p>\n<p>参数:</p>\n<p><strong>type_</strong> -- 字符串 “polygon”, “image”, “compound” 其中之一</p>\n<p>实现形状的数据结构。<code>(type_, data)</code> 必须遵循以下定义:</p>\n<p><em>type_</em></p>\n<p><em>data</em></p>\n<p>“polygon”</p>\n<p>一个多边形元组，即由坐标值对构成的元组</p>\n<p>“image”</p>\n<p>一个图片 (此形式仅限内部使用!)</p>\n<p>“compound”</p>\n<p><code>None</code> (复合形状必须使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape.addcomponent\" target=\"_blank\" rel=\"noopener\"><code>addcomponent()</code></a> 方法来构建)</p>\n<p><code>addcomponent</code>(<em>poly</em>, <em>fill</em>, <em>outline=None</em>)</p>\n<p>参数:</p>\n<p><strong>poly</strong> -- 一个多边形，即由数值对构成的元组<strong>fill</strong> -- 一种颜色，将用来填充 <em>poly</em> 指定的多边形<strong>outline</strong> -- 一种颜色，用于多边形的轮廓 (如有指定)</p>\n<p>示例:</p>\n<p><strong>&gt;&gt;&gt;</strong> poly = ((0,0),(10,-5),(0,10),(-10,-5))<br><strong>&gt;&gt;&gt;</strong> s = Shape(“compound”)<br><strong>&gt;&gt;&gt;</strong> s.addcomponent(poly, “red”, “blue”)<br><strong>&gt;&gt;&gt;</strong> <em># … add more components and then use register_shape()</em></p>\n<p>参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#compoundshapes\" target=\"_blank\" rel=\"noopener\">复合形状</a>。<em>class _<code>turtle.``Vec2D</code>(_x</em>, <em>y</em>)</p>\n<p>一个二维矢量类，用来作为实现海龟绘图的辅助类。也可能在海龟绘图程序中使用。派生自元组，因此矢量也属于元组!</p>\n<p>提供的运算 (<em>a</em>, <em>b</em> 为矢量, <em>k</em> 为数值):</p>\n<ul>\n<li><code>a + b</code> 矢量加法</li>\n<li><code>a - b</code> 矢量减法</li>\n<li><code>a * b</code> 内积</li>\n<li><code>k * a</code> 和 <code>a * k</code> 与标量相乘</li>\n<li><code>abs(a)</code> a 的绝对值</li>\n<li><code>a.rotate(angle)</code> 旋转</li>\n</ul>\n<h2 id=\"帮助与配置\"><a href=\"#帮助与配置\" class=\"headerlink\" title=\"帮助与配置\"></a>帮助与配置</h2><h3 id=\"如何使用帮助\"><a href=\"#如何使用帮助\" class=\"headerlink\" title=\"如何使用帮助\"></a>如何使用帮助</h3><p>Screen 和 Turtle 类的公用方法以文档字符串提供了详细的文档。因此可以利用 Python 帮助工具获取这些在线帮助信息:</p>\n<ul>\n<li>当使用 IDLE 时，输入函数/方法调用将弹出工具提示显示其签名和文档字符串的头几行。</li>\n<li>对文法或函数调用 <a href=\"https://docs.python.org/zh-cn/3.7/library/functions.html#help\" target=\"_blank\" rel=\"noopener\"><code>help()</code></a> 将显示其文档字符串:&gt;&gt;&gt;<strong>&gt;&gt;&gt;</strong> help(Screen.bgcolor) Help on method bgcolor in module turtle: bgcolor(self, <em>args) unbound turtle.Screen method Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. &gt;&gt;&gt; screen.bgcolor(“orange”) &gt;&gt;&gt; screen.bgcolor() “orange” &gt;&gt;&gt; screen.bgcolor(0.5,0,0.5) &gt;&gt;&gt; screen.bgcolor() “#800080” *</em>&gt;&gt;&gt;** help(Turtle.penup) Help on method penup in module turtle: penup(self) unbound turtle.Turtle method Pull the pen up – no drawing when moving. Aliases: penup | pu | up No argument &gt;&gt;&gt; turtle.penup()</li>\n<li>方法对应函数的文档字符串的形式会有一些修改:&gt;&gt;&gt;<strong>&gt;&gt;&gt;</strong> help(bgcolor) Help on function bgcolor in module turtle: bgcolor(<em>args) Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. Example:: &gt;&gt;&gt; bgcolor(“orange”) &gt;&gt;&gt; bgcolor() “orange” &gt;&gt;&gt; bgcolor(0.5,0,0.5) &gt;&gt;&gt; bgcolor() “#800080” *</em>&gt;&gt;&gt;** help(penup) Help on function penup in module turtle: penup() Pull the pen up – no drawing when moving. Aliases: penup | pu | up No argument Example: &gt;&gt;&gt; penup()</li>\n</ul>\n<p>这些修改版文档字符串是在导入时与方法对应函数的定义一起自动生成的。</p>\n<h3 id=\"文档字符串翻译为不同的语言\"><a href=\"#文档字符串翻译为不同的语言\" class=\"headerlink\" title=\"文档字符串翻译为不同的语言\"></a>文档字符串翻译为不同的语言</h3><p>可使用工具创建一个字典，键为方法名，值为 Screen 和 Turtle 类公共方法的文档字符串。<code>turtle.``write_docstringdict</code>(<em>filename=”turtle_docstringdict”</em>)</p>\n<p>参数:</p>\n<p><strong>filename</strong> -- 一个字符串，表示文件名</p>\n<p>创建文档字符串字典并将其写入 filename 指定的 Python 脚本文件。此函数必须显示地调用 (海龟绘图类并不使用此函数)。文档字符串字典将被写入到 Python 脚本文件 <code>_filename_.py</code>。该文件可作为模板用来将文档字符串翻译为不同语言。</p>\n<p>如果你 (或你的学生) 想使用本国语言版本的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 在线帮助，你必须翻译文档字符串并保存结果文件，例如 <code>turtle_docstringdict_german.py</code>.</p>\n<p>如果你在 <code>turtle.cfg</code> 文件中加入了相应的条目，此字典将在导入模块时被读取并替代原有的英文版文档字符串。</p>\n<p>在撰写本文档时已经有了德语和意大利语版的文档字符串字典。(更多需求请联系 <a href=\"mailto:glingl%40aon.at\" target=\"_blank\" rel=\"noopener\">glingl@aon.at</a>)</p>\n<h3 id=\"如何配置-Screen-和-Turtle\"><a href=\"#如何配置-Screen-和-Turtle\" class=\"headerlink\" title=\"如何配置 Screen 和 Turtle\"></a>如何配置 Screen 和 Turtle</h3><p>内置的默认配置是模仿旧 turtle 模块的外观和行为，以便尽可能地与其保持兼容。</p>\n<p>如果你想使用不同的配置，以便更好地反映此模块的特性或是更适合你的需求，例如在课堂中使用，你可以准备一个配置文件 <code>turtle.cfg</code>，该文件将在导入模块时被读取并根据其中的设定修改模块配置。</p>\n<p>内置的配置对应以下的 turtle.cfg:</p>\n<p>width = 0.5<br>height = 0.75<br>leftright = <strong>None</strong><br>topbottom = <strong>None</strong><br>canvwidth = 400<br>canvheight = 300<br>mode = standard<br>colormode = 1.0<br>delay = 10<br>undobuffersize = 1000<br>shape = classic<br>pencolor = black<br>fillcolor = black<br>resizemode = noresize<br>visible = <strong>True</strong><br>language = english<br>exampleturtle = turtle<br>examplescreen = screen<br>title = Python Turtle Graphics<br>using_IDLE = <strong>False</strong></p>\n<p>选定条目的简短说明:</p>\n<ul>\n<li>开头的四行对应 <code>Screen.setup()</code> 方法的参数。</li>\n<li>第 5 和 6 行对应 <code>Screen.screensize()</code> 方法的参数。</li>\n<li><em>shape</em> 可以是任何内置形状，即: arrow, turtle 等。更多信息可用 <code>help(shape)</code> 查看。</li>\n<li>如果你想使用无填充色 (即令海龟变透明)，你必须写 <code>fillcolor = &quot;&quot;</code> (但 cfg 文件中所有非空字符串都不可加引号)。</li>\n<li>如果你想令海龟反映其状态，你必须使用 <code>resizemode = auto</code>。</li>\n<li>如果你设置语言例如 <code>language = italian</code> 则文档字符串字典 <code>turtle_docstringdict_italian.py</code> 将在导入模块时被加载 (如果导入路径即 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 的目录中存在此文件。</li>\n<li><em>exampleturtle</em> 和 <em>examplescreen</em> 条目定义了相应对象在文档字符串中显示的名称。方法文档字符串转换为函数文档字符串时将从文档字符串中删去这些名称。</li>\n<li><em>using_IDLE</em>: 如果你经常使用 IDLE 并启用其 -n 开关 (“无子进程”) 则应将此项设为 <code>True</code>，这将阻止 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick\" target=\"_blank\" rel=\"noopener\"><code>exitonclick()</code></a> 进入主事件循环。</li>\n</ul>\n<p><code>turtle.cfg</code> 文件可以保存于 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 所在目录，当前工作目录也可以有一个同名文件。后者会重载覆盖前者的设置。</p>\n<p><code>Lib/turtledemo</code> 目录中也有一个 <code>turtle.cfg</code> 文件。你可以将其作为示例进行研究，并在运行演示时查看其作用效果 (但最好不要在演示查看器中运行)。</p>\n<h2 id=\"turtledemo-演示脚本集\"><a href=\"#turtledemo-演示脚本集\" class=\"headerlink\" title=\"turtledemo --- 演示脚本集\"></a><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo\" target=\"_blank\" rel=\"noopener\"><code>turtledemo</code></a> --- 演示脚本集</h2><p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo\" target=\"_blank\" rel=\"noopener\"><code>turtledemo</code></a> 包汇集了一组演示脚本。这些脚本可以通过以下命令打开所提供的演示查看器运行和查看:</p>\n<p>python -m turtledemo</p>\n<p>此外，你也可以单独运行其中的演示脚本。例如，:</p>\n<p>python -m turtledemo.bytedesign</p>\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo\" target=\"_blank\" rel=\"noopener\"><code>turtledemo</code></a> 包目录中的内容:</p>\n<ul>\n<li>一个演示查看器 <code>__main__.py</code>，可用来查看脚本的源码并即时运行。</li>\n<li>多个脚本文件，演示 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 模块的不同特性。所有示例可通过 Examples 菜单打开。也可以单独运行每个脚本。</li>\n<li>一个 <code>turtle.cfg</code> 文件，作为说明如何编写并使用模块配置文件的示例模板。</li>\n</ul>\n<p>演示脚本清单如下:</p>\n<p>名称</p>\n<p>描述</p>\n<p>相关特性</p>\n<p>bytedesign</p>\n<p>复杂的传统海龟绘图模式</p>\n<p><code>tracer()</code>, delay, <code>update()</code></p>\n<p>chaos</p>\n<p>绘制 Verhulst 动态模型，演示通过计算机的运算可能会生成令人惊叹的结果</p>\n<p>世界坐标系</p>\n<p>clock</p>\n<p>绘制模拟时钟显示本机的当前时间</p>\n<p>海龟作为表针, ontimer</p>\n<p>colormixer</p>\n<p>试验 r, g, b 颜色模式</p>\n<p><code>ondrag()</code> 当鼠标拖动</p>\n<p>forest</p>\n<p>绘制 3 棵广度优先树</p>\n<p>随机化</p>\n<p>fractalcurves</p>\n<p>绘制 Hilbert &amp; Koch 曲线</p>\n<p>递归</p>\n<p>lindenmayer</p>\n<p>文化数学 (印度装饰艺术)</p>\n<p>L-系统</p>\n<p>minimal_hanoi</p>\n<p>汉诺塔</p>\n<p>矩形海龟作为汉诺盘 (shape, shapesize)</p>\n<p>nim</p>\n<p>玩经典的“尼姆”游戏，开始时有三堆小棒，与电脑对战。</p>\n<p>海龟作为小棒，事件驱动 (鼠标, 键盘)</p>\n<p>paint</p>\n<p>超极简主义绘画程序</p>\n<p><code>onclick()</code> 当鼠标点击</p>\n<p>peace</p>\n<p>初级技巧</p>\n<p>海龟: 外观与动画</p>\n<p>penrose</p>\n<p>非周期性地使用风筝和飞镖形状铺满平面</p>\n<p><code>stamp()</code> 印章</p>\n<p>planet_and_moon</p>\n<p>模拟引力系统</p>\n<p>复合开关, <code>Vec2D</code> 类</p>\n<p>round_dance</p>\n<p>两两相对并不断旋转舞蹈的海龟</p>\n<p>复合形状, clone shapesize, tilt, get_shapepoly, update</p>\n<p>sorting_animate</p>\n<p>动态演示不同的排序方法</p>\n<p>简单对齐, 随机化</p>\n<p>tree</p>\n<p>一棵 (图形化的) 广度优先树 (使用生成器)</p>\n<p><code>clone()</code> 克隆</p>\n<p>two_canvases</p>\n<p>简单设计</p>\n<p>两块画布上的海龟</p>\n<p>wikipedia</p>\n<p>一个来自介绍海龟绘图的维基百科文章的图案</p>\n<p><code>clone()</code>, <code>undo()</code></p>\n<p>yinyang</p>\n<p>另一个初级示例</p>\n<p><code>circle()</code> 画圆</p>\n<p>祝你玩得开心！</p>\n","site":{"data":{}},"excerpt":"<p>海龟绘图 开发文档<br>url: 16.html<br>id: 16<br>categories:</p>\n<ul>\n<li>Python初学<br>date: 2019-08-09 17:33:22<br>tags:</li>\n</ul>\n<hr>\n<p>海龟绘图 开发文档<br>url: 16.html<br>id: 16<br>categories:</p>\n<ul>\n<li>Python初学<br>tags:Python</li>\n</ul>\n<hr>\n<p><strong>源码：</strong> <a href=\"https://github.com/python/cpython/tree/3.7/Lib/turtle.py\" target=\"_blank\" rel=\"noopener\">Lib/turtle.py</a></p>\n<hr>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>海龟绘图很适合用来引导孩子学习编程。最初来自于 Wally Feurzig 和 Seymour Papert 于 1966 年所创造的 Logo 编程语言。</p>","more":"<p>请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 <code>import turtle</code>，再执行 <code>turtle.forward(15)</code>，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 <code>turtle.right(25)</code>，它将原地右转 25 度。</p>\n<p>Turtle star</p>\n<p>使用海龟绘图可以编写重复执行简单动作的程序画出精细复杂的形状。</p>\n<p><img src=\"https://docs.python.org/zh-cn/3.7/_images/turtle-star.png\" alt=\"../_images/turtle-star.png\"></p>\n<p><strong>from</strong> <strong>turtle</strong> <strong>import</strong> *\ncolor(‘red’, ‘yellow’)<br>begin_fill()<br><strong>while</strong> <strong>True</strong>:\n    forward(200)<br>    left(170)<br>    <strong>if</strong> abs(pos()) &lt; 1:<br>        <strong>break</strong><br>end_fill()<br>done()</p>\n<p>通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。</p>\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 模块是基于 Python 标准发行版 2.5 以来的同名模块重新编写并进行了功能扩展。</p>\n<p>新模块尽量保持了原模块的特点，并且(几乎)100%与其兼容。这就意味着初学编程者能够以交互方式使用模块的所有命令、类和方法——运行 IDLE 时注意加 <code>-n</code> 参数。</p>\n<p>turtle 模块提供面向对象和面向过程两种形式的海龟绘图基本组件。由于它使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/tkinter.html#module-tkinter\" target=\"_blank\" rel=\"noopener\"><code>tkinter</code></a> 实现基本图形界面，因此需要安装了 Tk 支持的 Python 版本。</p>\n<p>面向对象的接口主要使用“2+2”个类：</p>\n<ol>\n<li><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 类定义图形窗口作为绘图海龟的运动场。它的构造器需要一个 <code>tkinter.Canvas</code> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas\" target=\"_blank\" rel=\"noopener\"><code>ScrolledCanvas</code></a> 作为参数。应在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 作为某个程序的一部分的时候使用。<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen()</code></a> 函数返回一个 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 子类的单例对象。此函数应在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 作为独立绘图工具时使用。作为一个单例对象，其所属的类是不可被继承的。TurtleScreen/Screen 的所有方法还存在对应的函数，即作为面向过程的接口组成部分。</li>\n<li><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawTurtle\" target=\"_blank\" rel=\"noopener\"><code>RawTurtle</code></a> (别名: <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.RawPen\" target=\"_blank\" rel=\"noopener\"><code>RawPen</code></a>) 类定义海龟对象在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a>上绘图。它的构造器需要一个 Canvas, ScrolledCanvas 或 TurtleScreen 作为参数，以指定 RawTurtle 对象在哪里绘图。从 RawTurtle 派生出子类 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle\" target=\"_blank\" rel=\"noopener\"><code>Turtle</code></a> (别名: <code>Pen</code>)，该类对象在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen</code></a> 实例上绘图，如果实例不存在则会自动创建。RawTurtle/Turtle 的所有方法也存在对应的函数，即作为面向过程的接口组成部分。</li>\n</ol>\n<p>过程式接口提供与 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Turtle\" target=\"_blank\" rel=\"noopener\"><code>Turtle</code></a> 类的方法相对应的函数。函数名与对应的方法名相同。当 Screen 类的方法对应函数被调用时会自动创建一个 Screen 对象。当 Turtle 类的方法对应函数被调用时会自动创建一个 (匿名的) Turtle 对象。</p>\n<p>如果屏幕上需要有多个海龟，就必须使用面向对象的接口。</p>\n<p>注解</p>\n<p>以下文档给出了函数的参数列表。对于方法来说当然还有额外的第一个参数 _self_，这里省略了。</p>\n<h2 id=\"可用的-Turtle-和-Screen-方法概览\"><a href=\"#可用的-Turtle-和-Screen-方法概览\" class=\"headerlink\" title=\"可用的 Turtle 和 Screen 方法概览\"></a>可用的 Turtle 和 Screen 方法概览</h2><h3 id=\"Turtle-方法\"><a href=\"#Turtle-方法\" class=\"headerlink\" title=\"Turtle 方法\"></a>Turtle 方法</h3><p>海龟动作移动和绘制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.forward\" target=\"_blank\" rel=\"noopener\"><code>forward()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fd\" target=\"_blank\" rel=\"noopener\"><code>fd()</code></a> 前进<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.backward\" target=\"_blank\" rel=\"noopener\"><code>backward()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bk\" target=\"_blank\" rel=\"noopener\"><code>bk()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.back\" target=\"_blank\" rel=\"noopener\"><code>back()</code></a> 后退<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.right\" target=\"_blank\" rel=\"noopener\"><code>right()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.rt\" target=\"_blank\" rel=\"noopener\"><code>rt()</code></a> 右转<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.left\" target=\"_blank\" rel=\"noopener\"><code>left()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.lt\" target=\"_blank\" rel=\"noopener\"><code>lt()</code></a> 左转<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.goto\" target=\"_blank\" rel=\"noopener\"><code>goto()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setpos\" target=\"_blank\" rel=\"noopener\"><code>setpos()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setposition\" target=\"_blank\" rel=\"noopener\"><code>setposition()</code></a> 前往/定位<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setx\" target=\"_blank\" rel=\"noopener\"><code>setx()</code></a> 设置x坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.sety\" target=\"_blank\" rel=\"noopener\"><code>sety()</code></a> 设置y坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setheading\" target=\"_blank\" rel=\"noopener\"><code>setheading()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.seth\" target=\"_blank\" rel=\"noopener\"><code>seth()</code></a> 设置朝向<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.home\" target=\"_blank\" rel=\"noopener\"><code>home()</code></a> 返回原点<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.circle\" target=\"_blank\" rel=\"noopener\"><code>circle()</code></a> 画圆<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.dot\" target=\"_blank\" rel=\"noopener\"><code>dot()</code></a> 画点<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp\" target=\"_blank\" rel=\"noopener\"><code>stamp()</code></a> 印章<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamp\" target=\"_blank\" rel=\"noopener\"><code>clearstamp()</code></a> 清除印章<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearstamps\" target=\"_blank\" rel=\"noopener\"><code>clearstamps()</code></a> 清除多个印章<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo\" target=\"_blank\" rel=\"noopener\"><code>undo()</code></a> 撤消<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed\" target=\"_blank\" rel=\"noopener\"><code>speed()</code></a> 速度获取海龟的状态<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.position\" target=\"_blank\" rel=\"noopener\"><code>position()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos\" target=\"_blank\" rel=\"noopener\"><code>pos()</code></a> 位置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.towards\" target=\"_blank\" rel=\"noopener\"><code>towards()</code></a> 目标方向<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.xcor\" target=\"_blank\" rel=\"noopener\"><code>xcor()</code></a> x坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ycor\" target=\"_blank\" rel=\"noopener\"><code>ycor()</code></a> y坐标<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.heading\" target=\"_blank\" rel=\"noopener\"><code>heading()</code></a> 朝向<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.distance\" target=\"_blank\" rel=\"noopener\"><code>distance()</code></a> 距离设置与度量单位<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees\" target=\"_blank\" rel=\"noopener\"><code>degrees()</code></a> 角度<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians\" target=\"_blank\" rel=\"noopener\"><code>radians()</code></a> 弧度画笔控制绘图状态<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pendown\" target=\"_blank\" rel=\"noopener\"><code>pendown()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pd\" target=\"_blank\" rel=\"noopener\"><code>pd()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.down\" target=\"_blank\" rel=\"noopener\"><code>down()</code></a> 画笔落下<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.penup\" target=\"_blank\" rel=\"noopener\"><code>penup()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pu\" target=\"_blank\" rel=\"noopener\"><code>pu()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.up\" target=\"_blank\" rel=\"noopener\"><code>up()</code></a> 画笔抬起<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pensize\" target=\"_blank\" rel=\"noopener\"><code>pensize()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.width\" target=\"_blank\" rel=\"noopener\"><code>width()</code></a> 画笔粗细<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen\" target=\"_blank\" rel=\"noopener\"><code>pen()</code></a> 画笔<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isdown\" target=\"_blank\" rel=\"noopener\"><code>isdown()</code></a> 画笔是否落下颜色控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.color\" target=\"_blank\" rel=\"noopener\"><code>color()</code></a> 颜色<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor\" target=\"_blank\" rel=\"noopener\"><code>pencolor()</code></a> 画笔颜色<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor\" target=\"_blank\" rel=\"noopener\"><code>fillcolor()</code></a> 填充颜色填充<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.filling\" target=\"_blank\" rel=\"noopener\"><code>filling()</code></a> 是否填充<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill\" target=\"_blank\" rel=\"noopener\"><code>begin_fill()</code></a> 开始填充<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_fill\" target=\"_blank\" rel=\"noopener\"><code>end_fill()</code></a> 结束填充更多绘图控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset\" target=\"_blank\" rel=\"noopener\"><code>reset()</code></a> 重置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear\" target=\"_blank\" rel=\"noopener\"><code>clear()</code></a> 清空<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.write\" target=\"_blank\" rel=\"noopener\"><code>write()</code></a> 书写海龟状态可见性<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.showturtle\" target=\"_blank\" rel=\"noopener\"><code>showturtle()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.st\" target=\"_blank\" rel=\"noopener\"><code>st()</code></a> 显示海龟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.hideturtle\" target=\"_blank\" rel=\"noopener\"><code>hideturtle()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ht\" target=\"_blank\" rel=\"noopener\"><code>ht()</code></a> 隐藏海龟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.isvisible\" target=\"_blank\" rel=\"noopener\"><code>isvisible()</code></a> 是否可见外观<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shape\" target=\"_blank\" rel=\"noopener\"><code>shape()</code></a> 形状<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resizemode\" target=\"_blank\" rel=\"noopener\"><code>resizemode()</code></a> 大小调整模式<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize\" target=\"_blank\" rel=\"noopener\"><code>shapesize()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtlesize\" target=\"_blank\" rel=\"noopener\"><code>turtlesize()</code></a> 形状大小<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shearfactor\" target=\"_blank\" rel=\"noopener\"><code>shearfactor()</code></a> 剪切因子<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.settiltangle\" target=\"_blank\" rel=\"noopener\"><code>settiltangle()</code></a> 设置倾角<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tiltangle\" target=\"_blank\" rel=\"noopener\"><code>tiltangle()</code></a> 倾角<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tilt\" target=\"_blank\" rel=\"noopener\"><code>tilt()</code></a> 倾斜<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapetransform\" target=\"_blank\" rel=\"noopener\"><code>shapetransform()</code></a> 变形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_shapepoly\" target=\"_blank\" rel=\"noopener\"><code>get_shapepoly()</code></a> 获取形状多边形使用事件<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick\" target=\"_blank\" rel=\"noopener\"><code>onclick()</code></a> 当鼠标点击<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onrelease\" target=\"_blank\" rel=\"noopener\"><code>onrelease()</code></a> 当鼠标释放<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ondrag\" target=\"_blank\" rel=\"noopener\"><code>ondrag()</code></a> 当鼠标拖动特殊海龟方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_poly\" target=\"_blank\" rel=\"noopener\"><code>begin_poly()</code></a> 开始记录多边形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.end_poly\" target=\"_blank\" rel=\"noopener\"><code>end_poly()</code></a> 结束记录多边形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.get_poly\" target=\"_blank\" rel=\"noopener\"><code>get_poly()</code></a> 获取多边形<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clone\" target=\"_blank\" rel=\"noopener\"><code>clone()</code></a> 克隆<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getturtle\" target=\"_blank\" rel=\"noopener\"><code>getturtle()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getpen\" target=\"_blank\" rel=\"noopener\"><code>getpen()</code></a> 获取海龟画笔<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getscreen\" target=\"_blank\" rel=\"noopener\"><code>getscreen()</code></a> 获取屏幕<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setundobuffer\" target=\"_blank\" rel=\"noopener\"><code>setundobuffer()</code></a> 设置撤消缓冲区<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undobufferentries\" target=\"_blank\" rel=\"noopener\"><code>undobufferentries()</code></a> 撤消缓冲区条目数</p>\n<h3 id=\"TurtleScreen-Screen-方法\"><a href=\"#TurtleScreen-Screen-方法\" class=\"headerlink\" title=\"TurtleScreen/Screen 方法\"></a>TurtleScreen/Screen 方法</h3><p>窗口控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgcolor\" target=\"_blank\" rel=\"noopener\"><code>bgcolor()</code></a> 背景颜色<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bgpic\" target=\"_blank\" rel=\"noopener\"><code>bgpic()</code></a> 背景图片<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clear\" target=\"_blank\" rel=\"noopener\"><code>clear()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.clearscreen\" target=\"_blank\" rel=\"noopener\"><code>clearscreen()</code></a> 清屏<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.reset\" target=\"_blank\" rel=\"noopener\"><code>reset()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.resetscreen\" target=\"_blank\" rel=\"noopener\"><code>resetscreen()</code></a> 重置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.screensize\" target=\"_blank\" rel=\"noopener\"><code>screensize()</code></a> 屏幕大小<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setworldcoordinates\" target=\"_blank\" rel=\"noopener\"><code>setworldcoordinates()</code></a> 设置世界坐标系动画控制<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay\" target=\"_blank\" rel=\"noopener\"><code>delay()</code></a> 延迟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.tracer\" target=\"_blank\" rel=\"noopener\"><code>tracer()</code></a> 追踪<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.update\" target=\"_blank\" rel=\"noopener\"><code>update()</code></a> 更新使用屏幕事件<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 监听<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkey\" target=\"_blank\" rel=\"noopener\"><code>onkey()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeyrelease\" target=\"_blank\" rel=\"noopener\"><code>onkeyrelease()</code></a> 当键盘按下并释放<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onkeypress\" target=\"_blank\" rel=\"noopener\"><code>onkeypress()</code></a> 当键盘按下<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onclick\" target=\"_blank\" rel=\"noopener\"><code>onclick()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.onscreenclick\" target=\"_blank\" rel=\"noopener\"><code>onscreenclick()</code></a> 当点击屏幕<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ontimer\" target=\"_blank\" rel=\"noopener\"><code>ontimer()</code></a> 当达到定时<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mainloop\" target=\"_blank\" rel=\"noopener\"><code>mainloop()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.done\" target=\"_blank\" rel=\"noopener\"><code>done()</code></a> 主循环设置与特殊方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a> 模式<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a> 颜色模式<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getcanvas\" target=\"_blank\" rel=\"noopener\"><code>getcanvas()</code></a> 获取画布<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.getshapes\" target=\"_blank\" rel=\"noopener\"><code>getshapes()</code></a> 获取形状<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape\" target=\"_blank\" rel=\"noopener\"><code>register_shape()</code></a> | <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.addshape\" target=\"_blank\" rel=\"noopener\"><code>addshape()</code></a> 添加形状<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.turtles\" target=\"_blank\" rel=\"noopener\"><code>turtles()</code></a> 所有海龟<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_height\" target=\"_blank\" rel=\"noopener\"><code>window_height()</code></a> 窗口高度<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.window_width\" target=\"_blank\" rel=\"noopener\"><code>window_width()</code></a> 窗口宽度输入方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.textinput\" target=\"_blank\" rel=\"noopener\"><code>textinput()</code></a> 文本输入<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.numinput\" target=\"_blank\" rel=\"noopener\"><code>numinput()</code></a> 数字输入Screen 专有方法<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.bye\" target=\"_blank\" rel=\"noopener\"><code>bye()</code></a> 退出<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick\" target=\"_blank\" rel=\"noopener\"><code>exitonclick()</code></a> 当点击时退出<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.setup\" target=\"_blank\" rel=\"noopener\"><code>setup()</code></a> 设置<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.title\" target=\"_blank\" rel=\"noopener\"><code>title()</code></a> 标题</p>\n<h2 id=\"RawTurtle-Turtle-方法和对应函数\"><a href=\"#RawTurtle-Turtle-方法和对应函数\" class=\"headerlink\" title=\"RawTurtle/Turtle 方法和对应函数\"></a>RawTurtle/Turtle 方法和对应函数</h2><p>本节中的大部分示例都使用 Turtle 类的一个实例，命名为 <code>turtle</code>。</p>\n<h3 id=\"海龟动作\"><a href=\"#海龟动作\" class=\"headerlink\" title=\"海龟动作\"></a>海龟动作</h3><p><code>turtle.``forward</code>(<em>distance</em>)<code>turtle.``fd</code>(<em>distance</em>)</p>\n<p>参数:</p>\n<p><strong>distance</strong> -- 一个数值 (整型或浮点型)</p>\n<p>海龟前进 <em>distance</em> 指定的距离，方向为海龟的朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(25)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(25.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(-75)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(-50.00,0.00)</p>\n<p><code>turtle.``back</code>(<em>distance</em>)<code>turtle.``bk</code>(<em>distance</em>)<code>turtle.``backward</code>(<em>distance</em>)</p>\n<p>参数:</p>\n<p><strong>distance</strong> -- 一个数值</p>\n<p>海龟后退 <em>distance</em> 指定的距离，方向与海龟的朝向相反。不改变海龟的朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.backward(30)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(-30.00,0.00)</p>\n<p><code>turtle.``right</code>(<em>angle</em>)<code>turtle.``rt</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值 (整型或浮点型)</p>\n<p>海龟右转 <em>angle</em> 个单位。(单位默认为角度，但可通过 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees\" target=\"_blank\" rel=\"noopener\"><code>degrees()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians\" target=\"_blank\" rel=\"noopener\"><code>radians()</code></a> 函数改变设置。) 角度的正负由海龟模式确定，参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>22.0<br><strong>&gt;&gt;&gt;</strong> turtle.right(45)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>337.0</p>\n<p><code>turtle.``left</code>(<em>angle</em>)<code>turtle.``lt</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值 (整型或浮点型)</p>\n<p>海龟左转 <em>angle</em> 个单位。(单位默认为角度，但可通过 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.degrees\" target=\"_blank\" rel=\"noopener\"><code>degrees()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.radians\" target=\"_blank\" rel=\"noopener\"><code>radians()</code></a> 函数改变设置。) 角度的正负由海龟模式确定，参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>22.0<br><strong>&gt;&gt;&gt;</strong> turtle.left(45)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>67.0</p>\n<p><code>turtle.``goto</code>(<em>x</em>, <em>y=None</em>)<code>turtle.``setpos</code>(<em>x</em>, <em>y=None</em>)<code>turtle.``setposition</code>(<em>x</em>, <em>y=None</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值或数值对/向量<strong>y</strong> -- 一个数值或 <code>None</code></p>\n<p>如果 <em>y</em> 为 <code>None</code>，<em>x</em> 应为一个表示坐标的数值对或 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D\" target=\"_blank\" rel=\"noopener\"><code>Vec2D</code></a> 类对象 (例如 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pos\" target=\"_blank\" rel=\"noopener\"><code>pos()</code></a> 返回的对象).</p>\n<p>海龟移动到一个绝对坐标。如果画笔已落下将会画线。不改变海龟的朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> tp = turtle.pos()<br><strong>&gt;&gt;&gt;</strong> tp<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setpos(60,30)<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(60.00,30.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setpos((20,80))<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(20.00,80.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setpos(tp)<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(0.00,0.00)</p>\n<p><code>turtle.``setx</code>(<em>x</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值 (整型或浮点型)</p>\n<p>设置海龟的横坐标为 <em>x</em>，纵坐标保持不变。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,240.00)<br><strong>&gt;&gt;&gt;</strong> turtle.setx(10)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(10.00,240.00)</p>\n<p><code>turtle.``sety</code>(<em>y</em>)</p>\n<p>参数:</p>\n<p><strong>y</strong> -- 一个数值 (整型或浮点型)</p>\n<p>设置海龟的纵坐标为 <em>y</em>，横坐标保持不变。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,40.00)<br><strong>&gt;&gt;&gt;</strong> turtle.sety(-10)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,-10.00)</p>\n<p><code>turtle.``setheading</code>(<em>to_angle</em>)<code>turtle.``seth</code>(<em>to_angle</em>)</p>\n<p>参数:</p>\n<p><strong>to_angle</strong> -- 一个数值 (整型或浮点型)</p>\n<p>设置海龟的朝向为 _to_angle_。以下是以角度表示的几个常用方向：</p>\n<p>标准模式</p>\n<p>logo 模式</p>\n<p>0 - 东</p>\n<p>0 - 北</p>\n<p>90 - 北</p>\n<p>90 - 东</p>\n<p>180 - 西</p>\n<p>180 - 南</p>\n<p>270 - 南</p>\n<p>270 - 西</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.setheading(90)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0</p>\n<p><code>turtle.``home</code>()</p>\n<p>海龟移至初始坐标 (0,0)，并设置朝向为初始方向 (由海龟模式确定，参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,-10.00)<br><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0</p>\n<p><code>turtle.``circle</code>(<em>radius</em>, <em>extent=None</em>, <em>steps=None</em>)</p>\n<p>参数:</p>\n<p><strong>radius</strong> -- 一个数值<strong>extent</strong> -- 一个数值 (或 <code>None</code>)<strong>steps</strong> -- 一个整型数 (或 <code>None</code>)</p>\n<p>绘制一个 <em>radius</em> 指定半径的圆。圆心在海龟左边 <em>radius</em> 个单位；<em>extent</em> 为一个夹角，用来决定绘制圆的一部分。如未指定 <em>extent*则绘制整个圆。如果 *extent</em> 不是完整圆周，则以当前画笔位置为一个端点绘制圆弧。如果 <em>radius</em> 为正值则朝逆时针方向绘制圆弧，否则朝顺时针方向。最终海龟的朝向会依据 <em>extent</em> 的值而改变。</p>\n<p>圆实际是以其内切正多边形来近似表示的，其边的数量由 <em>steps</em> 指定。如果未指定边数则会自动确定。此方法也可用来绘制正多边形。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0<br><strong>&gt;&gt;&gt;</strong> turtle.circle(50)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(-0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0<br><strong>&gt;&gt;&gt;</strong> turtle.circle(120, 180)  <em># draw a semicircle</em><br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,240.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>180.0</p>\n<p><code>turtle.``dot</code>(<em>size=None</em>, <em>*color</em>)</p>\n<p>参数:</p>\n<p><strong>size</strong> -- 一个整型数 &gt;= 1 (如果指定)<strong>color</strong> -- 一个颜色字符串或颜色数值元组</p>\n<p>绘制一个直径为 <em>size_，颜色为 _color</em> 的圆点。如果 <em>size</em> 未指定，则直径取 pensize+4 和 2*pensize 中的较大值。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.dot()<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50); turtle.dot(20, “blue”); turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(100.00,-0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0</p>\n<p><code>turtle.``stamp</code>()</p>\n<p>在海龟当前位置印制一个海龟形状。返回该印章的 stamp_id，印章可以通过调用 <code>clearstamp(stamp_id)</code> 来删除。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.color(“blue”)<br><strong>&gt;&gt;&gt;</strong> turtle.stamp()<br>11<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)</p>\n<p><code>turtle.``clearstamp</code>(<em>stampid</em>)</p>\n<p>参数:</p>\n<p><strong>stampid</strong> -- 一个整型数，必须是之前 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.stamp\" target=\"_blank\" rel=\"noopener\"><code>stamp()</code></a> 调用的返回值</p>\n<p>删除 <em>stampid</em> 指定的印章。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(150.00,-0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.color(“blue”)<br><strong>&gt;&gt;&gt;</strong> astamp = turtle.stamp()<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(200.00,-0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.clearstamp(astamp)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(200.00,-0.00)</p>\n<p><code>turtle.``clearstamps</code>(<em>n=None</em>)</p>\n<p>参数:</p>\n<p><strong>n</strong> -- 一个整型数 (或 <code>None</code>)</p>\n<p>删除全部或前/后 <em>n</em> 个海龟印章。如果 <em>n</em> 为 <code>None</code> 则删除全部印章，如果 <em>n</em> &gt; 0 则删除前 <em>n</em> 个印章，否则如果 <em>n</em>&lt; 0 则删除后 <em>n</em> 个印章。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(8):<br><strong>… **    turtle.stamp(); turtle.fd(30)<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>**&gt;&gt;&gt;</strong> turtle.clearstamps(2)<br><strong>&gt;&gt;&gt;</strong> turtle.clearstamps(-2)<br><strong>&gt;&gt;&gt;</strong> turtle.clearstamps()</p>\n<p><code>turtle.``undo</code>()</p>\n<p>撤消 (或连续撤消) 最近的一个 (或多个) 海龟动作。可撤消的次数由撤消缓冲区的大小决定。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(4):<br><strong>… **    turtle.fd(50); turtle.lt(80)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(8):<br>*<em>… *</em>    turtle.undo()</p>\n<p><code>turtle.``speed</code>(<em>speed=None</em>)</p>\n<p>参数:</p>\n<p><strong>speed</strong> -- 一个 0..10 范围内的整型数或速度字符串 (见下)</p>\n<p>设置海龟移动的速度为 0..10 表示的整型数值。如未指定参数则返回当前速度。</p>\n<p>如果输入数值大于 10 或小于 0.5 则速度设为 0。速度字符串与速度值的对应关系如下:</p>\n<ul>\n<li>“fastest”: 0 最快</li>\n<li>“fast”: 10 快</li>\n<li>“normal”: 6 正常</li>\n<li>“slow”: 3 慢</li>\n<li>“slowest”: 1 最慢</li>\n</ul>\n<p>速度值从 1 到 10，画线和海龟转向的动画效果逐级加快。</p>\n<p>注意: <em>speed</em> = 0 表示 <em>没有</em> 动画效果。forward/back 将使海龟向前/向后跳跃，同样的 left/right 将使海龟立即改变朝向。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.speed()<br>3\n<strong>&gt;&gt;&gt;</strong> turtle.speed(‘normal’)<br><strong>&gt;&gt;&gt;</strong> turtle.speed()<br>6\n<strong>&gt;&gt;&gt;</strong> turtle.speed(9)<br><strong>&gt;&gt;&gt;</strong> turtle.speed()<br>9</p>\n<h3 id=\"获取海龟的状态\"><a href=\"#获取海龟的状态\" class=\"headerlink\" title=\"获取海龟的状态\"></a>获取海龟的状态</h3><p><code>turtle.``position</code>()<code>turtle.``pos</code>()</p>\n<p>返回海龟当前的坐标 (x,y) (为 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Vec2D\" target=\"_blank\" rel=\"noopener\"><code>Vec2D</code></a> 矢量类对象)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(440.00,-0.00)</p>\n<p><code>turtle.``towards</code>(<em>x</em>, <em>y=None</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值或数值对/矢量，或一个海龟实例<strong>y</strong> -- 一个数值——如果 <em>x</em> 是一个数值，否则为 <code>None</code></p>\n<p>从海龟位置到由 (x,y)，矢量或另一海龟对应位置的连线的夹角。此数值依赖于海龟初始朝向 - 由 “standard”/“world” 或 “logo” 模式设置所决定)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.goto(10, 10)<br><strong>&gt;&gt;&gt;</strong> turtle.towards(0,0)<br>225.0</p>\n<p><code>turtle.``xcor</code>()</p>\n<p>返回海龟的 x 坐标。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(50)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(100)<br><strong>&gt;&gt;&gt;</strong> turtle.pos()<br>(64.28,76.60)<br><strong>&gt;&gt;&gt;</strong> <strong>print</strong>(round(turtle.xcor(), 5))<br>64.27876</p>\n<p><code>turtle.``ycor</code>()</p>\n<p>返回海龟的 y 坐标。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(60)<br><strong>&gt;&gt;&gt;</strong> turtle.forward(100)<br><strong>&gt;&gt;&gt;</strong> <strong>print</strong>(turtle.pos())<br>(50.00,86.60)<br><strong>&gt;&gt;&gt;</strong> <strong>print</strong>(round(turtle.ycor(), 5))<br>86.60254</p>\n<p><code>turtle.``heading</code>()</p>\n<p>返回海龟当前的朝向 (数值依赖于海龟模式参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.mode\" target=\"_blank\" rel=\"noopener\"><code>mode()</code></a>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(67)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>67.0</p>\n<p><code>turtle.``distance</code>(<em>x</em>, <em>y=None</em>)</p>\n<p>参数:</p>\n<p><strong>x</strong> -- 一个数值或数值对/矢量，或一个海龟实例<strong>y</strong> -- 一个数值——如果 <em>x</em> 是一个数值，否则为 <code>None</code></p>\n<p>返回从海龟位置到由 (x,y)，适量或另一海龟对应位置的单位距离。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.distance(30,40)<br>50.0<br><strong>&gt;&gt;&gt;</strong> turtle.distance((30,40))<br>50.0<br><strong>&gt;&gt;&gt;</strong> joe = Turtle()<br><strong>&gt;&gt;&gt;</strong> joe.forward(77)<br><strong>&gt;&gt;&gt;</strong> turtle.distance(joe)<br>77.0</p>\n<h3 id=\"度量单位设置\"><a href=\"#度量单位设置\" class=\"headerlink\" title=\"度量单位设置\"></a>度量单位设置</h3><p><code>turtle.``degrees</code>(<em>fullcircle=360.0</em>)</p>\n<p>参数:</p>\n<p><strong>fullcircle</strong> -- 一个数值</p>\n<p>设置角度的度量单位，即设置一个圆周为多少 “度”。默认值为 360 度。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(90)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0</p>\n<p>Change angle measurement unit to grad (also known as gon,<br>grade, or gradian and equals 1/100-th of the right angle.)<br><strong>&gt;&gt;&gt;</strong> turtle.degrees(400.0)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>100.0<br><strong>&gt;&gt;&gt;</strong> turtle.degrees(360)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0</p>\n<p><code>turtle.``radians</code>()</p>\n<p>设置角度的度量单位为弧度。其值等于 <code>degrees(2*math.pi)</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.left(90)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>90.0<br><strong>&gt;&gt;&gt;</strong> turtle.radians()<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>1.5707963267948966</p>\n<h3 id=\"画笔控制\"><a href=\"#画笔控制\" class=\"headerlink\" title=\"画笔控制\"></a>画笔控制</h3><h4 id=\"绘图状态\"><a href=\"#绘图状态\" class=\"headerlink\" title=\"绘图状态\"></a>绘图状态</h4><p><code>turtle.``pendown</code>()<code>turtle.``pd</code>()<code>turtle.``down</code>()</p>\n<p>画笔落下 -- 移动时将画线。<code>turtle.``penup</code>()<code>turtle.``pu</code>()<code>turtle.``up</code>()</p>\n<p>画笔抬起 -- 移动时不画线。<code>turtle.``pensize</code>(<em>width=None</em>)<code>turtle.``width</code>(<em>width=None</em>)</p>\n<p>参数:</p>\n<p><strong>width</strong> -- 一个正数值</p>\n<p>设置线条的粗细为 <em>width</em> 或返回该值。如果 resizemode 设为 “auto” 并且 turtleshape 为多边形，该多边形也以同样组细的线条绘制。如未指定参数，则返回当前的 pensize。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.pensize()<br>1\n<strong>&gt;&gt;&gt;</strong> turtle.pensize(10)   <em># from here on lines of width 10 are drawn</em></p>\n<p><code>turtle.``pen</code>(<em>pen=None</em>, <em>**pendict</em>)</p>\n<p>参数:</p>\n<p><strong>pen</strong> -- 一个包含部分或全部下列键的字典<strong>pendict</strong> -- 一个或多个以下列键为关键字的关键字参数</p>\n<p>返回或设置画笔的属性，以一个包含以下键值对的 “画笔字典” 表示:</p>\n<ul>\n<li>“shown”: True/False</li>\n<li>“pendown”: True/False</li>\n<li>“pencolor”: 颜色字符串或颜色元组</li>\n<li>“fillcolor”: 颜色字符串或颜色元组</li>\n<li>“pensize”: 正数值</li>\n<li>“speed”: 0..10 范围内的数值</li>\n<li>“resizemode”: “auto” 或 “user” 或 “noresize”</li>\n<li>“stretchfactor”: (正数值, 正数值)</li>\n<li>“outline”: 正数值</li>\n<li>“tilt”: 数值</li>\n</ul>\n<p>此字典可作为后续调用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pen\" target=\"_blank\" rel=\"noopener\"><code>pen()</code></a> 时的参数，以恢复之前的画笔状态。另外还可将这些属性作为关键词参数提交。使用此方式可以用一条语句设置画笔的多个属性。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.pen(fillcolor=”black”, pencolor=”red”, pensize=10)<br><strong>&gt;&gt;&gt;</strong> sorted(turtle.pen().items())<br>[(‘fillcolor’, ‘black’), (‘outline’, 1), (‘pencolor’, ‘red’),<br> (‘pendown’, True), (‘pensize’, 10), (‘resizemode’, ‘noresize’),<br> (‘shearfactor’, 0.0), (‘shown’, True), (‘speed’, 9),<br> (‘stretchfactor’, (1.0, 1.0)), (‘tilt’, 0.0)]<br><strong>&gt;&gt;&gt;</strong> penstate=turtle.pen()<br><strong>&gt;&gt;&gt;</strong> turtle.color(“yellow”, “”)<br><strong>&gt;&gt;&gt;</strong> turtle.penup()<br><strong>&gt;&gt;&gt;</strong> sorted(turtle.pen().items())[:3]<br>[(‘fillcolor’, ‘’), (‘outline’, 1), (‘pencolor’, ‘yellow’)]<br><strong>&gt;&gt;&gt;</strong> turtle.pen(penstate, fillcolor=”green”)<br><strong>&gt;&gt;&gt;</strong> sorted(turtle.pen().items())[:3]<br>[(‘fillcolor’, ‘green’), (‘outline’, 1), (‘pencolor’, ‘red’)]</p>\n<p><code>turtle.``isdown</code>()</p>\n<p>如果画笔落下返回 <code>True</code>，如果画笔抬起返回 <code>False</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.penup()<br><strong>&gt;&gt;&gt;</strong> turtle.isdown()<br>False<br><strong>&gt;&gt;&gt;</strong> turtle.pendown()<br><strong>&gt;&gt;&gt;</strong> turtle.isdown()<br>True</p>\n<h4 id=\"颜色控制\"><a href=\"#颜色控制\" class=\"headerlink\" title=\"颜色控制\"></a>颜色控制</h4><p><code>turtle.``pencolor</code>(<em>*args</em>)</p>\n<p>返回或设置画笔颜色。</p>\n<p>允许以下四种输入格式:<code>pencolor()</code>返回以颜色描述字符串或元组 (见示例) 表示的当前画笔颜色。可用作其他 color/pencolor/fillcolor 调用的输入。<code>pencolor(colorstring)</code>设置画笔颜色为 <em>colorstring</em> 指定的 Tk 颜色描述字符串，例如 <code>&quot;red&quot;</code>、<code>&quot;yellow&quot;</code> 或 <code>&quot;#33cc8c&quot;</code>。<code>pencolor((r, g, b))</code>设置画笔颜色为以 <em>r</em>, <em>g</em>, <em>b</em> 元组表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a>)。<code>pencolor(r, g, b)</code>设置画笔颜色为以 <em>r</em>, <em>g</em>, <em>b</em> 表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode。</p>\n<p>如果 turtleshape 为多边形，该多边形轮廓也以新设置的画笔颜色绘制。</p>\n<p><strong>&gt;&gt;&gt;</strong> colormode()<br>1.0<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>‘red’<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(“brown”)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>‘brown’<br><strong>&gt;&gt;&gt;</strong> tup = (0.2, 0.8, 0.55)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(tup)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(0.2, 0.8, 0.5490196078431373)<br><strong>&gt;&gt;&gt;</strong> colormode(255)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(51.0, 204.0, 140.0)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(‘#32c18f’)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(50.0, 193.0, 143.0)</p>\n<p><code>turtle.``fillcolor</code>(<em>*args</em>)</p>\n<p>返回或设置填充颜色。</p>\n<p>允许以下四种输入格式:<code>fillcolor()</code>返回以颜色描述字符串或元组 (见示例) 表示的当前填充颜色。可用作其他 color/pencolor/fillcolor 调用的输入。<code>fillcolor(colorstring)</code>设置填充颜色为 <em>colorstring</em> 指定的 Tk 颜色描述字符串，例如 <code>&quot;red&quot;</code>、<code>&quot;yellow&quot;</code> 或 <code>&quot;#33cc8c&quot;</code>。<code>fillcolor((r, g, b))</code>设置填充颜色为以 <em>r</em>, <em>g</em>, <em>b</em> 元组表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode，colormode 的值为 1.0 或 255 (参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a>)。<code>fillcolor(r, g, b)</code>设置填充颜色为 <em>r</em>, <em>g</em>, <em>b</em> 表示的 RGB 颜色。<em>r</em>, <em>g</em>, <em>b</em> 的取值范围应为 0..colormode。</p>\n<p>如果 turtleshape 为多边形，该多边形内部也以新设置的填充颜色填充。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.fillcolor(“violet”)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor()<br>‘violet’<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor()<br>(50.0, 193.0, 143.0)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor((50, 193, 143))  <em># Integers, not floats</em><br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor()<br>(50.0, 193.0, 143.0)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor(‘#ffffff’)<br><strong>&gt;&gt;&gt;</strong> turtle.fillcolor()<br>(255.0, 255.0, 255.0)</p>\n<p><code>turtle.``color</code>(<em>*args</em>)</p>\n<p>返回或设置画笔颜色和填充颜色。</p>\n<p>允许多种输入格式。使用如下 0 至 3 个参数:<code>color()</code>返回以一对颜色描述字符串或元组表示的当前画笔颜色和填充颜色，两者可分别由 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor\" target=\"_blank\" rel=\"noopener\"><code>pencolor()</code></a> 和 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.fillcolor\" target=\"_blank\" rel=\"noopener\"><code>fillcolor()</code></a> 返回。<code>color(colorstring)</code>, <code>color((r,g,b))</code>, <code>color(r,g,b)</code>输入格式与 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.pencolor\" target=\"_blank\" rel=\"noopener\"><code>pencolor()</code></a> 相同，同时设置填充颜色和画笔颜色为指定的值。<code>color(colorstring1, colorstring2)</code>, <code>color((r1,g1,b1), (r2,g2,b2))</code>相当于 <code>pencolor(colorstring1)</code> 加 <code>fillcolor(colorstring2)</code>，使用其他输入格式的方法也与之类似。</p>\n<p>如果 turtleshape 为多边形，该多边形轮廓与填充也使用新设置的颜色。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.color(“red”, “green”)<br><strong>&gt;&gt;&gt;</strong> turtle.color()<br>(‘red’, ‘green’)<br><strong>&gt;&gt;&gt;</strong> color(“#285078”, “#a0c8f0”)<br><strong>&gt;&gt;&gt;</strong> color()<br>((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))</p>\n<p>另参见: Screen 方法 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.colormode\" target=\"_blank\" rel=\"noopener\"><code>colormode()</code></a>。</p>\n<h4 id=\"填充\"><a href=\"#填充\" class=\"headerlink\" title=\"填充\"></a>填充</h4><p><code>turtle.``filling</code>()</p>\n<p>返回填充状态 (填充为 <code>True</code>，否则为 <code>False</code>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.begin_fill()<br><strong>&gt;&gt;&gt;</strong> <strong>if</strong> turtle.filling():<br><strong>… **   turtle.pensize(5)<br>**…</strong> <strong>else</strong>:\n*<em>… *</em>   turtle.pensize(3)</p>\n<p><code>turtle.``begin_fill</code>()</p>\n<p>在绘制要填充的形状之前调用。<code>turtle.``end_fill</code>()</p>\n<p>填充上次调用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.begin_fill\" target=\"_blank\" rel=\"noopener\"><code>begin_fill()</code></a> 之后绘制的形状。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.color(“black”, “red”)<br><strong>&gt;&gt;&gt;</strong> turtle.begin_fill()<br><strong>&gt;&gt;&gt;</strong> turtle.circle(80)<br><strong>&gt;&gt;&gt;</strong> turtle.end_fill()</p>\n<h4 id=\"更多绘图控制\"><a href=\"#更多绘图控制\" class=\"headerlink\" title=\"更多绘图控制\"></a>更多绘图控制</h4><p><code>turtle.``reset</code>()</p>\n<p>从屏幕中删除海龟的绘图，海龟回到原点并设置所有变量为默认值。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.goto(0,-22)<br><strong>&gt;&gt;&gt;</strong> turtle.left(100)<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,-22.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>100.0<br><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.position()<br>(0.00,0.00)<br><strong>&gt;&gt;&gt;</strong> turtle.heading()<br>0.0</p>\n<p><code>turtle.``clear</code>()</p>\n<p>从屏幕中删除指定海龟的绘图。不移动海龟。海龟的状态和位置以及其他海龟的绘图不受影响。<code>turtle.``write</code>(<em>arg</em>, <em>move=False</em>, <em>align=”left”</em>, <em>font=(“Arial”</em>, <em>8</em>, <em>“normal”)</em>)</p>\n<p>参数:</p>\n<p><strong>arg</strong> -- 要书写到 TurtleScreen 的对象<strong>move</strong> -- True/False<strong>align</strong> -- 字符串 “left”, “center” 或 “right”<strong>font</strong> -- 一个三元组 (fontname, fontsize, fonttype)</p>\n<p>书写文本 - <em>arg</em> 指定的字符串 - 到当前海龟位置，<em>align</em> 指定对齐方式 (“left”, “center” 或 right”)，font 指定字体。如果 <em>move</em> 为 True，画笔会移动到文本的右下角。默认 <em>move</em> 为 <code>False</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.write(“Home = “, <strong>True</strong>, align=”center”)<br><strong>&gt;&gt;&gt;</strong> turtle.write((0,0), <strong>True</strong>)</p>\n<h3 id=\"海龟状态\"><a href=\"#海龟状态\" class=\"headerlink\" title=\"海龟状态\"></a>海龟状态</h3><h4 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h4><p><code>turtle.``hideturtle</code>()<code>turtle.``ht</code>()</p>\n<p>使海龟不可见。当你绘制复杂图形时这是个好主意，因为隐藏海龟可显著加快绘制速度。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.hideturtle()</p>\n<p><code>turtle.``showturtle</code>()<code>turtle.``st</code>()</p>\n<p>使海龟可见。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.showturtle()</p>\n<p><code>turtle.``isvisible</code>()</p>\n<p>如果海龟显示返回 <code>True</code>，如果海龟隐藏返回 <code>False</code>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.hideturtle()<br><strong>&gt;&gt;&gt;</strong> turtle.isvisible()<br>False<br><strong>&gt;&gt;&gt;</strong> turtle.showturtle()<br><strong>&gt;&gt;&gt;</strong> turtle.isvisible()<br>True</p>\n<h4 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h4><p><code>turtle.``shape</code>(<em>name=None</em>)</p>\n<p>参数:</p>\n<p><strong>name</strong> -- 一个有效的形状名字符串</p>\n<p>设置海龟形状为 <em>name</em> 指定的形状名，如未指定形状名则返回当前的形状名。<em>name</em> 指定的形状名应存在于 TurtleScreen 的 shape 字典中。多边形的形状初始时有以下几种: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”。要了解如何处理形状请参看 Screen 方法 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape\" target=\"_blank\" rel=\"noopener\"><code>register_shape()</code></a>。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shape()<br>‘classic’<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“turtle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shape()<br>‘turtle’</p>\n<p><code>turtle.``resizemode</code>(<em>rmode=None</em>)</p>\n<p>参数:</p>\n<p><strong>rmode</strong> -- 字符串 “auto”, “user”, “noresize” 其中之一</p>\n<p>设置大小调整模式为以下值之一: “auto”, “user”, “noresize”。如未指定 <em>rmode</em> 则返回当前的大小调整模式。不同的大小调整模式的效果如下:</p>\n<ul>\n<li>“auto”: 根据画笔粗细值调整海龟的外观。</li>\n<li>“user”: 根据拉伸因子和轮廓宽度 (outline) 值调整海龟的外观，两者是由 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize\" target=\"_blank\" rel=\"noopener\"><code>shapesize()</code></a> 设置的。</li>\n<li>“noresize”: 不调整海龟的外观大小。</li>\n</ul>\n<p>大小调整模式 (“user”) 会在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.shapesize\" target=\"_blank\" rel=\"noopener\"><code>shapesize()</code></a> 带参数调用时生效。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.resizemode()<br>‘noresize’<br><strong>&gt;&gt;&gt;</strong> turtle.resizemode(“auto”)<br><strong>&gt;&gt;&gt;</strong> turtle.resizemode()<br>‘auto’</p>\n<p><code>turtle.``shapesize</code>(<em>stretch_wid=None</em>, <em>stretch_len=None</em>, <em>outline=None</em>)<code>turtle.``turtlesize</code>(<em>stretch_wid=None</em>, <em>stretch_len=None</em>, <em>outline=None</em>)</p>\n<p>参数:</p>\n<p><strong>stretch_wid</strong> -- 正数值<strong>stretch_len</strong> -- 正数值<strong>outline</strong> -- 正数值</p>\n<p>返回或设置画笔的属性 x/y-拉伸因子和/或轮廓。设置大小调整模式为 “user”。当且仅当大小调整模式设为 “user” 时海龟会基于其拉伸因子调整外观: <em>stretch_wid</em> 为垂直于其朝向的宽度拉伸因子，<em>stretch_len</em> 为平等于其朝向的长度拉伸因子，决定形状轮廓线的粗细。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shapesize()<br>(1.0, 1.0, 1)<br><strong>&gt;&gt;&gt;</strong> turtle.resizemode(“user”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5, 5, 12)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize()<br>(5, 5, 12)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(outline=8)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize()<br>(5, 5, 8)</p>\n<p><code>turtle.``shearfactor</code>(<em>shear=None</em>)</p>\n<p>参数:</p>\n<p><strong>shear</strong> -- 数值 (可选)</p>\n<p>设置或返回当前的剪切因子。根据 share 指定的剪切因子即剪切角度的切线来剪切海龟形状。<em>不</em> 改变海龟的朝向 (移动方向)。如未指定 shear 参数: 返回当前的剪切因子即剪切角度的切线，与海龟朝向平行的线条将被剪切。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.shearfactor(0.5)<br><strong>&gt;&gt;&gt;</strong> turtle.shearfactor()<br>0.5</p>\n<p><code>turtle.``tilt</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值</p>\n<p>海龟形状自其当前的倾角转动 <em>angle</em> 指定的角度，但 <em>不</em> 改变海龟的朝向 (移动方向)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.tilt(30)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.tilt(30)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)</p>\n<p><code>turtle.``settiltangle</code>(<em>angle</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值</p>\n<p>旋转海龟形状使其指向 <em>angle</em> 指定的方向，忽略其当前的倾角，<em>不</em> 改变海龟的朝向 (移动方向)。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.settiltangle(45)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.settiltangle(-45)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)</p>\n<p><em>3.1 版后已移除._<code>turtle.``tiltangle</code>(_angle=None</em>)</p>\n<p>参数:</p>\n<p><strong>angle</strong> -- 一个数值 (可选)</p>\n<p>设置或返回当前的倾角。如果指定 angle 则旋转海龟形状使其指向 angle 指定的方向，忽略其当前的倾角。<em>不</em>改变海龟的朝向 (移动方向)。如果未指定 angle: 返回当前的倾角，即海龟形状的方向和海龟朝向 (移动方向) 之间的夹角。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.reset()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“circle”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(5,2)<br><strong>&gt;&gt;&gt;</strong> turtle.tilt(45)<br><strong>&gt;&gt;&gt;</strong> turtle.tiltangle()<br>45.0</p>\n<p><code>turtle.``shapetransform</code>(<em>t11=None</em>, <em>t12=None</em>, <em>t21=None</em>, <em>t22=None</em>)</p>\n<p>参数:</p>\n<p><strong>t11</strong> -- 一个数值 (可选)<strong>t12</strong> -- 一个数值 (可选)<strong>t21</strong> -- 一个数值 (可选)<strong>t12</strong> -- 一个数值 (可选)</p>\n<p>设置或返回海龟形状的当前变形矩阵。</p>\n<p>如不指定任何矩阵元素，则返回以4元素元组表示的变形矩阵。否则使用指定元素设置变形矩阵改变海龟形状，矩阵第一排的值为 t11, t12，第二排的值为 t21, t22。行列式 t11 * t22 - t12 * t21 的值不能为零，否则会出错。根据指定的矩阵修改拉伸因子，剪切因子和倾角。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle = Turtle()<br><strong>&gt;&gt;&gt;</strong> turtle.shape(“square”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapesize(4,2)<br><strong>&gt;&gt;&gt;</strong> turtle.shearfactor(-0.5)<br><strong>&gt;&gt;&gt;</strong> turtle.shapetransform()<br>(4.0, -1.0, -0.0, 2.0)</p>\n<p><code>turtle.``get_shapepoly</code>()</p>\n<p>返回以坐标值对元组表示的当前形状多边形。这可以用于定义一个新形状或一个复合形状的多个组成部分。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.shape(“square”)<br><strong>&gt;&gt;&gt;</strong> turtle.shapetransform(4, -1, 0, 2)<br><strong>&gt;&gt;&gt;</strong> turtle.get_shapepoly()<br>((50, -20), (30, 20), (-50, 20), (-30, -20))</p>\n<h3 id=\"使用事件\"><a href=\"#使用事件\" class=\"headerlink\" title=\"使用事件\"></a>使用事件</h3><p><code>turtle.``onclick</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>将 <em>fun</em> 指定的函数绑定到鼠标点击此海龟事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。以下为使用匿名海龟即过程式的示例:</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>def</strong> turn(x, y):<br><strong>… **    left(180)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> onclick(turn)  <em># Now clicking into the turtle will turn it.</em><br><strong>&gt;&gt;&gt;</strong> onclick(None)  <em># event-binding will be removed</em></p>\n<p><code>turtle.``onrelease</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>将 <em>fun</em> 指定的函数绑定到在此海龟上释放鼠标按键事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>class</strong> <strong>MyTurtle</strong>(Turtle):<br><strong>… **    **def</strong> glow(self,x,y):<br><strong>… **        self.fillcolor(“red”)<br>*<em>… *</em>    **def</strong> unglow(self,x,y):<br><strong>… **        self.fillcolor(“”)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> turtle = MyTurtle()<br><strong>&gt;&gt;&gt;</strong> turtle.onclick(turtle.glow)     <em># clicking on turtle turns fillcolor red,</em><br><strong>&gt;&gt;&gt;</strong> turtle.onrelease(turtle.unglow) <em># releasing turns it to transparent.</em></p>\n<p><code>turtle.``ondrag</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>将 <em>fun</em> 指定的函数绑定到在此海龟上移动鼠标事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。</p>\n<p>注: 在海龟上移动鼠标事件之前应先发生在此海龟上点击鼠标事件。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.ondrag(turtle.goto)</p>\n<p>在此之后点击并拖动海龟可在屏幕上手绘线条 (如果画笔为落下)。</p>\n<h3 id=\"特殊海龟方法\"><a href=\"#特殊海龟方法\" class=\"headerlink\" title=\"特殊海龟方法\"></a>特殊海龟方法</h3><p><code>turtle.``begin_poly</code>()</p>\n<p>开始记录多边形的顶点。当前海龟位置为多边形的第一个顶点。<code>turtle.``end_poly</code>()</p>\n<p>停止记录多边形的顶点。当前海龟位置为多边形的最后一个顶点。它将连线到第一个顶点。<code>turtle.``get_poly</code>()</p>\n<p>返回最新记录的多边形。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.home()<br><strong>&gt;&gt;&gt;</strong> turtle.begin_poly()<br><strong>&gt;&gt;&gt;</strong> turtle.fd(100)<br><strong>&gt;&gt;&gt;</strong> turtle.left(20)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(30)<br><strong>&gt;&gt;&gt;</strong> turtle.left(60)<br><strong>&gt;&gt;&gt;</strong> turtle.fd(50)<br><strong>&gt;&gt;&gt;</strong> turtle.end_poly()<br><strong>&gt;&gt;&gt;</strong> p = turtle.get_poly()<br><strong>&gt;&gt;&gt;</strong> register_shape(“myFavouriteShape”, p)</p>\n<p><code>turtle.``clone</code>()</p>\n<p>创建并返回海龟的克隆体，具有相同的位置、朝向和海龟属性。</p>\n<p><strong>&gt;&gt;&gt;</strong> mick = Turtle()<br><strong>&gt;&gt;&gt;</strong> joe = mick.clone()</p>\n<p><code>turtle.``getturtle</code>()<code>turtle.``getpen</code>()</p>\n<p>返回海龟对象自身。唯一合理的用法: 作为一个函数来返回 “匿名海龟”:</p>\n<p><strong>&gt;&gt;&gt;</strong> pet = getturtle()<br><strong>&gt;&gt;&gt;</strong> pet.fd(50)<br><strong>&gt;&gt;&gt;</strong> pet<br>&lt;turtle.Turtle object at 0x…&gt;</p>\n<p><code>turtle.``getscreen</code>()</p>\n<p>返回作为海龟绘图场所的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 类对象。该对象将可调用 TurtleScreen 方法。</p>\n<p><strong>&gt;&gt;&gt;</strong> ts = turtle.getscreen()<br><strong>&gt;&gt;&gt;</strong> ts<br>&lt;turtle._Screen object at 0x…&gt;<br><strong>&gt;&gt;&gt;</strong> ts.bgcolor(“pink”)</p>\n<p><code>turtle.``setundobuffer</code>(<em>size</em>)</p>\n<p>参数:</p>\n<p><strong>size</strong> -- 一个整型数值或 <code>None</code></p>\n<p>设置或禁用撤消缓冲区。如果 <em>size</em> 为一个整型数则将开辟一个指定大小的空缓冲区。<em>size</em> 表示可使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.undo\" target=\"_blank\" rel=\"noopener\"><code>undo()</code></a>方法/函数撤消的海龟命令的次数上限。如果 <em>size</em> 为 <code>None</code> 则禁用撤消缓冲区。</p>\n<p><strong>&gt;&gt;&gt;</strong> turtle.setundobuffer(42)</p>\n<p><code>turtle.``undobufferentries</code>()</p>\n<p>返回撤销缓冲区里的条目数。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>while</strong> undobufferentries():<br>*<em>… *</em>    undo()</p>\n<h3 id=\"复合形状\"><a href=\"#复合形状\" class=\"headerlink\" title=\"复合形状\"></a>复合形状</h3><p>要使用由多个不同颜色多边形构成的复合海龟形状，你必须明确地使用辅助类 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape\" target=\"_blank\" rel=\"noopener\"><code>Shape</code></a>，具体步骤如下:</p>\n<ol>\n<li>创建一个空 Shape 对象，类型为 “compound”。</li>\n<li>按照需要使用 <code>addcomponent()</code> 方法向此对象添加多个部件。例如:<strong>&gt;&gt;&gt;</strong> s = Shape(“compound”) <strong>&gt;&gt;&gt;</strong> poly1 = ((0,0),(10,-5),(0,10),(-10,-5)) <strong>&gt;&gt;&gt;</strong> s.addcomponent(poly1, “red”, “blue”) <strong>&gt;&gt;&gt;</strong> poly2 = ((0,0),(10,-5),(-10,-5)) <strong>&gt;&gt;&gt;</strong> s.addcomponent(poly2, “blue”, “red”)</li>\n<li>接下来将 Shape 对象添加到 Screen 对象的形状列表并使用它:<strong>&gt;&gt;&gt;</strong> register_shape(“myshape”, s) <strong>&gt;&gt;&gt;</strong> shape(“myshape”)</li>\n</ol>\n<p>注解</p>\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape\" target=\"_blank\" rel=\"noopener\"><code>Shape</code></a> 类在 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.register_shape\" target=\"_blank\" rel=\"noopener\"><code>register_shape()</code></a> 方法的内部以多种方式使用。应用程序编写者 <em>只有</em> 在使用上述的复合形状时才需要处理 Shape 类。</p>\n<h2 id=\"TurtleScreen-Screen-方法及对应函数\"><a href=\"#TurtleScreen-Screen-方法及对应函数\" class=\"headerlink\" title=\"TurtleScreen/Screen 方法及对应函数\"></a>TurtleScreen/Screen 方法及对应函数</h2><p>本节中的大部分示例都使用 TurtleScreen 类的一个实例，命名为 <code>screen</code>。</p>\n<h3 id=\"窗口控制\"><a href=\"#窗口控制\" class=\"headerlink\" title=\"窗口控制\"></a>窗口控制</h3><p><code>turtle.``bgcolor</code>(<em>*args</em>)</p>\n<p>参数:</p>\n<p><strong>args</strong> -- 一个颜色字符串或三个取值范围 0..colormode 内的数值或一个取值范围相同的数值3元组</p>\n<p>设置或返回 TurtleScreen 的背景颜色。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.bgcolor(“orange”)<br><strong>&gt;&gt;&gt;</strong> screen.bgcolor()<br>‘orange’<br><strong>&gt;&gt;&gt;</strong> screen.bgcolor(“#800080”)<br><strong>&gt;&gt;&gt;</strong> screen.bgcolor()<br>(128.0, 0.0, 128.0)</p>\n<p><code>turtle.``bgpic</code>(<em>picname=None</em>)</p>\n<p>参数:</p>\n<p><strong>picname</strong> -- 一个字符串, gif-文件名, <code>&quot;nopic&quot;</code>, 或 <code>None</code></p>\n<p>设置背景图片或返回当前背景图片名称。如果 <em>picname</em> 为一个文件名，则将相应图片设为背景。如果 <em>picname</em> 为 <code>&quot;nopic&quot;</code>，则删除当前背景图片。如果 <em>picname</em> 为 <code>None</code>，则返回当前背景图片文件名。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.bgpic()<br>‘nopic’<br><strong>&gt;&gt;&gt;</strong> screen.bgpic(“landscape.gif”)<br><strong>&gt;&gt;&gt;</strong> screen.bgpic()<br>“landscape.gif”</p>\n<p><code>turtle.``clear</code>()<code>turtle.``clearscreen</code>()</p>\n<p>从中删除所有海龟的全部绘图。将已清空的 TurtleScreen 重置为初始状态: 白色背景，无背景片，无事件绑定并启用追踪。</p>\n<p>注解</p>\n<p>此 TurtleScreen 方法作为全局函数时只有一个名字 <code>clearscreen</code>。全局函数 <code>clear</code> 所对应的是 Turtle 方法 <code>clear</code>。<code>turtle.``reset</code>()<code>turtle.``resetscreen</code>()</p>\n<p>重置屏幕上的所有海龟为其初始状态。</p>\n<p>注解</p>\n<p>此 TurtleScreen 方法作为全局函数时只有一个名字 <code>resetscreen</code>。全局函数 <code>reset</code> 所对应的是 Turtle 方法 <code>reset</code>。<code>turtle.``screensize</code>(<em>canvwidth=None</em>, <em>canvheight=None</em>, <em>bg=None</em>)</p>\n<p>参数:</p>\n<p><strong>canvwidth</strong> -- 正整型数，以像素表示画布的新宽度值<strong>canvheight</strong> -- 正整型数，以像素表示画面的新高度值<strong>bg</strong> -- 颜色字符串或颜色元组，新的背景颜色</p>\n<p>如未指定任何参数，则返回当前的 (canvaswidth, canvasheight)。否则改变作为海龟绘图场所的画布大小。不改变绘图窗口。要观察画布的隐藏区域，可以使用滚动条。通过此方法可以令之前绘制于画布之外的图形变为可见。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.screensize()<br>(400, 300)<br><strong>&gt;&gt;&gt;</strong> screen.screensize(2000,1500)<br><strong>&gt;&gt;&gt;</strong> screen.screensize()<br>(2000, 1500)</p>\n<p>也可以用来寻找意外逃走的海龟 ;-)<code>turtle.``setworldcoordinates</code>(<em>llx</em>, <em>lly</em>, <em>urx</em>, <em>ury</em>)</p>\n<p>参数:</p>\n<p><strong>llx</strong> -- 一个数值, 画布左下角的 x-坐标<strong>lly</strong> -- 一个数值, 画布左下角的 y-坐标<strong>urx</strong> -- 一个数值, 画面右上角的 x-坐标<strong>ury</strong> -- 一个数值, 画布右上角的 y-坐标</p>\n<p>设置用户自定义坐标系并在必要时切换模式为 “world”。这会执行一次 <code>screen.reset()</code>。如果 “world” 模式已激活，则所有图形将根据新的坐标系重绘。</p>\n<p><strong>注意</strong>: 在用户自定义坐标系中，角度可能显得扭曲。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.reset()<br><strong>&gt;&gt;&gt;</strong> screen.setworldcoordinates(-50,-7.5,50,7.5)<br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> _ <strong>in</strong> range(72):<br><strong>… **    left(10)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> _ <strong>in</strong> range(8):<br>*<em>… *</em>    left(45); fd(2)   <em># a regular octagon</em></p>\n<h3 id=\"动画控制\"><a href=\"#动画控制\" class=\"headerlink\" title=\"动画控制\"></a>动画控制</h3><p><code>turtle.``delay</code>(<em>delay=None</em>)</p>\n<p>参数:</p>\n<p><strong>delay</strong> -- 正整型数</p>\n<p>设置或返回以毫秒数表示的延迟值 _delay_。(这约等于连续两次画布刷新的间隔时间。) 绘图延迟越长，动画速度越慢。</p>\n<p>可选参数:</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.delay()<br>10<br><strong>&gt;&gt;&gt;</strong> screen.delay(5)<br><strong>&gt;&gt;&gt;</strong> screen.delay()<br>5</p>\n<p><code>turtle.``tracer</code>(<em>n=None</em>, <em>delay=None</em>)</p>\n<p>参数:</p>\n<p><strong>n</strong> -- 非负整型数<strong>delay</strong> -- 非负整型数</p>\n<p>启用/禁用海龟动画并设置刷新图形的延迟时间。如果指定 <em>n</em> 值，则只有每第 n 次屏幕刷新会实际执行。(可被用来加速复杂图形的绘制。) 如果调用时不带参数，则返回当前保存的 n 值。第二个参数设置延迟值 (参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.delay\" target=\"_blank\" rel=\"noopener\"><code>delay()</code></a>)。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.tracer(8, 25)<br><strong>&gt;&gt;&gt;</strong> dist = 2<br><strong>&gt;&gt;&gt;</strong> <strong>for</strong> i <strong>in</strong> range(200):<br>*<em>… *</em>    fd(dist)<br>*<em>… *</em>    rt(90)<br>*<em>… *</em>    dist += 2</p>\n<p><code>turtle.``update</code>()</p>\n<p>执行一次 TurtleScreen 刷新。在禁用追踪时使用。</p>\n<p>另参见 RawTurtle/Turtle 方法 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.speed\" target=\"_blank\" rel=\"noopener\"><code>speed()</code></a>。</p>\n<h3 id=\"使用屏幕事件\"><a href=\"#使用屏幕事件\" class=\"headerlink\" title=\"使用屏幕事件\"></a>使用屏幕事件</h3><p><code>turtle.``listen</code>(<em>xdummy=None</em>, <em>ydummy=None</em>)</p>\n<p>设置焦点到 TurtleScreen (以便接收按键事件)。使用两个 Dummy 参数以便能够传递 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 给 onclick 方法。<code>turtle.``onkey</code>(<em>fun</em>, <em>key</em>)<code>turtle.``onkeyrelease</code>(<em>fun</em>, <em>key</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个无参数的函数或 <code>None</code><strong>key</strong> -- 一个字符串: 键 (例如 “a”) 或键标 (例如 “space”)</p>\n<p>绑定 <em>fun</em> 指定的函数到按键释放事件。如果 <em>fun</em> 值为 <code>None</code>，则移除事件绑定。注: 为了能够注册按键事件，TurtleScreen 必须得到焦点。(参见 method <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 方法。)</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>def</strong> f():<br><strong>… **    fd(50)<br>*<em>… *</em>    lt(60)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> screen.onkey(f, “Up”)<br><strong>&gt;&gt;&gt;</strong> screen.listen()</p>\n<p><code>turtle.``onkeypress</code>(<em>fun</em>, <em>key=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个无参数的函数或 <code>None</code><strong>key</strong> -- 一个字符串: 键 (例如 “a”) 或键标 (例如 “space”)</p>\n<p>绑定 <em>fun</em> 指定的函数到指定键的按下事件。如未指定键则绑定到任意键的按下事件。注: 为了能够注册按键事件，必须得到焦点。(参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.listen\" target=\"_blank\" rel=\"noopener\"><code>listen()</code></a> 方法。)</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>def</strong> f():<br><strong>… **    fd(50)<br>**…</strong><br><strong>&gt;&gt;&gt;</strong> screen.onkey(f, “Up”)<br><strong>&gt;&gt;&gt;</strong> screen.listen()</p>\n<p><code>turtle.``onclick</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)<code>turtle.``onscreenclick</code>(<em>fun</em>, <em>btn=1</em>, <em>add=None</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个函数，调用时将传入两个参数表示在画布上点击的坐标。<strong>btn</strong> -- 鼠标按钮编号，默认值为 1 (鼠标左键)<strong>add</strong> – <code>True</code> 或 <code>False</code> -- 如为 <code>True</code> 则将添加一个新绑定，否则将取代先前的绑定</p>\n<p>绑定 <em>fun</em> 指定的函数到鼠标点击屏幕事件。如果 <em>fun</em> 值为 <code>None</code>，则移除现有的绑定。</p>\n<p>以下示例使用一个 TurtleScreen 实例 <code>screen</code> 和一个 Turtle 实例 turtle:</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.onclick(turtle.goto) <em># Subsequently clicking into the TurtleScreen will</em><br><strong>&gt;&gt;&gt; **                            <em># make the turtle move to the clicked point.</em><br>**&gt;&gt;&gt;</strong> screen.onclick(None)        <em># remove event binding again</em></p>\n<p>注解</p>\n<p>此 TurtleScreen 方法作为全局函数时只有一个名字 <code>onscreenclick</code>。全局函数 <code>onclick</code> 所对应的是 Turtle 方法 <code>onclick</code>。<code>turtle.``ontimer</code>(<em>fun</em>, <em>t=0</em>)</p>\n<p>参数:</p>\n<p><strong>fun</strong> -- 一个无参数的函数<strong>t</strong> -- 一个数值 &gt;= 0</p>\n<p>安装一个计时器，在 <em>t</em> 毫秒后调用 <em>fun</em> 函数。</p>\n<p><strong>&gt;&gt;&gt;</strong> running = True<br><strong>&gt;&gt;&gt;</strong> <strong>def</strong> f():<br><strong>… **    **if</strong> running:<br><strong>… **        fd(50)<br>*<em>… *</em>        lt(60)<br>*<em>… *</em>        screen.ontimer(f, 250)<br>**&gt;&gt;&gt;</strong> f()   <em>### makes the turtle march around</em><br><strong>&gt;&gt;&gt;</strong> running = False</p>\n<p><code>turtle.``mainloop</code>()<code>turtle.``done</code>()</p>\n<p>开始事件循环 - 调用 Tkinter 的 mainloop 函数。必须作为一个海龟绘图程序的结束语句。如果一个脚本是在以 -n 模式 (无子进程) 启动的 IDLE 中运行时 <em>不可</em> 使用 - 用于实现海龟绘图的交互功能。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.mainloop()</p>\n<h3 id=\"输入方法\"><a href=\"#输入方法\" class=\"headerlink\" title=\"输入方法\"></a>输入方法</h3><p><code>turtle.``textinput</code>(<em>title</em>, <em>prompt</em>)</p>\n<p>参数:</p>\n<p><strong>title</strong> -- 字符串<strong>prompt</strong> -- 字符串</p>\n<p>弹出一个对话框窗口用来输入一个字符串。形参 title 为对话框窗口的标题，prompt 为一条文本，通常用来提示要输入什么信息。返回输入的字符串。如果对话框被取消则返回 <code>None</code>。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.textinput(“NIM”, “Name of first player:”)</p>\n<p><code>turtle.``numinput</code>(<em>title</em>, <em>prompt</em>, <em>default=None</em>, <em>minval=None</em>, <em>maxval=None</em>)</p>\n<p>参数:</p>\n<p><strong>title</strong> -- 字符串<strong>prompt</strong> -- 字符串<strong>default</strong> -- 数值 (可选)<strong>minval</strong> -- 数值 (可选)<strong>maxval</strong> -- 数值 (可选)</p>\n<p>弹出一个对话框窗口用来输入一个数值。title 为对话框窗口的标题，prompt 为一条文本，通常用来描述要输入的数值信息。default: 默认值, minval: 可输入的最小值, maxval: 可输入的最大值。输入数值的必须在指定的 minval .. maxval 范围之内，否则将给出一条提示，对话框保持打开等待修改。返回输入的数值。如果对话框被取消则返回 <code>None</code>。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.numinput(“Poker”, “Your stakes:”, 1000, minval=10, maxval=10000)</p>\n<h3 id=\"设置与特殊方法\"><a href=\"#设置与特殊方法\" class=\"headerlink\" title=\"设置与特殊方法\"></a>设置与特殊方法</h3><p><code>turtle.``mode</code>(<em>mode=None</em>)</p>\n<p>参数:</p>\n<p><strong>mode</strong> -- 字符串 “standard”, “logo” 或 “world” 其中之一</p>\n<p>设置海龟模式 (“standard”, “logo” 或 “world”) 并执行重置。如未指定模式则返回当前的模式。</p>\n<p>“standard” 模式与旧的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 兼容。”logo” 模式与大部分 Logo 海龟绘图兼容。”world” 模式使用用户自定义的 “世界坐标系”。<strong>注意</strong>: 在此模式下，如果 <code>x/y</code> 单位比率不等于 1 则角度会显得扭曲。</p>\n<p>模式</p>\n<p>初始海龟朝向</p>\n<p>正数角度</p>\n<p>“standard”</p>\n<p>朝右 (东)</p>\n<p>逆时针</p>\n<p>“logo”</p>\n<p>朝上 (北)</p>\n<p>顺时针</p>\n<p><strong>&gt;&gt;&gt;</strong> mode(“logo”)   <em># resets turtle heading to north</em><br><strong>&gt;&gt;&gt;</strong> mode()<br>‘logo’</p>\n<p><code>turtle.``colormode</code>(<em>cmode=None</em>)</p>\n<p>参数:</p>\n<p><strong>cmode</strong> -- 数值 1.0 或 255 其中之一</p>\n<p>返回颜色模式或将其设为 1.0 或 255。构成颜色三元组的 <em>r</em>, <em>g</em>, <em>b</em> 数值必须在 0..<em>cmode</em> 范围之内。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.colormode(1)<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(240, 160, 80)<br>Traceback (most recent call last):<br>     …<br>TurtleGraphicsError: bad color sequence: (240, 160, 80)<br><strong>&gt;&gt;&gt;</strong> screen.colormode()<br>1.0<br><strong>&gt;&gt;&gt;</strong> screen.colormode(255)<br><strong>&gt;&gt;&gt;</strong> screen.colormode()<br>255<br><strong>&gt;&gt;&gt;</strong> turtle.pencolor(240,160,80)</p>\n<p><code>turtle.``getcanvas</code>()</p>\n<p>返回此 TurtleScreen 的 Canvas 对象。供了解 Tkinter 的 Canvas 对象内部机理的人士使用。</p>\n<p><strong>&gt;&gt;&gt;</strong> cv = screen.getcanvas()<br><strong>&gt;&gt;&gt;</strong> cv<br>&lt;turtle.ScrolledCanvas object …&gt;</p>\n<p><code>turtle.``getshapes</code>()</p>\n<p>返回所有当前可用海龟形状的列表。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.getshapes()<br>[‘arrow’, ‘blank’, ‘circle’, …, ‘turtle’]</p>\n<p><code>turtle.``register_shape</code>(<em>name</em>, <em>shape=None</em>)<code>turtle.``addshape</code>(<em>name</em>, <em>shape=None</em>)</p>\n<p>调用此函数有三种不同方式:</p>\n<ol>\n<li><em>name</em> 为一个 gif 文件的文件名， <em>shape</em> 为 <code>None</code>: 安装相应的图像形状。:&gt;&gt;&gt;<strong>&gt;&gt;&gt;</strong> screen.register_shape(“turtle.gif”) 注解 当海龟转向时图像形状 <em>不会</em> 转动，因此无法显示海龟的朝向!</li>\n<li><em>name</em> 为指定的字符串，<em>shape</em> 为由坐标值对构成的元组: 安装相应的多边形形状。<strong>&gt;&gt;&gt;</strong> screen.register_shape(“triangle”, ((5,-3), (0,5), (-5,-3)))</li>\n<li><em>name</em> 为指定的字符串， 为一个 (复合) <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape\" target=\"_blank\" rel=\"noopener\"><code>Shape</code></a> 类对象: 安装相应的复合形状。</li>\n</ol>\n<p>将一个海龟形状加入 TurtleScreen 的形状列表。只有这样注册过的形状才能通过执行 <code>shape(shapename)</code> 命令来使用。<code>turtle.``turtles</code>()</p>\n<p>返回屏幕上的海龟列表。</p>\n<p><strong>&gt;&gt;&gt;</strong> <strong>for</strong> turtle <strong>in</strong> screen.turtles():<br>*<em>… *</em>    turtle.color(“red”)</p>\n<p><code>turtle.``window_height</code>()</p>\n<p>返回海龟窗口的高度。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.window_height()<br>480</p>\n<p><code>turtle.``window_width</code>()</p>\n<p>返回海龟窗口的宽度。:&gt;&gt;&gt;</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.window_width()<br>640</p>\n<h3 id=\"Screen-专有方法-而非继承自-TurtleScreen\"><a href=\"#Screen-专有方法-而非继承自-TurtleScreen\" class=\"headerlink\" title=\"Screen 专有方法, 而非继承自 TurtleScreen\"></a>Screen 专有方法, 而非继承自 TurtleScreen</h3><p><code>turtle.``bye</code>()</p>\n<p>关闭海龟绘图窗口。<code>turtle.``exitonclick</code>()</p>\n<p>将 bye() 方法绑定到 Screen 上的鼠标点击事件。</p>\n<p>如果配置字典中 “using_IDLE” 的值为 <code>False</code> (默认值) 则同时进入主事件循环。注: 如果启动 IDLE 时使用了 <code>-n</code> 开关 (无子进程)，<code>turtle.cfg</code> 中此数值应设为 <code>True</code>。在此情况下 IDLE 本身的主事件循环同样会作用于客户脚本。<code>turtle.``setup</code>(<em>width=_CFG[“width”], height=_CFG[“height”], startx=_CFG[“leftright”], starty=_CFG[“topbottom”]</em>)</p>\n<p>设置主窗口的大小和位置。默认参数值保存在配置字典中，可通过 <code>turtle.cfg</code> 文件进行修改。</p>\n<p>参数:</p>\n<p><strong>width</strong> -- 如为一个整型数值，表示大小为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 50%<strong>height</strong> -- 如为一个整型数值，表示高度为多少像素，如为一个浮点数值，则表示屏幕的占比；默认为屏幕的 75%<strong>startx</strong> -- 如为正值，表示初始位置距离屏幕左边缘多少像素，负值表示距离右边缘，<code>None</code> 表示窗口水平居中<strong>starty</strong> -- 如为正值，表示初始位置距离屏幕上边缘多少像素，负值表示距离下边缘，<code>None</code> 表示窗口垂直居中</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.setup (width=200, height=200, startx=0, starty=0)<br><strong>&gt;&gt;&gt; **             <em># sets window to 200x200 pixels, in upper left of screen</em><br>**&gt;&gt;&gt;</strong> screen.setup(width=.75, height=0.5, startx=None, starty=None)<br>*<em>&gt;&gt;&gt; *</em>             <em># sets window to 75% of screen by 50% of screen and centers</em></p>\n<p><code>turtle.``title</code>(<em>titlestring</em>)</p>\n<p>参数:</p>\n<p><strong>titlestring</strong> -- 一个字符串，显示为海龟绘图窗口的标题栏文本</p>\n<p>设置海龟窗口标题为 <em>titlestring</em> 指定的文本。</p>\n<p><strong>&gt;&gt;&gt;</strong> screen.title(“Welcome to the turtle zoo!”)</p>\n<h2 id=\"公共类\"><a href=\"#公共类\" class=\"headerlink\" title=\"公共类\"></a>公共类</h2><p><em>class _<code>turtle.``RawTurtle</code>(_canvas</em>)<em>class _<code>turtle.``RawPen</code>(_canvas</em>)</p>\n<p>参数:</p>\n<p><strong>canvas</strong> -- 一个 <code>tkinter.Canvas</code> , <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.ScrolledCanvas\" target=\"_blank\" rel=\"noopener\"><code>ScrolledCanvas</code></a> 或 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.TurtleScreen\" target=\"_blank\" rel=\"noopener\"><code>TurtleScreen</code></a> 类对象</p>\n<p>创建一个海龟。海龟对象具有 “Turtle/RawTurtle 方法” 一节所述的全部方法。_class _<code>turtle.``Turtle</code></p>\n<p>RawTurtle 的子类，具有相同的接口，但其绘图场所为默认的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Screen\" target=\"_blank\" rel=\"noopener\"><code>Screen</code></a> 类对象，在首次使用时自动创建。<em>class _<code>turtle.``TurtleScreen</code>(_cv</em>)</p>\n<p>参数:</p>\n<p><strong>cv</strong> -- 一个 <code>tkinter.Canvas</code> 类对象</p>\n<p>提供面向屏幕的方法例如 <code>setbg()</code> 等。说明见上文。_class _<code>turtle.``Screen</code></p>\n<p>TurtleScreen 的子类，<a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#screenspecific\" target=\"_blank\" rel=\"noopener\">增加了四个方法</a>.<em>class _<code>turtle.``ScrolledCanvas</code>(_master</em>)</p>\n<p>参数:</p>\n<p><strong>master</strong> -- 可容纳 ScrolledCanvas 的 Tkinter 部件，即添加了滚动条的 Tkinter-canvas</p>\n<p>由 Screen 类使用，使其能够自动提供一个 ScrolledCanvas 作为海龟的绘图场所。<em>class <em><code>turtle.``Shape</code>(<em>type</em></em>, _data</em>)</p>\n<p>参数:</p>\n<p><strong>type_</strong> -- 字符串 “polygon”, “image”, “compound” 其中之一</p>\n<p>实现形状的数据结构。<code>(type_, data)</code> 必须遵循以下定义:</p>\n<p><em>type_</em></p>\n<p><em>data</em></p>\n<p>“polygon”</p>\n<p>一个多边形元组，即由坐标值对构成的元组</p>\n<p>“image”</p>\n<p>一个图片 (此形式仅限内部使用!)</p>\n<p>“compound”</p>\n<p><code>None</code> (复合形状必须使用 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.Shape.addcomponent\" target=\"_blank\" rel=\"noopener\"><code>addcomponent()</code></a> 方法来构建)</p>\n<p><code>addcomponent</code>(<em>poly</em>, <em>fill</em>, <em>outline=None</em>)</p>\n<p>参数:</p>\n<p><strong>poly</strong> -- 一个多边形，即由数值对构成的元组<strong>fill</strong> -- 一种颜色，将用来填充 <em>poly</em> 指定的多边形<strong>outline</strong> -- 一种颜色，用于多边形的轮廓 (如有指定)</p>\n<p>示例:</p>\n<p><strong>&gt;&gt;&gt;</strong> poly = ((0,0),(10,-5),(0,10),(-10,-5))<br><strong>&gt;&gt;&gt;</strong> s = Shape(“compound”)<br><strong>&gt;&gt;&gt;</strong> s.addcomponent(poly, “red”, “blue”)<br><strong>&gt;&gt;&gt;</strong> <em># … add more components and then use register_shape()</em></p>\n<p>参见 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#compoundshapes\" target=\"_blank\" rel=\"noopener\">复合形状</a>。<em>class _<code>turtle.``Vec2D</code>(_x</em>, <em>y</em>)</p>\n<p>一个二维矢量类，用来作为实现海龟绘图的辅助类。也可能在海龟绘图程序中使用。派生自元组，因此矢量也属于元组!</p>\n<p>提供的运算 (<em>a</em>, <em>b</em> 为矢量, <em>k</em> 为数值):</p>\n<ul>\n<li><code>a + b</code> 矢量加法</li>\n<li><code>a - b</code> 矢量减法</li>\n<li><code>a * b</code> 内积</li>\n<li><code>k * a</code> 和 <code>a * k</code> 与标量相乘</li>\n<li><code>abs(a)</code> a 的绝对值</li>\n<li><code>a.rotate(angle)</code> 旋转</li>\n</ul>\n<h2 id=\"帮助与配置\"><a href=\"#帮助与配置\" class=\"headerlink\" title=\"帮助与配置\"></a>帮助与配置</h2><h3 id=\"如何使用帮助\"><a href=\"#如何使用帮助\" class=\"headerlink\" title=\"如何使用帮助\"></a>如何使用帮助</h3><p>Screen 和 Turtle 类的公用方法以文档字符串提供了详细的文档。因此可以利用 Python 帮助工具获取这些在线帮助信息:</p>\n<ul>\n<li>当使用 IDLE 时，输入函数/方法调用将弹出工具提示显示其签名和文档字符串的头几行。</li>\n<li>对文法或函数调用 <a href=\"https://docs.python.org/zh-cn/3.7/library/functions.html#help\" target=\"_blank\" rel=\"noopener\"><code>help()</code></a> 将显示其文档字符串:&gt;&gt;&gt;<strong>&gt;&gt;&gt;</strong> help(Screen.bgcolor) Help on method bgcolor in module turtle: bgcolor(self, <em>args) unbound turtle.Screen method Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. &gt;&gt;&gt; screen.bgcolor(“orange”) &gt;&gt;&gt; screen.bgcolor() “orange” &gt;&gt;&gt; screen.bgcolor(0.5,0,0.5) &gt;&gt;&gt; screen.bgcolor() “#800080” *</em>&gt;&gt;&gt;** help(Turtle.penup) Help on method penup in module turtle: penup(self) unbound turtle.Turtle method Pull the pen up – no drawing when moving. Aliases: penup | pu | up No argument &gt;&gt;&gt; turtle.penup()</li>\n<li>方法对应函数的文档字符串的形式会有一些修改:&gt;&gt;&gt;<strong>&gt;&gt;&gt;</strong> help(bgcolor) Help on function bgcolor in module turtle: bgcolor(<em>args) Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. Example:: &gt;&gt;&gt; bgcolor(“orange”) &gt;&gt;&gt; bgcolor() “orange” &gt;&gt;&gt; bgcolor(0.5,0,0.5) &gt;&gt;&gt; bgcolor() “#800080” *</em>&gt;&gt;&gt;** help(penup) Help on function penup in module turtle: penup() Pull the pen up – no drawing when moving. Aliases: penup | pu | up No argument Example: &gt;&gt;&gt; penup()</li>\n</ul>\n<p>这些修改版文档字符串是在导入时与方法对应函数的定义一起自动生成的。</p>\n<h3 id=\"文档字符串翻译为不同的语言\"><a href=\"#文档字符串翻译为不同的语言\" class=\"headerlink\" title=\"文档字符串翻译为不同的语言\"></a>文档字符串翻译为不同的语言</h3><p>可使用工具创建一个字典，键为方法名，值为 Screen 和 Turtle 类公共方法的文档字符串。<code>turtle.``write_docstringdict</code>(<em>filename=”turtle_docstringdict”</em>)</p>\n<p>参数:</p>\n<p><strong>filename</strong> -- 一个字符串，表示文件名</p>\n<p>创建文档字符串字典并将其写入 filename 指定的 Python 脚本文件。此函数必须显示地调用 (海龟绘图类并不使用此函数)。文档字符串字典将被写入到 Python 脚本文件 <code>_filename_.py</code>。该文件可作为模板用来将文档字符串翻译为不同语言。</p>\n<p>如果你 (或你的学生) 想使用本国语言版本的 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 在线帮助，你必须翻译文档字符串并保存结果文件，例如 <code>turtle_docstringdict_german.py</code>.</p>\n<p>如果你在 <code>turtle.cfg</code> 文件中加入了相应的条目，此字典将在导入模块时被读取并替代原有的英文版文档字符串。</p>\n<p>在撰写本文档时已经有了德语和意大利语版的文档字符串字典。(更多需求请联系 <a href=\"mailto:glingl%40aon.at\" target=\"_blank\" rel=\"noopener\">glingl@aon.at</a>)</p>\n<h3 id=\"如何配置-Screen-和-Turtle\"><a href=\"#如何配置-Screen-和-Turtle\" class=\"headerlink\" title=\"如何配置 Screen 和 Turtle\"></a>如何配置 Screen 和 Turtle</h3><p>内置的默认配置是模仿旧 turtle 模块的外观和行为，以便尽可能地与其保持兼容。</p>\n<p>如果你想使用不同的配置，以便更好地反映此模块的特性或是更适合你的需求，例如在课堂中使用，你可以准备一个配置文件 <code>turtle.cfg</code>，该文件将在导入模块时被读取并根据其中的设定修改模块配置。</p>\n<p>内置的配置对应以下的 turtle.cfg:</p>\n<p>width = 0.5<br>height = 0.75<br>leftright = <strong>None</strong><br>topbottom = <strong>None</strong><br>canvwidth = 400<br>canvheight = 300<br>mode = standard<br>colormode = 1.0<br>delay = 10<br>undobuffersize = 1000<br>shape = classic<br>pencolor = black<br>fillcolor = black<br>resizemode = noresize<br>visible = <strong>True</strong><br>language = english<br>exampleturtle = turtle<br>examplescreen = screen<br>title = Python Turtle Graphics<br>using_IDLE = <strong>False</strong></p>\n<p>选定条目的简短说明:</p>\n<ul>\n<li>开头的四行对应 <code>Screen.setup()</code> 方法的参数。</li>\n<li>第 5 和 6 行对应 <code>Screen.screensize()</code> 方法的参数。</li>\n<li><em>shape</em> 可以是任何内置形状，即: arrow, turtle 等。更多信息可用 <code>help(shape)</code> 查看。</li>\n<li>如果你想使用无填充色 (即令海龟变透明)，你必须写 <code>fillcolor = &quot;&quot;</code> (但 cfg 文件中所有非空字符串都不可加引号)。</li>\n<li>如果你想令海龟反映其状态，你必须使用 <code>resizemode = auto</code>。</li>\n<li>如果你设置语言例如 <code>language = italian</code> 则文档字符串字典 <code>turtle_docstringdict_italian.py</code> 将在导入模块时被加载 (如果导入路径即 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 的目录中存在此文件。</li>\n<li><em>exampleturtle</em> 和 <em>examplescreen</em> 条目定义了相应对象在文档字符串中显示的名称。方法文档字符串转换为函数文档字符串时将从文档字符串中删去这些名称。</li>\n<li><em>using_IDLE</em>: 如果你经常使用 IDLE 并启用其 -n 开关 (“无子进程”) 则应将此项设为 <code>True</code>，这将阻止 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#turtle.exitonclick\" target=\"_blank\" rel=\"noopener\"><code>exitonclick()</code></a> 进入主事件循环。</li>\n</ul>\n<p><code>turtle.cfg</code> 文件可以保存于 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 所在目录，当前工作目录也可以有一个同名文件。后者会重载覆盖前者的设置。</p>\n<p><code>Lib/turtledemo</code> 目录中也有一个 <code>turtle.cfg</code> 文件。你可以将其作为示例进行研究，并在运行演示时查看其作用效果 (但最好不要在演示查看器中运行)。</p>\n<h2 id=\"turtledemo-演示脚本集\"><a href=\"#turtledemo-演示脚本集\" class=\"headerlink\" title=\"turtledemo --- 演示脚本集\"></a><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo\" target=\"_blank\" rel=\"noopener\"><code>turtledemo</code></a> --- 演示脚本集</h2><p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo\" target=\"_blank\" rel=\"noopener\"><code>turtledemo</code></a> 包汇集了一组演示脚本。这些脚本可以通过以下命令打开所提供的演示查看器运行和查看:</p>\n<p>python -m turtledemo</p>\n<p>此外，你也可以单独运行其中的演示脚本。例如，:</p>\n<p>python -m turtledemo.bytedesign</p>\n<p><a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtledemo\" target=\"_blank\" rel=\"noopener\"><code>turtledemo</code></a> 包目录中的内容:</p>\n<ul>\n<li>一个演示查看器 <code>__main__.py</code>，可用来查看脚本的源码并即时运行。</li>\n<li>多个脚本文件，演示 <a href=\"https://docs.python.org/zh-cn/3.7/library/turtle.html#module-turtle\" target=\"_blank\" rel=\"noopener\"><code>turtle</code></a> 模块的不同特性。所有示例可通过 Examples 菜单打开。也可以单独运行每个脚本。</li>\n<li>一个 <code>turtle.cfg</code> 文件，作为说明如何编写并使用模块配置文件的示例模板。</li>\n</ul>\n<p>演示脚本清单如下:</p>\n<p>名称</p>\n<p>描述</p>\n<p>相关特性</p>\n<p>bytedesign</p>\n<p>复杂的传统海龟绘图模式</p>\n<p><code>tracer()</code>, delay, <code>update()</code></p>\n<p>chaos</p>\n<p>绘制 Verhulst 动态模型，演示通过计算机的运算可能会生成令人惊叹的结果</p>\n<p>世界坐标系</p>\n<p>clock</p>\n<p>绘制模拟时钟显示本机的当前时间</p>\n<p>海龟作为表针, ontimer</p>\n<p>colormixer</p>\n<p>试验 r, g, b 颜色模式</p>\n<p><code>ondrag()</code> 当鼠标拖动</p>\n<p>forest</p>\n<p>绘制 3 棵广度优先树</p>\n<p>随机化</p>\n<p>fractalcurves</p>\n<p>绘制 Hilbert &amp; Koch 曲线</p>\n<p>递归</p>\n<p>lindenmayer</p>\n<p>文化数学 (印度装饰艺术)</p>\n<p>L-系统</p>\n<p>minimal_hanoi</p>\n<p>汉诺塔</p>\n<p>矩形海龟作为汉诺盘 (shape, shapesize)</p>\n<p>nim</p>\n<p>玩经典的“尼姆”游戏，开始时有三堆小棒，与电脑对战。</p>\n<p>海龟作为小棒，事件驱动 (鼠标, 键盘)</p>\n<p>paint</p>\n<p>超极简主义绘画程序</p>\n<p><code>onclick()</code> 当鼠标点击</p>\n<p>peace</p>\n<p>初级技巧</p>\n<p>海龟: 外观与动画</p>\n<p>penrose</p>\n<p>非周期性地使用风筝和飞镖形状铺满平面</p>\n<p><code>stamp()</code> 印章</p>\n<p>planet_and_moon</p>\n<p>模拟引力系统</p>\n<p>复合开关, <code>Vec2D</code> 类</p>\n<p>round_dance</p>\n<p>两两相对并不断旋转舞蹈的海龟</p>\n<p>复合形状, clone shapesize, tilt, get_shapepoly, update</p>\n<p>sorting_animate</p>\n<p>动态演示不同的排序方法</p>\n<p>简单对齐, 随机化</p>\n<p>tree</p>\n<p>一棵 (图形化的) 广度优先树 (使用生成器)</p>\n<p><code>clone()</code> 克隆</p>\n<p>two_canvases</p>\n<p>简单设计</p>\n<p>两块画布上的海龟</p>\n<p>wikipedia</p>\n<p>一个来自介绍海龟绘图的维基百科文章的图案</p>\n<p><code>clone()</code>, <code>undo()</code></p>\n<p>yinyang</p>\n<p>另一个初级示例</p>\n<p><code>circle()</code> 画圆</p>\n<p>祝你玩得开心！</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjz3xz48m0001vovqb0wgwoe1","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz48t0003vovqgz54nibn"},{"post_id":"cjz3xz4940005vovqs5fz8c9d","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz499000avovqweohqgmt"},{"post_id":"cjz3xz4960007vovqr955x0xp","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz49a000cvovqy94flgtr"},{"post_id":"cjz3xz4970008vovqztxw3vto","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz49b000dvovqemvq2tto"},{"post_id":"cjz3xz4920004vovq3dy16v0s","category_id":"cjz3xz4950006vovq2e30ncfw","_id":"cjz3xz49b000evovq4s2t6nf0"},{"post_id":"cjz3xz4980009vovq5mu22zu2","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz49c000fvovqkem3i6da"},{"post_id":"cjz3xz499000bvovqt2bjbs9o","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz49c000gvovqpra9bgf8"},{"post_id":"cjz3xz49v000hvovqkae0wmrm","category_id":"cjz3xz48r0002vovquej9yih9","_id":"cjz3xz49x000ivovqy7wfg9yx"}],"PostTag":[],"Tag":[]}}